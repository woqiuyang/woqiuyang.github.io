{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-butterfly-dev/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/1.png","path":"img/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/10.png","path":"img/10.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/2.png","path":"img/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/3.png","path":"img/3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/4.png","path":"img/4.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/5.png","path":"img/5.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/6.png","path":"img/6.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/7.png","path":"img/7.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/8.png","path":"img/8.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/9.png","path":"img/9.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/img/logo2.png","path":"img/logo2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly-dev/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"a40d694c97b15f3f15f56b313446c87119a0b95b","modified":1653879917170},{"_id":"source/tags/index.md","hash":"780b28b644cc58cd10409a64339c5407aa5f70ce","modified":1653879917171},{"_id":"source/_posts/mysql/01子查询的七种类型.md","hash":"f75562cad413ac6cd71c46e9ff5c697e811d12d7","modified":1653879917167},{"_id":"source/_posts/万融/1-环境搭建.md","hash":"072d96b87a53a499cfce83872e192e6b44092684","modified":1654855879727},{"_id":"source/_posts/加密/Picgo配置.md","hash":"60323dd499cb8cc9e870bc1e6b3a96c67fc406f7","modified":1653879917168},{"_id":"source/_posts/加密/开发常用网址.md","hash":"ef2efecaca8a3afe26d842e5b1b4a58f405364de","modified":1655174497701},{"_id":"source/_posts/开发规范/Java泛型.md","hash":"795e3aad2047c941e06c9e3f35f188f486891856","modified":1653879917168},{"_id":"source/_posts/工具/start.spring.io镜像.md","hash":"88bd4625b8aba03d61b50bdd5d1401fd5d46b71f","modified":1653896679692},{"_id":"source/_posts/开发规范/跨域请求.md","hash":"72c1003c6f9d2410b4e9436030fff35bf3c74f9c","modified":1653879917169},{"_id":"source/_posts/开发规范/阿里巴巴开发规范.md","hash":"9e4a2d236f44c77b9683e7a14e37dfa514d7d3bc","modified":1653879917169},{"_id":"source/_posts/组件/Apollo配置中心.md","hash":"08aaa07ada47eb52b40bb4cc0f4149ad2266c6e5","modified":1654855879727},{"_id":"source/_posts/组件/CompletableFuture.md","hash":"4e786e9f73fab4a9db3eedb70ed3c7c960a0b385","modified":1654855879728},{"_id":"source/_posts/组件/EasyExcel.md","hash":"ae4557380f3d0af2759f240bb59d34ea2b9ea1ef","modified":1654855879728},{"_id":"source/_posts/组件/FastJson.md","hash":"e8c82e98dc2bde48d72e322bef157e04a2d9d549","modified":1653879917170},{"_id":"source/_posts/组件/StringJoiner类.md","hash":"e1edf07b7684fbaf6cbdc1c7f7799a66acf226d7","modified":1654855879728},{"_id":"source/_posts/组件/多线程.md","hash":"ee1f6deab673cac1b67113d348f47a8aa0c304de","modified":1654855879729},{"_id":"source/_posts/组件/微信支付.md","hash":"831e8673d20a0b3da95574cb73713e73cade0eaf","modified":1654855879729},{"_id":"source/_posts/开发记录/maven.md","hash":"3868633f7633a31c6e8845798b0d166a252ed97a","modified":1655695113928},{"_id":"source/_posts/组件/redis之list来实现限流.md","hash":"28d7fb909f60c12f03bd5dfca75f3b4e3ec63a12","modified":1653882700955},{"_id":"source/_posts/组件/foreach批量插入.md","hash":"cdaf113fe24d19da33c43d80c70e7e2ea4f7d772","modified":1653895835020},{"_id":"themes/hexo-theme-butterfly-dev/_config.yml","hash":"3f772d2af2680da3a9252021b9de20a26dd63f8e","modified":1655695299667},{"_id":"themes/hexo-theme-butterfly-dev/package.json","hash":"ff4e6e90badea36f89e79a3c7a25e67dcdf36e32","modified":1653879917209},{"_id":"themes/hexo-theme-butterfly-dev/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1653879917173},{"_id":"themes/hexo-theme-butterfly-dev/README.md","hash":"2555c3e418157a0fda35d3deaf029f12e5a12f12","modified":1653879917174},{"_id":"themes/hexo-theme-butterfly-dev/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1653879917174},{"_id":"themes/hexo-theme-butterfly-dev/README_CN.md","hash":"84fa5880f5358abe919eb295aad3cfd17b69b631","modified":1653879917174},{"_id":"themes/hexo-theme-butterfly-dev/languages/en.yml","hash":"69ed4d7aa63a26afd539321784d27494fbebffe8","modified":1653879917176},{"_id":"themes/hexo-theme-butterfly-dev/languages/default.yml","hash":"54a412ace93549f02f8e44fcf3e1cacb161a64db","modified":1653879917175},{"_id":"themes/hexo-theme-butterfly-dev/languages/zh-TW.yml","hash":"c9675ad7721dd20c9f7731438181a891b43553e6","modified":1653879917176},{"_id":"themes/hexo-theme-butterfly-dev/languages/zh-CN.yml","hash":"813eb75fbf274b26e2a0c0c75f359f810ad5eeff","modified":1653879917176},{"_id":"themes/hexo-theme-butterfly-dev/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1653879917177},{"_id":"themes/hexo-theme-butterfly-dev/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1653879917208},{"_id":"themes/hexo-theme-butterfly-dev/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1653879917177},{"_id":"themes/hexo-theme-butterfly-dev/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1653879917208},{"_id":"themes/hexo-theme-butterfly-dev/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1653879917208},{"_id":"themes/hexo-theme-butterfly-dev/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1653879917209},{"_id":"themes/hexo-theme-butterfly-dev/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1653879917173},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1653879917177},{"_id":"themes/hexo-theme-butterfly-dev/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1653879917172},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/additional-js.pug","hash":"8459729db2978bebd7f3668f6dc00a5bb100e633","modified":1653879917178},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head.pug","hash":"687461a9422d1eb4d4b5a619854c79e5acc30fd7","modified":1653879917178},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1653879917178},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1653879917183},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1653879917186},{"_id":"themes/hexo-theme-butterfly-dev/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1653879917172},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/rightside.pug","hash":"205562ec188bfba5686c51af77486550d0927df5","modified":1653879917187},{"_id":"themes/hexo-theme-butterfly-dev/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1653879917210},{"_id":"themes/hexo-theme-butterfly-dev/scripts/events/config.js","hash":"e959cd313fc20c62fe23f0a7cba3d350d6131d66","modified":1653879917210},{"_id":"themes/hexo-theme-butterfly-dev/scripts/events/init.js","hash":"b321a97420082101a4d41e6e571db1a166475e06","modified":1653879917210},{"_id":"themes/hexo-theme-butterfly-dev/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1653879917173},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/sidebar.pug","hash":"2cf68619af17ece9acea71aa2cb06737097890a5","modified":1653879917187},{"_id":"themes/hexo-theme-butterfly-dev/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1653879917210},{"_id":"themes/hexo-theme-butterfly-dev/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1653879917212},{"_id":"themes/hexo-theme-butterfly-dev/scripts/events/welcome.js","hash":"b92cc4648cfe5fb28c58943727823d1178b73a4a","modified":1653879917211},{"_id":"themes/hexo-theme-butterfly-dev/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1653879917211},{"_id":"themes/hexo-theme-butterfly-dev/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1653879917211},{"_id":"themes/hexo-theme-butterfly-dev/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1653879917212},{"_id":"themes/hexo-theme-butterfly-dev/scripts/helpers/inject_head_js.js","hash":"22a2c69b3e68b0e3f80decfd4a2b9c9cc213ff5c","modified":1653879917212},{"_id":"themes/hexo-theme-butterfly-dev/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1653879917213},{"_id":"themes/hexo-theme-butterfly-dev/scripts/helpers/related_post.js","hash":"26dd1900e68a3e10a5cf3f3484a93139a0f1340e","modified":1653879917213},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1653879917214},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1653879917214},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1653879917215},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1653879917214},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1653879917215},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1653879917216},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1653879917216},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1653879917217},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1653879917216},{"_id":"themes/hexo-theme-butterfly-dev/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1653879917217},{"_id":"themes/hexo-theme-butterfly-dev/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1653879917233},{"_id":"themes/hexo-theme-butterfly-dev/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1653879917237},{"_id":"themes/hexo-theme-butterfly-dev/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1653879917242},{"_id":"themes/hexo-theme-butterfly-dev/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1653879917242},{"_id":"themes/hexo-theme-butterfly-dev/source/css/var.styl","hash":"584ef7b18d5e677eb2e62f9b139097d3b714a993","modified":1653879917233},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1653879917179},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1653879917179},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/config.pug","hash":"b8e3e07b0e8f3cf25af9550c6361725a05045b92","modified":1653879917179},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1653879917180},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1653879917180},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1653879917180},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1653879917180},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1653879917181},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1653879917181},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1653879917182},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/header/nav.pug","hash":"a9e56b1c41bf327859b0a7bcb8e72b458bd851b2","modified":1653879917182},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1653879917182},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/header/post-info.pug","hash":"3b0b2053fe9f08cbc21b3baa53163adc2f76c19a","modified":1653879917182},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1653879917183},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1653879917183},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1653879917184},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1653879917184},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/mixins/post-ui.pug","hash":"9c8e65939d048a579ea08d063c0f98550376f536","modified":1653879917184},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1653879917185},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/page/flink.pug","hash":"e2eba0fcb8332cb333b2aff9c76664e40e2e1974","modified":1653879917185},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1653879917185},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1653879917185},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1653879917186},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1653879917186},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1653879917187},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1653879917196},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1653879917200},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/pjax.pug","hash":"61a220bf134201bdf49430b578305191421c547c","modified":1653879917200},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1653879917200},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/subtitle.pug","hash":"311d883dede2a6838bf24ba9e4b3f69e62d5b3f1","modified":1653879917203},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1653879917203},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1653879917204},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1653879917203},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_author.pug","hash":"935dde9cf4c1fef0214dbb9935ecb71805735be0","modified":1653879917205},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1653879917205},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1653879917205},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1653879917205},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1653879917206},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1653879917206},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1653879917206},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1653879917207},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1653879917207},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1653879917207},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_global/function.styl","hash":"d35d156b06f4da25a048872f1cfc35ad49092515","modified":1653879917218},{"_id":"themes/hexo-theme-butterfly-dev/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1653879917245},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_global/index.styl","hash":"b9d7d23dc8810542b8c8ffcbfbd3694318debcc6","modified":1653879917218},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1653879917218},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/aside.styl","hash":"b62d41e079e45146f0019694156049c5f1be040a","modified":1653879917220},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1653879917220},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1653879917221},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1653879917221},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1653879917220},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/head.styl","hash":"f3aac52defb3497079a313e8c63ac2f7ee24dfbe","modified":1653879917221},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/loading.styl","hash":"844858ae87c7278996ce484c6b456db354c48764","modified":1653879917222},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1653879917223},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/post.styl","hash":"35c7fa4e18cefe01b62e0caedccbdc0c26b3546c","modified":1653879917223},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1653879917223},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1653879917223},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1653879917224},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/sidebar.styl","hash":"4258fa2e590aeea704660008aed7f0362fac72d4","modified":1653879917224},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_layout/third-party.styl","hash":"988a947f80c218d8c2279c9975f46d0c2a3d0b6e","modified":1653879917224},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_mode/darkmode.styl","hash":"0bcd07ffbd2a86a1b24eaefabd7e278034b14ee2","modified":1653879917225},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1653879917225},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1653879917226},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1653879917226},{"_id":"themes/hexo-theme-butterfly-dev/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1653879917245},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1653879917227},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1653879917226},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1653879917228},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1653879917227},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_page/homepage.styl","hash":"c42b872df237726483d93d6124b8751d4f64cf86","modified":1653879917227},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_search/algolia.styl","hash":"f84268708a9ea3c417426bf194bdfea9f7374628","modified":1653879917228},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_search/index.styl","hash":"f9bee6cac49de1171076560acf6a6eec96647c56","modified":1653879917228},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_search/local-search.styl","hash":"107b9e586b12d1fe7bb5b6e53fcc8e31516ab3ba","modified":1653879917228},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1653879917229},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1653879917230},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1653879917230},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1653879917231},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1653879917231},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1653879917231},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/note.styl","hash":"076cd87805207c9b5612ec9771f6994287f4c169","modified":1653879917231},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1653879917232},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1653879917232},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1653879917232},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1653879917188},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1653879917188},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1653879917188},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1653879917189},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1653879917189},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1653879917189},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1653879917190},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1653879917190},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1653879917190},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1653879917190},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1653879917191},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1653879917192},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/disqusjs.pug","hash":"9ddfac9ae7071ecd982ca3808dcfd4d2d6098f33","modified":1653879917192},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1653879917192},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/facebook_comments.pug","hash":"e6d48579029c253b85f2abbba5997d6baf9a10ae","modified":1653879917193},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/giscus.pug","hash":"a780962b3a04cac4b296ce809ee7101e42cf3a37","modified":1653879917193},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/gitalk.pug","hash":"b22ed23c78fb372cbdc4cfd3f733beb2ebea5d74","modified":1653879917193},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/index.pug","hash":"414f876d28f8497d6d551363a89c5c69bf1533eb","modified":1653879917194},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/js.pug","hash":"810e8ca2669433f649329859922aabbb30d76178","modified":1653879917194},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1653879917194},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/twikoo.pug","hash":"8cd118d933cb8a9f9158523eaf71c14e9895cff9","modified":1653879917195},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/utterances.pug","hash":"21098eba47237ec003228e7fa70a5fbb14d6c804","modified":1653879917195},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/valine.pug","hash":"d1ac48307e4999be08c63c673e98fe3fcee5bfce","modified":1653879917195},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/comments/waline.pug","hash":"0f287b10408b4455d946a69677549fcfd302e8c0","modified":1653879917196},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1653879917197},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1653879917197},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1653879917197},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/math/mermaid.pug","hash":"6dd420ea858f3237d8a7353e8541df665dd6fdf1","modified":1653879917198},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1653879917198},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1653879917199},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1653879917199},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"444820bc7e4a9a033062bcd8cd71b10b49d1968a","modified":1653879917199},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/newest-comments/valine.pug","hash":"3b42d3b8468431655112705bff7530ce647f8c05","modified":1653879917199},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/newest-comments/waline.pug","hash":"c9e6e14770317a3516e2e2f320654cd52b1bd73a","modified":1653879917200},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/search/algolia.pug","hash":"a5aa867697578660fe78a0d9b0f245d09b571110","modified":1653879917201},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1653879917201},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/search/local-search.pug","hash":"7ce18e4b22c41dcfd84835e89b47030fc5f4a394","modified":1653879917201},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1653879917202},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1653879917202},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1653879917202},{"_id":"themes/hexo-theme-butterfly-dev/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1653879917202},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1653879917219},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1653879917219},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1653879917220},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1653879917220},{"_id":"themes/hexo-theme-butterfly-dev/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1653879917220},{"_id":"themes/hexo-theme-butterfly-dev/source/img/6.png","hash":"bd0d41c8694f1e3ec307fceb902f8e747b266e3a","modified":1653879917239},{"_id":"themes/hexo-theme-butterfly-dev/source/js/main.js","hash":"a2c1c55b5b8ec9a83cf6242ebc9ea9be95e1f0c1","modified":1653879917244},{"_id":"themes/hexo-theme-butterfly-dev/source/js/search/algolia.js","hash":"d684f2a60fe821d61761a01cf36fd2fb57c31c9c","modified":1653879917244},{"_id":"themes/hexo-theme-butterfly-dev/source/img/10.png","hash":"5c62a96328d4e275bb6ceb07a2c7c32d67ca8527","modified":1653879917235},{"_id":"themes/hexo-theme-butterfly-dev/source/img/1.png","hash":"65142ce9ed015f50b730b50f1ba4790266369e82","modified":1653879917234},{"_id":"themes/hexo-theme-butterfly-dev/source/img/2.png","hash":"93d8dc40cf2c4134be30e87c8dc67343723f694e","modified":1653879917235},{"_id":"themes/hexo-theme-butterfly-dev/source/img/3.png","hash":"b83f92b53f6d7ee3d55b7a48f6e643b60a2d48cf","modified":1653879917236},{"_id":"themes/hexo-theme-butterfly-dev/source/img/4.png","hash":"7221511b18692fbc2d919bc04c6a2d37e0636328","modified":1653879917237},{"_id":"themes/hexo-theme-butterfly-dev/source/img/5.png","hash":"239cd0a713f025ddbeb1b95e5b2c8f99b5de7db1","modified":1653879917238},{"_id":"themes/hexo-theme-butterfly-dev/source/img/7.png","hash":"eccc99bde3f55581fd576a70263a6de7ffc5d080","modified":1653879917240},{"_id":"themes/hexo-theme-butterfly-dev/source/img/8.png","hash":"bb78ed32ec38850880ffa20e4d0af492fc1bf5cb","modified":1653879917240},{"_id":"themes/hexo-theme-butterfly-dev/source/img/9.png","hash":"3a4aa98ab8a86363ca72a9741729b6bb933dd93d","modified":1653879917241},{"_id":"themes/hexo-theme-butterfly-dev/source/js/search/local-search.js","hash":"2086c6ad3c48ded263a36b230485ed0c15293f8e","modified":1653879917245},{"_id":"themes/hexo-theme-butterfly-dev/source/img/logo2.png","hash":"1baf7822069002df9a58d3ec666e1883cc45e5e6","modified":1653879917243},{"_id":"public/atom.xml","hash":"7488f35b41fac3c95b3f068165354042977ee158","modified":1654855942115},{"_id":"public/content.json","hash":"7e88101d3879132721b716ca103b839df1115f0b","modified":1654855942115},{"_id":"public/search.xml","hash":"4674062987b804bdba1d191fd069659611722816","modified":1654855942115},{"_id":"public/404.html","hash":"b96f6a235c6400c265c37516780b35ef30aba62b","modified":1654855942115},{"_id":"public/categories/index.html","hash":"99f7ede9a825da2469dd99c92f8ba20bcb0fc2b0","modified":1654855942115},{"_id":"public/tags/index.html","hash":"3c97dfb8f33a9eb8c16add0207652b1b8600c6e4","modified":1654855942115},{"_id":"public/2022/06/10/开发记录/maven/index.html","hash":"9de28f1b6cd99658f1e40b31aa4204840ebb64bb","modified":1654855942115},{"_id":"public/2022/05/30/工具/start.spring.io镜像/index.html","hash":"3d7a34b98654b9314bb3c7c6afadfa7c968d91b4","modified":1654855942115},{"_id":"public/2022/05/23/加密/Picgo配置/index.html","hash":"e0f5c27380efcb69a71fa13c50c40a434788e770","modified":1654855942115},{"_id":"public/2020/05/24/万融/1-环境搭建/index.html","hash":"9fbcf37e4023934508b4d8b5d298f4c9cce027e2","modified":1654855942115},{"_id":"public/archives/2019/index.html","hash":"b5706fb9e15bc8d5a8421aeb660a12c9c0b13ec9","modified":1654855942115},{"_id":"public/archives/2019/05/index.html","hash":"82aedea169ee63099006a93c0941d577b35e8f7f","modified":1654855942115},{"_id":"public/archives/2020/page/2/index.html","hash":"f7568c644a4e6fcd94251411f0d6575bc7f90df2","modified":1654855942115},{"_id":"public/archives/2020/05/page/2/index.html","hash":"3f3fb6255fd5ff58cc7db2450ea4401edbb31926","modified":1654855942115},{"_id":"public/archives/2022/index.html","hash":"697d34382d482089db8a6ac502e0a0b93a43f898","modified":1654855942115},{"_id":"public/archives/2022/05/index.html","hash":"a027ef1f134921b5d50c1ac38795d6cf49fa041c","modified":1654855942115},{"_id":"public/archives/2022/06/index.html","hash":"7ed79549dc5e3da9738bda50a6bb4c19d29f56f4","modified":1654855942115},{"_id":"public/tags/mysql/index.html","hash":"10127d302168a99b0e5f48257e4cfadcebaa8cd9","modified":1654855942115},{"_id":"public/tags/万融/index.html","hash":"1e2f164e4bf89aa7881b9f86b1fb2498a02f875b","modified":1654855942115},{"_id":"public/tags/嘿嘿/index.html","hash":"c19198ff9d132ce61fd88c9718658fed02a4a846","modified":1654855942115},{"_id":"public/tags/工具/index.html","hash":"e2ee97363ba5af4f7ad404f65ad4d5c1ed4537d4","modified":1654855942115},{"_id":"public/tags/开发记录/index.html","hash":"f8e52c8228dc1e5c580f158edfba506fd42971bb","modified":1654855942115},{"_id":"public/2022/06/10/加密/开发常用网址/index.html","hash":"305d85a25a2545ae65f5c97bc080c00a66ea58b5","modified":1654855942115},{"_id":"public/2022/05/30/组件/foreach批量插入/index.html","hash":"4e3b4b4904653df2ef4d9a93fb6133c410423c0f","modified":1654855942115},{"_id":"public/2022/05/30/组件/redis之list来实现限流/index.html","hash":"0306efce045617e4279397a63c9677fba94939b8","modified":1654855942115},{"_id":"public/2020/05/27/组件/StringJoiner类/index.html","hash":"9083ceb157be754fd960c55feb6d37f3c1768357","modified":1654855942115},{"_id":"public/2020/05/27/组件/CompletableFuture/index.html","hash":"9c5ee8f2c6497d267e5f043a8a6981499dda7f11","modified":1654855942115},{"_id":"public/2020/05/26/组件/多线程/index.html","hash":"8206bd3261a85eabdb3b97ddd269782cd27c01d4","modified":1654855942115},{"_id":"public/2020/05/25/组件/EasyExcel/index.html","hash":"1e5fc075e781ed9e85a89ce76a8aaeadc39c9599","modified":1654855942115},{"_id":"public/2020/05/24/组件/Apollo配置中心/index.html","hash":"3c3ad12f0370db0eca0035143de3ba340f885037","modified":1654855942115},{"_id":"public/2020/05/22/组件/微信支付/index.html","hash":"d4254b747b93260c55d0c04543edc04ef0fe0bb8","modified":1654855942115},{"_id":"public/2020/05/20/组件/FastJson/index.html","hash":"2e5b638f23427f7400bba8f4fcbf02a43aa629f7","modified":1654855942115},{"_id":"public/2020/05/18/开发规范/跨域请求/index.html","hash":"8f80b7ba0986153a5fe5a059f2676c2588cb2081","modified":1654855942115},{"_id":"public/2020/05/17/开发规范/Java泛型/index.html","hash":"d77e40fa7f8fc9a9acb21066d59d04088107dcd5","modified":1654855942115},{"_id":"public/2020/05/13/开发规范/阿里巴巴开发规范/index.html","hash":"96233fb2ab83fa45e34d7d3ca836f6e8d278e890","modified":1654855942115},{"_id":"public/2019/05/10/mysql/01子查询的七种类型/index.html","hash":"4d9fa09354ed533bdddaf06c756c1668fff42019","modified":1654855942115},{"_id":"public/archives/index.html","hash":"1368cd4f4e88f53d2c0c7d0bdfe1478bf388216e","modified":1654855942115},{"_id":"public/archives/page/2/index.html","hash":"7f3b469bc47ce2a59a9426dc76b48ae952357766","modified":1654855942115},{"_id":"public/archives/2020/index.html","hash":"940ad031d1ac14f1b83234f66861e9af4048beff","modified":1654855942115},{"_id":"public/archives/2020/05/index.html","hash":"d91708d8dc6643f060871c54171c7f1b073cc426","modified":1654855942115},{"_id":"public/index.html","hash":"1b9c736d53843a0bad151cc342c7274b7e814dba","modified":1654855942115},{"_id":"public/page/2/index.html","hash":"adc3f2a7189f67117735c62f508ef69111819eed","modified":1654855942115},{"_id":"public/page/3/index.html","hash":"903521eb92db6152b352a8c7cc4a8a52e54c3402","modified":1654855942115},{"_id":"public/tags/组件/index.html","hash":"a3b35b075679bd1b5ebb74610a96681081c6a010","modified":1654855942115},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1654855942115},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1654855942115},{"_id":"public/img/6.png","hash":"bd0d41c8694f1e3ec307fceb902f8e747b266e3a","modified":1654855942115},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1654855942115},{"_id":"public/css/hbe.style.css","hash":"f80457bac5f4bc67ae41733ee1ffb65d7b6ba1e8","modified":1654855942115},{"_id":"public/lib/hbe.js","hash":"2a6e18b7c37578f582a0acdc1ebc54d1e846b1a7","modified":1654855942115},{"_id":"public/img/1.png","hash":"65142ce9ed015f50b730b50f1ba4790266369e82","modified":1654855942115},{"_id":"public/img/2.png","hash":"93d8dc40cf2c4134be30e87c8dc67343723f694e","modified":1654855942115},{"_id":"public/img/4.png","hash":"7221511b18692fbc2d919bc04c6a2d37e0636328","modified":1654855942115},{"_id":"public/img/8.png","hash":"bb78ed32ec38850880ffa20e4d0af492fc1bf5cb","modified":1654855942115},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1654855942115},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1654855942115},{"_id":"public/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1654855942115},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1654855942115},{"_id":"public/css/index.css","hash":"1fb17bb2c188746b021f609b957761be828f2da4","modified":1654855942115},{"_id":"public/img/10.png","hash":"5c62a96328d4e275bb6ceb07a2c7c32d67ca8527","modified":1654855942115},{"_id":"public/img/3.png","hash":"b83f92b53f6d7ee3d55b7a48f6e643b60a2d48cf","modified":1654855942115},{"_id":"public/img/7.png","hash":"eccc99bde3f55581fd576a70263a6de7ffc5d080","modified":1654855942115},{"_id":"public/img/9.png","hash":"3a4aa98ab8a86363ca72a9741729b6bb933dd93d","modified":1654855942115},{"_id":"public/img/logo2.png","hash":"1baf7822069002df9a58d3ec666e1883cc45e5e6","modified":1654855942115},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1654855942115},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1654855942115},{"_id":"public/img/5.png","hash":"239cd0a713f025ddbeb1b95e5b2c8f99b5de7db1","modified":1654855942115},{"_id":"source/_posts/插件/MyBatisCodeHelper-Pro.md","hash":"f5e6e3ebb888f9aff44a3027f658185adf417ff3","modified":1655178928117},{"_id":"source/_posts/插件/好看的图标.md","hash":"9c4b6f937d120aae59a934141a7d26657d7b135f","modified":1655176720827},{"_id":"source/_posts/插件/阿里云智能编码插件.md","hash":"1569b9310ac90f7f47c5db35c8e26504ab3b6001","modified":1655175434074},{"_id":"source/_posts/日志/2022-6-15.md","hash":"de147c303b37dadc7395e18c113ed6ef814749ba","modified":1655263955133},{"_id":"source/_posts/插件/vo对象转换插件.md","hash":"c8ef655ad787b092ae13e1d220b821a943da1079","modified":1655176552198},{"_id":"source/_posts/日志/资金清算-商户下拉框查询.md","hash":"c21119e0f48c3acc29e61e8dc3b157ea353882c5","modified":1655447497851},{"_id":"source/_posts/开发记录/跨域请求.md","hash":"72c1003c6f9d2410b4e9436030fff35bf3c74f9c","modified":1653879917169},{"_id":"source/_posts/开发记录/阿里巴巴开发规范.md","hash":"9e4a2d236f44c77b9683e7a14e37dfa514d7d3bc","modified":1653879917169},{"_id":"source/_posts/日志/代码片段.md","hash":"88431f63d7f0aa6f39a42b40efacf3bc67246072","modified":1655692799002}],"Category":[],"Data":[],"Page":[{"title":"分類","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---","updated":"2022-05-30T03:05:17.170Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl48ai1k70000ys2makrgfdm7","content":"","site":{"data":{}},"cover":"/img/3.png","excerpt":"","more":""},{"title":"標籤","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 標籤\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---","updated":"2022-05-30T03:05:17.171Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl48ai1kc0002ys2m1qnb46ez","content":"","site":{"data":{}},"cover":"/img/2.png","excerpt":"","more":""}],"Post":[{"title":"子查询的七种类型","date":"2019-05-10T14:55:13.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220510225713.png","_content":"# where 子查询\n`查询单值`\n查出每个栏目最新的商品(以good_id为最大为最新商品)：\n```sql\nselect cat_id,good_id,good_name \nfrom goods \nwhere good_id \nin\n(selct max(good_id) \n    from goods group by cat_id\n);\n```\n# form 型子查询\n`多行多列的结果集`\n查出每个栏目最新的商品 (以 good_id 为最大为最新商品)\n```sql\nselect * \nfrom (select cat_id,good_id,good_name \n      from goods order by cat_id asc, good_id desc)\n      as tep group by cat_id;\n```\n\n# from\n查出挂科 2 门及以上同学的平均分\n```sql\n# 1.先求出挂科两门以上及两门的同学\nselect name,count(*) as gk \nfrom stu where score<60 \ngroup by name having gk>=2;\n# 2.去除多余的一行\nselect name \nfrom (select name,count(*) as gk from stu \nwhere score<60 group by name having gk>=2)as tmp;\n# 3.最终结果\nselect name ,avg(score) as '平均分' \nfrom stu where name in(select name from (select name,count(*) as gk \nfrom stu where score<60 group by name having gk>=2)as tmp)\ngroup by name;\n```\n# in\n查询年龄为 20 岁的员工部门\n```sql\nselect * \nfrom department \nwhere did in(SELECT did from employee where age=20);\n```\n\n# exists\n查询是否存在年龄大于 21 岁的员工\n```sql\nselect * from department where EXISTS (SELECT did from employee where age>21);\n```\n\n# any \n查询满足条件的部门\n```sql\nselect * from department where did> any (SELECT did from employee );\n```\n\n# all\n查询满足条件的部门\n```sql\nselect * from department where did> all(SELECT did from employee );\n```\n\n\n# 比较运算符子查询\n查询赵四是哪个部门的\n```sql\nselect * from department where did= all(SELECT did from employee where name='赵四'); \n```\n# 总结：\n**where 型子查询：指把内部查询的结果作为外层查询的比较条件。\nfrom 型子查询：把内层的查询结果当成临时表，供外层 sql 再次查询。\nin 子查询：内层查询语句仅返回一个数据列，这个数据列的值将供外层查询语句进行比较。\nexists 子查询：把外层的查询结果，拿到内层，看内层是否成立，简单来说后面的返回 true, 外层（也就是前面的语句）才会执行，否则不执行。\nany 子查询：只要满足内层子查询中的任意一个比较条件，就返回一个结果作为外层查询条件。\nall 子查询：内层子查询返回的结果需同时满足所有内层查询条件。\n比较运算符子查询：子查询中可以使用的比较运算符如 “>” “<” “= ” “!=”**\n\n","source":"_posts/mysql/01子查询的七种类型.md","raw":"---\ntitle: 子查询的七种类型\ndate: 2019-5-10 22:55:13\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220510225713.png \ntags:\n- mysql\n---\n# where 子查询\n`查询单值`\n查出每个栏目最新的商品(以good_id为最大为最新商品)：\n```sql\nselect cat_id,good_id,good_name \nfrom goods \nwhere good_id \nin\n(selct max(good_id) \n    from goods group by cat_id\n);\n```\n# form 型子查询\n`多行多列的结果集`\n查出每个栏目最新的商品 (以 good_id 为最大为最新商品)\n```sql\nselect * \nfrom (select cat_id,good_id,good_name \n      from goods order by cat_id asc, good_id desc)\n      as tep group by cat_id;\n```\n\n# from\n查出挂科 2 门及以上同学的平均分\n```sql\n# 1.先求出挂科两门以上及两门的同学\nselect name,count(*) as gk \nfrom stu where score<60 \ngroup by name having gk>=2;\n# 2.去除多余的一行\nselect name \nfrom (select name,count(*) as gk from stu \nwhere score<60 group by name having gk>=2)as tmp;\n# 3.最终结果\nselect name ,avg(score) as '平均分' \nfrom stu where name in(select name from (select name,count(*) as gk \nfrom stu where score<60 group by name having gk>=2)as tmp)\ngroup by name;\n```\n# in\n查询年龄为 20 岁的员工部门\n```sql\nselect * \nfrom department \nwhere did in(SELECT did from employee where age=20);\n```\n\n# exists\n查询是否存在年龄大于 21 岁的员工\n```sql\nselect * from department where EXISTS (SELECT did from employee where age>21);\n```\n\n# any \n查询满足条件的部门\n```sql\nselect * from department where did> any (SELECT did from employee );\n```\n\n# all\n查询满足条件的部门\n```sql\nselect * from department where did> all(SELECT did from employee );\n```\n\n\n# 比较运算符子查询\n查询赵四是哪个部门的\n```sql\nselect * from department where did= all(SELECT did from employee where name='赵四'); \n```\n# 总结：\n**where 型子查询：指把内部查询的结果作为外层查询的比较条件。\nfrom 型子查询：把内层的查询结果当成临时表，供外层 sql 再次查询。\nin 子查询：内层查询语句仅返回一个数据列，这个数据列的值将供外层查询语句进行比较。\nexists 子查询：把外层的查询结果，拿到内层，看内层是否成立，简单来说后面的返回 true, 外层（也就是前面的语句）才会执行，否则不执行。\nany 子查询：只要满足内层子查询中的任意一个比较条件，就返回一个结果作为外层查询条件。\nall 子查询：内层子查询返回的结果需同时满足所有内层查询条件。\n比较运算符子查询：子查询中可以使用的比较运算符如 “>” “<” “= ” “!=”**\n\n","slug":"mysql/01子查询的七种类型","published":1,"updated":"2022-05-30T03:05:17.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1k90001ys2mfq0scsnc","content":"<h1 id=\"where-子查询\"><a href=\"#where-子查询\" class=\"headerlink\" title=\"where 子查询\"></a>where 子查询</h1><p><code>查询单值</code><br>查出每个栏目最新的商品(以good_id为最大为最新商品)：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cat_id,good_id,good_name </span><br><span class=\"line\"><span class=\"keyword\">from</span> goods </span><br><span class=\"line\"><span class=\"keyword\">where</span> good_id </span><br><span class=\"line\"><span class=\"keyword\">in</span></span><br><span class=\"line\">(selct <span class=\"built_in\">max</span>(good_id) </span><br><span class=\"line\">    <span class=\"keyword\">from</span> goods <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cat_id</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"form-型子查询\"><a href=\"#form-型子查询\" class=\"headerlink\" title=\"form 型子查询\"></a>form 型子查询</h1><p><code>多行多列的结果集</code><br>查出每个栏目最新的商品 (以 good_id 为最大为最新商品)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> cat_id,good_id,good_name </span><br><span class=\"line\">      <span class=\"keyword\">from</span> goods <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> cat_id <span class=\"keyword\">asc</span>, good_id <span class=\"keyword\">desc</span>)</span><br><span class=\"line\">      <span class=\"keyword\">as</span> tep <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cat_id;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h1><p>查出挂科 2 门及以上同学的平均分</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1.</span>先求出挂科两门以上及两门的同学</span><br><span class=\"line\"><span class=\"keyword\">select</span> name,<span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> gk </span><br><span class=\"line\"><span class=\"keyword\">from</span> stu <span class=\"keyword\">where</span> score<span class=\"operator\">&lt;</span><span class=\"number\">60</span> </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">having</span> gk<span class=\"operator\">&gt;=</span><span class=\"number\">2</span>;</span><br><span class=\"line\"># <span class=\"number\">2.</span>去除多余的一行</span><br><span class=\"line\"><span class=\"keyword\">select</span> name </span><br><span class=\"line\"><span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> name,<span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> gk <span class=\"keyword\">from</span> stu </span><br><span class=\"line\"><span class=\"keyword\">where</span> score<span class=\"operator\">&lt;</span><span class=\"number\">60</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">having</span> gk<span class=\"operator\">&gt;=</span><span class=\"number\">2</span>)<span class=\"keyword\">as</span> tmp;</span><br><span class=\"line\"># <span class=\"number\">3.</span>最终结果</span><br><span class=\"line\"><span class=\"keyword\">select</span> name ,<span class=\"built_in\">avg</span>(score) <span class=\"keyword\">as</span> <span class=\"string\">&#x27;平均分&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> stu <span class=\"keyword\">where</span> name <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> name <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> name,<span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> gk </span><br><span class=\"line\"><span class=\"keyword\">from</span> stu <span class=\"keyword\">where</span> score<span class=\"operator\">&lt;</span><span class=\"number\">60</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">having</span> gk<span class=\"operator\">&gt;=</span><span class=\"number\">2</span>)<span class=\"keyword\">as</span> tmp)</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name;</span><br></pre></td></tr></table></figure>\n<h1 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h1><p>查询年龄为 20 岁的员工部门</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> department </span><br><span class=\"line\"><span class=\"keyword\">where</span> did <span class=\"keyword\">in</span>(<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> age<span class=\"operator\">=</span><span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"exists\"><a href=\"#exists\" class=\"headerlink\" title=\"exists\"></a>exists</h1><p>查询是否存在年龄大于 21 岁的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> age<span class=\"operator\">&gt;</span><span class=\"number\">21</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h1><p>查询满足条件的部门</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> did<span class=\"operator\">&gt;</span> <span class=\"keyword\">any</span> (<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee );</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a>all</h1><p>查询满足条件的部门</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> did<span class=\"operator\">&gt;</span> <span class=\"keyword\">all</span>(<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee );</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"比较运算符子查询\"><a href=\"#比较运算符子查询\" class=\"headerlink\" title=\"比较运算符子查询\"></a>比较运算符子查询</h1><p>查询赵四是哪个部门的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> did<span class=\"operator\">=</span> <span class=\"keyword\">all</span>(<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> name<span class=\"operator\">=</span><span class=\"string\">&#x27;赵四&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p><strong>where 型子查询：指把内部查询的结果作为外层查询的比较条件。<br>from 型子查询：把内层的查询结果当成临时表，供外层 sql 再次查询。<br>in 子查询：内层查询语句仅返回一个数据列，这个数据列的值将供外层查询语句进行比较。<br>exists 子查询：把外层的查询结果，拿到内层，看内层是否成立，简单来说后面的返回 true, 外层（也就是前面的语句）才会执行，否则不执行。<br>any 子查询：只要满足内层子查询中的任意一个比较条件，就返回一个结果作为外层查询条件。<br>all 子查询：内层子查询返回的结果需同时满足所有内层查询条件。<br>比较运算符子查询：子查询中可以使用的比较运算符如 “&gt;” “&lt;” “= ” “!=”</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"where-子查询\"><a href=\"#where-子查询\" class=\"headerlink\" title=\"where 子查询\"></a>where 子查询</h1><p><code>查询单值</code><br>查出每个栏目最新的商品(以good_id为最大为最新商品)：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cat_id,good_id,good_name </span><br><span class=\"line\"><span class=\"keyword\">from</span> goods </span><br><span class=\"line\"><span class=\"keyword\">where</span> good_id </span><br><span class=\"line\"><span class=\"keyword\">in</span></span><br><span class=\"line\">(selct <span class=\"built_in\">max</span>(good_id) </span><br><span class=\"line\">    <span class=\"keyword\">from</span> goods <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cat_id</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"form-型子查询\"><a href=\"#form-型子查询\" class=\"headerlink\" title=\"form 型子查询\"></a>form 型子查询</h1><p><code>多行多列的结果集</code><br>查出每个栏目最新的商品 (以 good_id 为最大为最新商品)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> cat_id,good_id,good_name </span><br><span class=\"line\">      <span class=\"keyword\">from</span> goods <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> cat_id <span class=\"keyword\">asc</span>, good_id <span class=\"keyword\">desc</span>)</span><br><span class=\"line\">      <span class=\"keyword\">as</span> tep <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cat_id;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h1><p>查出挂科 2 门及以上同学的平均分</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1.</span>先求出挂科两门以上及两门的同学</span><br><span class=\"line\"><span class=\"keyword\">select</span> name,<span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> gk </span><br><span class=\"line\"><span class=\"keyword\">from</span> stu <span class=\"keyword\">where</span> score<span class=\"operator\">&lt;</span><span class=\"number\">60</span> </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">having</span> gk<span class=\"operator\">&gt;=</span><span class=\"number\">2</span>;</span><br><span class=\"line\"># <span class=\"number\">2.</span>去除多余的一行</span><br><span class=\"line\"><span class=\"keyword\">select</span> name </span><br><span class=\"line\"><span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> name,<span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> gk <span class=\"keyword\">from</span> stu </span><br><span class=\"line\"><span class=\"keyword\">where</span> score<span class=\"operator\">&lt;</span><span class=\"number\">60</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">having</span> gk<span class=\"operator\">&gt;=</span><span class=\"number\">2</span>)<span class=\"keyword\">as</span> tmp;</span><br><span class=\"line\"># <span class=\"number\">3.</span>最终结果</span><br><span class=\"line\"><span class=\"keyword\">select</span> name ,<span class=\"built_in\">avg</span>(score) <span class=\"keyword\">as</span> <span class=\"string\">&#x27;平均分&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> stu <span class=\"keyword\">where</span> name <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> name <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> name,<span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> gk </span><br><span class=\"line\"><span class=\"keyword\">from</span> stu <span class=\"keyword\">where</span> score<span class=\"operator\">&lt;</span><span class=\"number\">60</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">having</span> gk<span class=\"operator\">&gt;=</span><span class=\"number\">2</span>)<span class=\"keyword\">as</span> tmp)</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name;</span><br></pre></td></tr></table></figure>\n<h1 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h1><p>查询年龄为 20 岁的员工部门</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> department </span><br><span class=\"line\"><span class=\"keyword\">where</span> did <span class=\"keyword\">in</span>(<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> age<span class=\"operator\">=</span><span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"exists\"><a href=\"#exists\" class=\"headerlink\" title=\"exists\"></a>exists</h1><p>查询是否存在年龄大于 21 岁的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> age<span class=\"operator\">&gt;</span><span class=\"number\">21</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h1><p>查询满足条件的部门</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> did<span class=\"operator\">&gt;</span> <span class=\"keyword\">any</span> (<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee );</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a>all</h1><p>查询满足条件的部门</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> did<span class=\"operator\">&gt;</span> <span class=\"keyword\">all</span>(<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee );</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"比较运算符子查询\"><a href=\"#比较运算符子查询\" class=\"headerlink\" title=\"比较运算符子查询\"></a>比较运算符子查询</h1><p>查询赵四是哪个部门的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> department <span class=\"keyword\">where</span> did<span class=\"operator\">=</span> <span class=\"keyword\">all</span>(<span class=\"keyword\">SELECT</span> did <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> name<span class=\"operator\">=</span><span class=\"string\">&#x27;赵四&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p><strong>where 型子查询：指把内部查询的结果作为外层查询的比较条件。<br>from 型子查询：把内层的查询结果当成临时表，供外层 sql 再次查询。<br>in 子查询：内层查询语句仅返回一个数据列，这个数据列的值将供外层查询语句进行比较。<br>exists 子查询：把外层的查询结果，拿到内层，看内层是否成立，简单来说后面的返回 true, 外层（也就是前面的语句）才会执行，否则不执行。<br>any 子查询：只要满足内层子查询中的任意一个比较条件，就返回一个结果作为外层查询条件。<br>all 子查询：内层子查询返回的结果需同时满足所有内层查询条件。<br>比较运算符子查询：子查询中可以使用的比较运算符如 “&gt;” “&lt;” “= ” “!=”</strong></p>\n"},{"title":"PicGo配置","date":"2022-05-23T15:31:51.000Z","password":"qiuyang","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220523233510.png","_content":"\nSecretId\n`AKIDsXv2sRkmX1EApDKBl4A0Zrsc5KI0RaS3`\n\nSecretKey\n`LPChvsYw4vVoqb5HCqCH5duud4E7j48u`\n\nAPPID\n`1258707945`\n\n存储空间\n`blog-1258707945`\n\n存储区域\n`ap-guangzhou`\n\n存储路径\n`/blog/`","source":"_posts/加密/Picgo配置.md","raw":"---\ntitle: PicGo配置\ndate: 2022-5-23 23:31:51\npassword: qiuyang\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220523233510.png\ntags:\n- 嘿嘿\n---\n\nSecretId\n`AKIDsXv2sRkmX1EApDKBl4A0Zrsc5KI0RaS3`\n\nSecretKey\n`LPChvsYw4vVoqb5HCqCH5duud4E7j48u`\n\nAPPID\n`1258707945`\n\n存储空间\n`blog-1258707945`\n\n存储区域\n`ap-guangzhou`\n\n存储路径\n`/blog/`","slug":"加密/Picgo配置","published":1,"updated":"2022-05-30T03:05:17.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1kf0005ys2m3ycw7wpf","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\r\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"4d9187a0ef26065aecbeb1ed153df80fd505c9fe6fd01b07b0385f301829cffb\">4a76fe182f6b350bda831c22429c2862534a92ee928ad097bc54c478c2ee5fc1a3ba0b92286cb2d5b5cee5bd0f425240e2b8b64dc122003615bfafe72e668e256ce90659384d4b30b02ffdc217e1d2056f7f1094a25bd5765afc6598682ca186c38a826899cdb89097d58935f09debae3490c3746a05280869479992a9b7bc4e46033a34e6ce47930394e93356eed5b33317ac1bba3128743a0859af74d64b2332ed25040ecf02b9d0b43de7572196c8c7ba7d17201cd1723f2b25a4db13b43cac9a0085d7be4cc383b64ca5bdb5d9b1fe8a5587dea4d4a427c4f1b16740d6272ab15e8a9ceb81b689fc4584db30653e1f5a0fed2e726797e48f6d2a7143c1fb1204de54b6e02e9c74b3252282187f63aff42a90f49d6ea7d6be963d39998ff2e70c0295354b48d7501d53b3c6ca2032dafb3973b66fe7d251c5e809b9e825e5dff707e91afbeb967a2b0c03dfb75179815ef332b5a7ef6579358652678d996a</script>\r\n  <div class=\"hbe hbe-content\">\r\n    <div class=\"hbe hbe-input hbe-input-default\">\r\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\r\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\r\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\r\n      </label>\r\n    </div>\r\n  </div>\r\n</div>\r\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<p>SecretId<br><code>AKIDsXv2sRkmX1EApDKBl4A0Zrsc5KI0RaS3</code></p>\n<p>SecretKey<br><code>LPChvsYw4vVoqb5HCqCH5duud4E7j48u</code></p>\n<p>APPID<br><code>1258707945</code></p>\n<p>存储空间<br><code>blog-1258707945</code></p>\n<p>存储区域<br><code>ap-guangzhou</code></p>\n<p>存储路径<br><code>/blog/</code></p>\n","encrypt":true},{"title":"start.spring.io 镜像","date":"2022-05-30T07:44:12.000Z","cover":"/img/7.png","_content":"使用阿里云https://start.aliyun.com","source":"_posts/工具/start.spring.io镜像.md","raw":"---\ntitle: start.spring.io 镜像\ndate: 2022-5-30 15:44:12\ncover: \ntags:\n- 工具\n---\n使用阿里云https://start.aliyun.com","slug":"工具/start.spring.io镜像","published":1,"updated":"2022-05-30T07:44:39.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1kf0006ys2m451q7mm3","content":"<p>使用阿里云<a href=\"https://start.aliyun.com/\">https://start.aliyun.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用阿里云<a href=\"https://start.aliyun.com/\">https://start.aliyun.com</a></p>\n"},{"title":"开发常用网站","password":"qiuyang","date":"2022-06-14T02:41:30.000Z","cover":"/img/7.png","_content":"# 对账\n功能预览\nhttps://fss-sit.inwesure.com/$define/check_reconciliation_template\n拖拽前端\nhttps://wof-sit.inwesure.com/app/45?permissionId=17986\n持续集成\nhttps://wesure.coding.inwesure.com/p/g010/application/#/list/12096?tab=ciConstruct\n服务发现地址\nhttps://blc.inwesure.com/$define/etcdmanager\n线上日志\nhttps://blc.inwesure.com/app/view/12096\n数据库变更\nhttps://blc.oa.com/mysqlChange\n对账任务参考网页\nhttps://fss-sit.inwesure.com/deduct\n前端文档\nhttps://docs.inwesure.com/gitlab/1303944608295768065/up-ui-components/index\n代码仓库\nhttps://wesure.coding.inwesure.com/p/g010/repos\n\n# fap财务核算 (finance accounting platform)\n后端\nhttps://wesure.coding.inwesure.com/p/g010/d/fap/git\n前端\nhttps://wesure.coding.inwesure.com/p/g010/d/fap-web/git\n\n# 采购和财务系统(开发供应商)\n前端\nhttps://wesure.coding.inwesure.com/p/g010/d/cost-web/git\n后端\nhttps://wesure.coding.inwesure.com/p/g010/d/wfp/git\n容器配置\nhttps://blc.inwesure.com/app/view/10836\n网页\nhttps://cost-sit.inwesure.com/cost/$define/cost_pay_list?id=8523&orderNo=GP20220610000005\n\n","source":"_posts/加密/开发常用网址.md","raw":"---\ntitle: 开发常用网站\npassword: qiuyang\ndate: 2022-6-14 10:41:30\ncover: \ntags:\n- 嘿嘿\n---\n# 对账\n功能预览\nhttps://fss-sit.inwesure.com/$define/check_reconciliation_template\n拖拽前端\nhttps://wof-sit.inwesure.com/app/45?permissionId=17986\n持续集成\nhttps://wesure.coding.inwesure.com/p/g010/application/#/list/12096?tab=ciConstruct\n服务发现地址\nhttps://blc.inwesure.com/$define/etcdmanager\n线上日志\nhttps://blc.inwesure.com/app/view/12096\n数据库变更\nhttps://blc.oa.com/mysqlChange\n对账任务参考网页\nhttps://fss-sit.inwesure.com/deduct\n前端文档\nhttps://docs.inwesure.com/gitlab/1303944608295768065/up-ui-components/index\n代码仓库\nhttps://wesure.coding.inwesure.com/p/g010/repos\n\n# fap财务核算 (finance accounting platform)\n后端\nhttps://wesure.coding.inwesure.com/p/g010/d/fap/git\n前端\nhttps://wesure.coding.inwesure.com/p/g010/d/fap-web/git\n\n# 采购和财务系统(开发供应商)\n前端\nhttps://wesure.coding.inwesure.com/p/g010/d/cost-web/git\n后端\nhttps://wesure.coding.inwesure.com/p/g010/d/wfp/git\n容器配置\nhttps://blc.inwesure.com/app/view/10836\n网页\nhttps://cost-sit.inwesure.com/cost/$define/cost_pay_list?id=8523&orderNo=GP20220610000005\n\n","slug":"加密/开发常用网址","published":1,"updated":"2022-06-14T02:41:37.701Z","_id":"cl48ai1kg0007ys2mf1qc12ww","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"6b7019e80db13dd6d679deba7d82f8902ccaaaa1ce9fe767dcd86cec276f811d\">4a76fe182f6b350bda831c22429c28628839164ab4d60bac4d2722759e3d085099997ac5d22a768ee614a48bba07fce3ef37c36cac2a9e6be03f73a4b9c2233de74624530c27d1c7377a26219bdd728bf29754731db35a812b43a319a7f7e608633899398526fbcaa367f1d90dc79e9ff0dfc76f2b6eb73a236105024e4d7ca03cce2aec6fa0346dff6c7838086f6c9a7cf8b7919083da6426c3fb8f73a276e055fb9c825d6e190d348bda21648e3c2d1d5ee27c6a1da3039c99191bd0c7c900680f80d7256c412dc79b52f5e08c9eb55654315d76e9ba25c7e01f4e70dd677afbe8b4ee0dd2a72b022514c869452da13ebaea9d3c3523fd4fac3c57f739180c79aca13a108caeb832f528b779913870211043fc1d1c0e32fd01a2f744c306b6dc353149e486bef539c453e7a11e422a3385f5689a61d26403e68245acc32f302af749d05635664d5513d37747cea42e7599ca82c2622133910949cac57046b567a278da0bd3679cf227f1261813d6872366b00a490a9837aef49d04b5b0cb8d5ca3da6dd09ba661238f3703b0f6bded74ca2d10c46e0a2a36c4d40b7cc80a1153be18813fbda13b6f480719eed625538ec2a8e962ce3d1757af3d70f5a7c7512762b5694f056e0b6a9ad0ab8f0fd5ad14831f1007f19f6ce4a260ee17cc41dc7f0d7c94e2159a5b149757974e4b796a667b4d125e5b38c1d94b8b42979d05a01a1a16fe9a60f487fc2b9d2c36726399fdcc6b25238c58a91f1d1139d9385cb96bba3862b04d4d4fe586aa29ef73c124f322352d45b970881f212a80689a54e3ebaa0a0c45cb7859596936520213ae3931165ee49cce4602843fa7469a68121cd85b40847b873adbc0b2811fd2dbe8cb9ede7f610ccb000842a36a400ae1efa9b5771fe7b81a59127a4afd2d1ceff9c402b68b25f6e42796cd43d916658a6de5ba9b27748f9eeff6a78146a6de9005629fe6a6d3084e07c39b977de658a88368b151f88edbeac642e101fc3acfb82f4f3fcb823cb003ca36249da1669f6c0dbe193a603883ede075cbfd0dd9e715cff739e70e2d8ba521ec633192bd1cb935fcfb7b297aef0cd47eedaeec9440d2c8d1c70a4b13438b5c92fa1a13922a6cfe05b540998330277958632718ee6d4a85205da6795e1643238b16367514d6f7c223dbc82be545661eb4dc9455568407a3c6c7e9caecd2756dc034087ac48c3d90afab650c8e4004fae0483f1f2f78fc1eb3ab44547348ea63f164d651ffdff7e52f682bbef35084b2b4f2be3cc8b9c85263cfa9b549d14768cfcd6cb535b6a78bb5ea65365ab0b0686ca03568444ee6131177b9f164fc3ae3e173c98537c81d4f26b96d8d5cf3ad5efce651d31ffcf23d620e6f49eb05c373a066fc87dc49f7bbc5c71642aebfba59a8bbb7534d332f2c87b07309a14a0bc2051553cfd029e347758c833f12f94ddbfdf87cd614cf8e6b25ec1f864a77ea031e13a1bb1633259751e4aa0d361042dfa3d2e597c52882e35e88d388105bb3b2e064165c09e38c86c9e21af962fb788e1850e0776fca8f8525ec5a2c887a439d0995f432ac442c90f921465d212c72424fcf99685f23c47df32883cf19c2c082d68e33b7dd65da85031df183bf6901c10cb17d3c49508600f3f87537215333572e48d42ce758a45d516d135af40bea55a99722af1de381aea07cd488c4ec4260e0d1181efe782fe15e6455047978f193c60fc0337ac6e40240c509520bda41950163a7bfe5808e5bbebe253953a4be2ea4fbfa9d198793691ab5684533b17fd5db1c8c587d9e597658fd5472692f6d9ddc375827b34c67be1f5d39cc7951610d5a0883fe55f36de61ed9bad08bd7e4a577a71f40e9a38c3a8fffd93cc44ab2e0f1a31f681f89a601441c20cd160dc2305c79ced47c558a1fe013ce491a5bdedcd0babbb7a616e5127ad146cb59047db87d1eb45e5279d341d2d59dd0e922a2763aae3dbc9d2973c6454ab060cb662fc808828ec24c1e1a4c55c90635cbad7f62aac092c8a022ed4f4f98325484f280dd607772e373951356e92fdc9c934744c6a71c89c298245f045b2f384e2e203e275476840e2f6688d63c4340e0e972854d3735db1615569accc597c759a8c21c3a9e111197d78b2f243320839b424725fe36dda9b1c13a1049e2a24298c0748cf574c5acaf428a1db4c3391b31caba352de5e67cbf79c2f525f997112054670b6c5a5d576dbcbf706a026168f0a8983dfa76e0c8d8a6a4fcb4042092a65ae62cd738762d48e5b3e4e305c2b88a5a8c60ac3baa36aa59af4596b740ade6e4a15640061c3e319c2705fcf8ce33b2a487693af4585b7298d8c41547bac90cf0c8817b4f5206254d053fdf7de49cd89f909862d9682566e040d2cb482c4730688df7a4884d44f051e67bb488fd9dfa7b7be54f06aad3de6cbd4ff10332b30685fda3e8b38c8a2b2ba44f2ede4f80fbd38bcfd49cc29eb381b1b325e1dca0882d60c8e0852a992999454a600c43879462109de7e52e38cca53e1a73a8ac82d51f06fc29af5e14ab824087edca2de9c07d49cc6f70ae74612d57b3519f630a76f1f97454f5333a0fb56176d7ccdcf3193b3584718304abfa2aee384b8f5696a226acfa5a98f44c5c39fa2818eb95105714c0ed1ca6e4b8e73a28b5535f323541dc2891a12919b263f194834f0c4b7ceec6c26a53358d612be269529647e4a98d69617b782f9581aa819201282257752c31aa0bef6dfee7adb8ab9a6020d9b9e3fe7c009f0ecb3ebc6800ed8e4ee6716d359a166da6521f64ef9db4c7680749a07b19b9b49e1e1931e7286fde627ee2a1a60c354daabce12dfc8f7c66780b70f0829577caf007151f28812c94eb0179a21536862b0084a694e1bd4a2235cbcc9c16e48744e3580109507273aef9fd67515b3f2b6d9cd0596b8a3d10a7728d018a7af6866aa1a422045ae17d8a6bc8777e43fb04d185ecc40cb474ceb5702e05e926aa371a27be7a543af3ee058c02d55bc58db959dc4d7242622ad656fa3e49bac24f9dd6cdb8dc1beed8a4f71f9ed05288b3e965f6954b3e02893dd2f82f1735fa27dbaa6bb64149c28f29576f14379f3b43ed0a7759094d995b91bf41b57dd97e20273f3afd926b3972e5420afb36bb114eaa87810807e1f17ecb3e37fe0807aa2518adb28349dfb2bbf1c3a43a58bdbbfb3e475fa50ed14dc08bf384963d2f2bd26a70c65440125821c043854e96ae5f1e1c2292084010bacb34df16bd2124e09d6589f1d5e53e8fc6e39d452e41fd3581cb8b1cd3b8bfa266461abda3846658e47b3e4236c21ece430794ef3a55ac16e8f4c6eeb0f164674d0bfec561ed038dc1009df73ebce527860a956dccb447e363dde479dd99d4e105e0b997844bd1803df91add821fc36c63ede74be229660bf5f86c1b31ba470d46631cda1c2e04bcefa54e3a1d32a691535f4cf3a4412fb605e48677342f89bbf39eb0caffe3ab536af1c5c14ed3e55b6a7a0cb8228e1d3789813b0bf66d88826939ec3808073a8760ecb774e36ab301afa53245a7f5ab3d2719b53893fcb75584810c8ba3c104af19dba4f316b338dfd5cfc81feede715cc2d76a638970d453c98d089d3d769e3c877729b0e68cd696a968a1b28146e35c299ef43b25216cb0217e2b7a341c54ec583307b35245f1599ff049564b855f2fe75e975074fa5ccf0b60ad2042f0b64d52438b85c9886532c74f98eab4a4b2bcc4105ddb8aa92d4b4bd838bc9946e6cba641fa2156b3cf66ef2c280da5d1ff049511f33da9dbf68553f2de4c910ad11b58d2ec7c67ff167033c4cfa9322a63e1e568c2b917df0bb92525dba3</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h1 id=\"对账\"><a href=\"#对账\" class=\"headerlink\" title=\"对账\"></a>对账</h1><p>功能预览<br><a href=\"https://fss-sit.inwesure.com/$define/check_reconciliation_template\">https://fss-sit.inwesure.com/$define/check_reconciliation_template</a><br>拖拽前端<br><a href=\"https://wof-sit.inwesure.com/app/45?permissionId=17986\">https://wof-sit.inwesure.com/app/45?permissionId=17986</a><br>持续集成<br><a href=\"https://wesure.coding.inwesure.com/p/g010/application/#/list/12096?tab=ciConstruct\">https://wesure.coding.inwesure.com/p/g010/application/#/list/12096?tab=ciConstruct</a><br>服务发现地址<br><a href=\"https://blc.inwesure.com/$define/etcdmanager\">https://blc.inwesure.com/$define/etcdmanager</a><br>线上日志<br><a href=\"https://blc.inwesure.com/app/view/12096\">https://blc.inwesure.com/app/view/12096</a><br>数据库变更<br><a href=\"https://blc.oa.com/mysqlChange\">https://blc.oa.com/mysqlChange</a><br>对账任务参考网页<br><a href=\"https://fss-sit.inwesure.com/deduct\">https://fss-sit.inwesure.com/deduct</a><br>前端文档<br><a href=\"https://docs.inwesure.com/gitlab/1303944608295768065/up-ui-components/index\">https://docs.inwesure.com/gitlab/1303944608295768065/up-ui-components/index</a><br>代码仓库<br><a href=\"https://wesure.coding.inwesure.com/p/g010/repos\">https://wesure.coding.inwesure.com/p/g010/repos</a></p>\n<h1 id=\"fap财务核算-finance-accounting-platform\"><a href=\"#fap财务核算-finance-accounting-platform\" class=\"headerlink\" title=\"fap财务核算 (finance accounting platform)\"></a>fap财务核算 (finance accounting platform)</h1><p>后端<br><a href=\"https://wesure.coding.inwesure.com/p/g010/d/fap/git\">https://wesure.coding.inwesure.com/p/g010/d/fap/git</a><br>前端<br><a href=\"https://wesure.coding.inwesure.com/p/g010/d/fap-web/git\">https://wesure.coding.inwesure.com/p/g010/d/fap-web/git</a></p>\n<h1 id=\"采购和财务系统-开发供应商\"><a href=\"#采购和财务系统-开发供应商\" class=\"headerlink\" title=\"采购和财务系统(开发供应商)\"></a>采购和财务系统(开发供应商)</h1><p>前端<br><a href=\"https://wesure.coding.inwesure.com/p/g010/d/cost-web/git\">https://wesure.coding.inwesure.com/p/g010/d/cost-web/git</a><br>后端<br><a href=\"https://wesure.coding.inwesure.com/p/g010/d/wfp/git\">https://wesure.coding.inwesure.com/p/g010/d/wfp/git</a><br>容器配置<br><a href=\"https://blc.inwesure.com/app/view/10836\">https://blc.inwesure.com/app/view/10836</a><br>网页<br><a href=\"https://cost-sit.inwesure.com/cost/$define/cost_pay_list?id=8523&amp;orderNo=GP20220610000005\">https://cost-sit.inwesure.com/cost/$define/cost_pay_list?id=8523&amp;orderNo=GP20220610000005</a></p>\n","encrypt":true},{"title":"Apollo配置中心","date":"2020-05-24T15:35:54.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220524233622.png","_content":"# 主流配置中心产品\n1. Disconf\n   2014年7月百度开源的配置管理中心，专注于各种「分布式系统配置管理」的「通用组件」和「通\n   用平台」, 提供统一的「配置管理服务」。目前已经不再维护更新。\n   https://github.com/knightliao/disconf\n2. Spring Cloud Config\n   2014年9月开源，Spring Cloud 生态组件，可以和Spring Cloud体系无缝整合。\n   https://github.com/spring-cloud/spring-cloud-config\n3. Apollo\n   2016年5月，携程开源的配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修\n   改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场\n   景。\n   https://github.com/ctripcorp/apollo\n4. Nacos\n   2018年6月，阿里开源的配置中心，也可以做DNS和RPC的服务发现。\n   https://github.com/alibaba/nacos\n# 产品对比\nApollo集成了数据库+Eureka+版本控制+权限管理+Http Long Polling ... ...\n\n总的来说，Apollo和Nacos相对于Spring Cloud Config的生态支持更广，在配置管理流程上做的更好，\n其成熟度和企业级特性要强于Spring Cloud Config。Apollo相对于Nacos在配置管理做的更加全面，\nNacos则使用起来相对比较简洁，在对性能要求比较高的大规模场景更适合。但对于一个开源项目的选\n型，项目上的人力投入（迭代进度、文档的完整性）、社区的活跃度（issue的数量和解决速度、\nContributor数量、社群的交流频次等），这些因素也比较关键。Apollo目前在国内开发者社区比较\n热，在Github上有超过1w5颗星，在国内众多互联网公司有落地案例，可以说Apollo是目前配置中心产\n品领域Number1的产品，所以从目前来看Apollo是最合适的配置中心选型。\n\n\n\n","source":"_posts/组件/Apollo配置中心.md","raw":"---\ntitle: Apollo配置中心\ndate: 2020-5-24 23:35:54\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220524233622.png\ntags:\n- 组件\n---\n# 主流配置中心产品\n1. Disconf\n   2014年7月百度开源的配置管理中心，专注于各种「分布式系统配置管理」的「通用组件」和「通\n   用平台」, 提供统一的「配置管理服务」。目前已经不再维护更新。\n   https://github.com/knightliao/disconf\n2. Spring Cloud Config\n   2014年9月开源，Spring Cloud 生态组件，可以和Spring Cloud体系无缝整合。\n   https://github.com/spring-cloud/spring-cloud-config\n3. Apollo\n   2016年5月，携程开源的配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修\n   改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场\n   景。\n   https://github.com/ctripcorp/apollo\n4. Nacos\n   2018年6月，阿里开源的配置中心，也可以做DNS和RPC的服务发现。\n   https://github.com/alibaba/nacos\n# 产品对比\nApollo集成了数据库+Eureka+版本控制+权限管理+Http Long Polling ... ...\n\n总的来说，Apollo和Nacos相对于Spring Cloud Config的生态支持更广，在配置管理流程上做的更好，\n其成熟度和企业级特性要强于Spring Cloud Config。Apollo相对于Nacos在配置管理做的更加全面，\nNacos则使用起来相对比较简洁，在对性能要求比较高的大规模场景更适合。但对于一个开源项目的选\n型，项目上的人力投入（迭代进度、文档的完整性）、社区的活跃度（issue的数量和解决速度、\nContributor数量、社群的交流频次等），这些因素也比较关键。Apollo目前在国内开发者社区比较\n热，在Github上有超过1w5颗星，在国内众多互联网公司有落地案例，可以说Apollo是目前配置中心产\n品领域Number1的产品，所以从目前来看Apollo是最合适的配置中心选型。\n\n\n\n","slug":"组件/Apollo配置中心","published":1,"updated":"2022-06-10T10:11:19.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1kj000fys2m7rli0uim","content":"<h1 id=\"主流配置中心产品\"><a href=\"#主流配置中心产品\" class=\"headerlink\" title=\"主流配置中心产品\"></a>主流配置中心产品</h1><ol>\n<li>Disconf<br>2014年7月百度开源的配置管理中心，专注于各种「分布式系统配置管理」的「通用组件」和「通<br>用平台」, 提供统一的「配置管理服务」。目前已经不再维护更新。<br><a href=\"https://github.com/knightliao/disconf\">https://github.com/knightliao/disconf</a></li>\n<li>Spring Cloud Config<br>2014年9月开源，Spring Cloud 生态组件，可以和Spring Cloud体系无缝整合。<br><a href=\"https://github.com/spring-cloud/spring-cloud-config\">https://github.com/spring-cloud/spring-cloud-config</a></li>\n<li>Apollo<br>2016年5月，携程开源的配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修<br>改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场<br>景。<br><a href=\"https://github.com/ctripcorp/apollo\">https://github.com/ctripcorp/apollo</a></li>\n<li>Nacos<br>2018年6月，阿里开源的配置中心，也可以做DNS和RPC的服务发现。<br><a href=\"https://github.com/alibaba/nacos\">https://github.com/alibaba/nacos</a><h1 id=\"产品对比\"><a href=\"#产品对比\" class=\"headerlink\" title=\"产品对比\"></a>产品对比</h1>Apollo集成了数据库+Eureka+版本控制+权限管理+Http Long Polling … …</li>\n</ol>\n<p>总的来说，Apollo和Nacos相对于Spring Cloud Config的生态支持更广，在配置管理流程上做的更好，<br>其成熟度和企业级特性要强于Spring Cloud Config。Apollo相对于Nacos在配置管理做的更加全面，<br>Nacos则使用起来相对比较简洁，在对性能要求比较高的大规模场景更适合。但对于一个开源项目的选<br>型，项目上的人力投入（迭代进度、文档的完整性）、社区的活跃度（issue的数量和解决速度、<br>Contributor数量、社群的交流频次等），这些因素也比较关键。Apollo目前在国内开发者社区比较<br>热，在Github上有超过1w5颗星，在国内众多互联网公司有落地案例，可以说Apollo是目前配置中心产<br>品领域Number1的产品，所以从目前来看Apollo是最合适的配置中心选型。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"主流配置中心产品\"><a href=\"#主流配置中心产品\" class=\"headerlink\" title=\"主流配置中心产品\"></a>主流配置中心产品</h1><ol>\n<li>Disconf<br>2014年7月百度开源的配置管理中心，专注于各种「分布式系统配置管理」的「通用组件」和「通<br>用平台」, 提供统一的「配置管理服务」。目前已经不再维护更新。<br><a href=\"https://github.com/knightliao/disconf\">https://github.com/knightliao/disconf</a></li>\n<li>Spring Cloud Config<br>2014年9月开源，Spring Cloud 生态组件，可以和Spring Cloud体系无缝整合。<br><a href=\"https://github.com/spring-cloud/spring-cloud-config\">https://github.com/spring-cloud/spring-cloud-config</a></li>\n<li>Apollo<br>2016年5月，携程开源的配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修<br>改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场<br>景。<br><a href=\"https://github.com/ctripcorp/apollo\">https://github.com/ctripcorp/apollo</a></li>\n<li>Nacos<br>2018年6月，阿里开源的配置中心，也可以做DNS和RPC的服务发现。<br><a href=\"https://github.com/alibaba/nacos\">https://github.com/alibaba/nacos</a><h1 id=\"产品对比\"><a href=\"#产品对比\" class=\"headerlink\" title=\"产品对比\"></a>产品对比</h1>Apollo集成了数据库+Eureka+版本控制+权限管理+Http Long Polling … …</li>\n</ol>\n<p>总的来说，Apollo和Nacos相对于Spring Cloud Config的生态支持更广，在配置管理流程上做的更好，<br>其成熟度和企业级特性要强于Spring Cloud Config。Apollo相对于Nacos在配置管理做的更加全面，<br>Nacos则使用起来相对比较简洁，在对性能要求比较高的大规模场景更适合。但对于一个开源项目的选<br>型，项目上的人力投入（迭代进度、文档的完整性）、社区的活跃度（issue的数量和解决速度、<br>Contributor数量、社群的交流频次等），这些因素也比较关键。Apollo目前在国内开发者社区比较<br>热，在Github上有超过1w5颗星，在国内众多互联网公司有落地案例，可以说Apollo是目前配置中心产<br>品领域Number1的产品，所以从目前来看Apollo是最合适的配置中心选型。</p>\n"},{"title":"CompletableFuture常用记录","date":"2020-05-26T16:52:44.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527005307.png","_content":"\n# 工具类\n```java\npublic class SmallTool {\n\n    public static void  sleepMillis(Integer millis){\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void printTimeAndThread(String  tag){\n        String result = new StringJoiner(\"\\t|\\t\")\n                .add(String.valueOf(System.currentTimeMillis()))\n                .add(String.valueOf(Thread.currentThread().getId()))\n                .add(Thread.currentThread().getName())\n                .add(tag)\n                .toString();\n        System.out.println(result);\n    }\n}\n\n```\n# 例子一\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我进了饭堂\");\n        SmallTool.printTimeAndThread(\"我点了滑鸡饭\");\n        // supplyAsync是java的函数式编程接口，叫提供者者，\n        // 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"厨师炒菜\");\n            SmallTool.sleepMillis(200);\n            SmallTool.printTimeAndThread(\"厨师打饭\");\n            SmallTool.sleepMillis(100);\n            return \"滑鸡 + 饭 好了\";\n        });\n        SmallTool.printTimeAndThread(\"我在打王者\");\n        // join等待任务执行结束，返回任务结果\n        SmallTool.printTimeAndThread(String.format(\"%s,小白开吃\",stringCompletableFuture.join()));\n    }\n\n```\n输出结果\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527011927.png)\n# 例子二\n一般来说，打饭这件事情是服务员干的\n```java\n\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我进了饭堂\");\n        SmallTool.printTimeAndThread(\"我点了滑鸡饭\");\n        // supplyAsync是java的函数式编程接口，叫提供者者，\n        // 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"厨师炒菜\");\n            SmallTool.sleepMillis(200);\n            return \"滑鸡\";\n            // thenCompose要求我们传入一个Function接口，传入参数T，经过转换后返回R\n            // 将前面任务的结果返回给下一个任务\n        }).thenCompose(s -> CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"服务员打饭\");\n            SmallTool.sleepMillis(100);\n            return s+\"米饭\";\n        }));\n        SmallTool.printTimeAndThread(\"我在打王者\");\n        // join等待任务执行结束，返回任务结果\n        SmallTool.printTimeAndThread(String.format(\"%s,小白开吃\",stringCompletableFuture.join()));\n    }\n```\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527012705.png)\n# 例子三\n服务员还没做饭，要求厨师炒菜的时候，服务员同时蒸饭,要求炒菜和蒸饭同时返回，才能执行炒菜\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我进了饭堂\");\n        SmallTool.printTimeAndThread(\"我点了滑鸡饭\");\n        // supplyAsync是java的函数式编程接口，叫提供者者，\n        // 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"厨师炒菜\");\n            SmallTool.sleepMillis(200);\n            return \"滑鸡\";\n        }).thenCombine(CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"服务员蒸饭\");\n            SmallTool.sleepMillis(300);\n            return \"米饭\";\n        }),(s, s2) -> {\n            SmallTool.printTimeAndThread(\"服务员打饭\");\n            SmallTool.sleepMillis(100);\n            return String.format(\"%s+%s 好了\",s,s2);\n        });\n        SmallTool.printTimeAndThread(\"我在打王者\");\n        // join等待任务执行结束，返回任务结果\n        SmallTool.printTimeAndThread(String.format(\"%s,小白开吃\",stringCompletableFuture.join()));\n    }\n}\n```\n# 三个例子的基本模型\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527013220.png)\n\n# 例子四\n**我吃完了，准备结账，要求开发票，服务员收款后，要求另一个人开发票，开发票的同时，接到电话，拿到发票，回家养猪**\n使用thenCompose也能执行\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我吃完了\");\n        SmallTool.printTimeAndThread(\"结账，并且要求开发票\");\n\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"服务员收款 500元\");\n            SmallTool.sleepMillis(100);\n            return \"500\";\n        }).thenApplyAsync(s -> {\n            SmallTool.printTimeAndThread(String.format(\"服务员开发票中 面额 %s元\", s));\n            SmallTool.sleepMillis(200);\n            return String.format(\"%s元发票\", s);\n        });\n        SmallTool.printTimeAndThread(\"我接到电话\");\n        SmallTool.printTimeAndThread(String.format(\"我拿到%s,准备回家\",stringCompletableFuture.join()));\n    }\n\n```\n# 例子五\n我等车，等100路或200路公交都能到家，谁先来上谁\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"来到公交站\");\n        SmallTool.printTimeAndThread(\"等待100或200路公交\");\n\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待100路公交车\");\n            SmallTool.sleepMillis(100);\n            return \"100路来了\";\n        }).applyToEither(CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待200路公交\");\n            SmallTool.sleepMillis(200);\n            return \"200路来了\";\n        }),s -> s);\n        SmallTool.printTimeAndThread(String.format(\"%s,我上车了\",stringCompletableFuture.join()));\n    }\n```\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527015316.png)\n# 例子六\n**我坐在车上,司机撞树上了，只能打车回家了**\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"来到公交站\");\n        SmallTool.printTimeAndThread(\"等待100或200路公交\");\n\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待100路公交车\");\n            SmallTool.sleepMillis(100);\n            return \"100路来了\";\n        }).applyToEither(CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待200路公交\");\n            SmallTool.sleepMillis(200);\n            return \"200路来了\";\n        }),s -> {\n            SmallTool.printTimeAndThread(s);\n            if (s.startsWith(\"100\")){\n                throw new RuntimeException(\"撞树上了\");\n            }\n            return s;\n        }).exceptionally(throwable -> {\n            SmallTool.printTimeAndThread(throwable.getMessage());\n            SmallTool.printTimeAndThread(\"打出租车回家\");\n            return \"出租车到了\";\n        });\n        SmallTool.printTimeAndThread(String.format(\"%s,我上车了\",stringCompletableFuture.join()));\n    }\n\n```\n# 例子七\n**如果100路没来之前，就撞树上了，那么应该坐上200路公交**","source":"_posts/组件/CompletableFuture.md","raw":"---\ntitle: CompletableFuture常用记录\ndate: 2020-5-27 00:52:44\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527005307.png\ntags:\n- 组件\n---\n\n# 工具类\n```java\npublic class SmallTool {\n\n    public static void  sleepMillis(Integer millis){\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void printTimeAndThread(String  tag){\n        String result = new StringJoiner(\"\\t|\\t\")\n                .add(String.valueOf(System.currentTimeMillis()))\n                .add(String.valueOf(Thread.currentThread().getId()))\n                .add(Thread.currentThread().getName())\n                .add(tag)\n                .toString();\n        System.out.println(result);\n    }\n}\n\n```\n# 例子一\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我进了饭堂\");\n        SmallTool.printTimeAndThread(\"我点了滑鸡饭\");\n        // supplyAsync是java的函数式编程接口，叫提供者者，\n        // 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"厨师炒菜\");\n            SmallTool.sleepMillis(200);\n            SmallTool.printTimeAndThread(\"厨师打饭\");\n            SmallTool.sleepMillis(100);\n            return \"滑鸡 + 饭 好了\";\n        });\n        SmallTool.printTimeAndThread(\"我在打王者\");\n        // join等待任务执行结束，返回任务结果\n        SmallTool.printTimeAndThread(String.format(\"%s,小白开吃\",stringCompletableFuture.join()));\n    }\n\n```\n输出结果\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527011927.png)\n# 例子二\n一般来说，打饭这件事情是服务员干的\n```java\n\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我进了饭堂\");\n        SmallTool.printTimeAndThread(\"我点了滑鸡饭\");\n        // supplyAsync是java的函数式编程接口，叫提供者者，\n        // 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"厨师炒菜\");\n            SmallTool.sleepMillis(200);\n            return \"滑鸡\";\n            // thenCompose要求我们传入一个Function接口，传入参数T，经过转换后返回R\n            // 将前面任务的结果返回给下一个任务\n        }).thenCompose(s -> CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"服务员打饭\");\n            SmallTool.sleepMillis(100);\n            return s+\"米饭\";\n        }));\n        SmallTool.printTimeAndThread(\"我在打王者\");\n        // join等待任务执行结束，返回任务结果\n        SmallTool.printTimeAndThread(String.format(\"%s,小白开吃\",stringCompletableFuture.join()));\n    }\n```\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527012705.png)\n# 例子三\n服务员还没做饭，要求厨师炒菜的时候，服务员同时蒸饭,要求炒菜和蒸饭同时返回，才能执行炒菜\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我进了饭堂\");\n        SmallTool.printTimeAndThread(\"我点了滑鸡饭\");\n        // supplyAsync是java的函数式编程接口，叫提供者者，\n        // 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"厨师炒菜\");\n            SmallTool.sleepMillis(200);\n            return \"滑鸡\";\n        }).thenCombine(CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"服务员蒸饭\");\n            SmallTool.sleepMillis(300);\n            return \"米饭\";\n        }),(s, s2) -> {\n            SmallTool.printTimeAndThread(\"服务员打饭\");\n            SmallTool.sleepMillis(100);\n            return String.format(\"%s+%s 好了\",s,s2);\n        });\n        SmallTool.printTimeAndThread(\"我在打王者\");\n        // join等待任务执行结束，返回任务结果\n        SmallTool.printTimeAndThread(String.format(\"%s,小白开吃\",stringCompletableFuture.join()));\n    }\n}\n```\n# 三个例子的基本模型\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527013220.png)\n\n# 例子四\n**我吃完了，准备结账，要求开发票，服务员收款后，要求另一个人开发票，开发票的同时，接到电话，拿到发票，回家养猪**\n使用thenCompose也能执行\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"我吃完了\");\n        SmallTool.printTimeAndThread(\"结账，并且要求开发票\");\n\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"服务员收款 500元\");\n            SmallTool.sleepMillis(100);\n            return \"500\";\n        }).thenApplyAsync(s -> {\n            SmallTool.printTimeAndThread(String.format(\"服务员开发票中 面额 %s元\", s));\n            SmallTool.sleepMillis(200);\n            return String.format(\"%s元发票\", s);\n        });\n        SmallTool.printTimeAndThread(\"我接到电话\");\n        SmallTool.printTimeAndThread(String.format(\"我拿到%s,准备回家\",stringCompletableFuture.join()));\n    }\n\n```\n# 例子五\n我等车，等100路或200路公交都能到家，谁先来上谁\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"来到公交站\");\n        SmallTool.printTimeAndThread(\"等待100或200路公交\");\n\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待100路公交车\");\n            SmallTool.sleepMillis(100);\n            return \"100路来了\";\n        }).applyToEither(CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待200路公交\");\n            SmallTool.sleepMillis(200);\n            return \"200路来了\";\n        }),s -> s);\n        SmallTool.printTimeAndThread(String.format(\"%s,我上车了\",stringCompletableFuture.join()));\n    }\n```\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527015316.png)\n# 例子六\n**我坐在车上,司机撞树上了，只能打车回家了**\n```java\n    public static void main(String[] args) {\n        SmallTool.printTimeAndThread(\"来到公交站\");\n        SmallTool.printTimeAndThread(\"等待100或200路公交\");\n\n        CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待100路公交车\");\n            SmallTool.sleepMillis(100);\n            return \"100路来了\";\n        }).applyToEither(CompletableFuture.supplyAsync(() -> {\n            SmallTool.printTimeAndThread(\"等待200路公交\");\n            SmallTool.sleepMillis(200);\n            return \"200路来了\";\n        }),s -> {\n            SmallTool.printTimeAndThread(s);\n            if (s.startsWith(\"100\")){\n                throw new RuntimeException(\"撞树上了\");\n            }\n            return s;\n        }).exceptionally(throwable -> {\n            SmallTool.printTimeAndThread(throwable.getMessage());\n            SmallTool.printTimeAndThread(\"打出租车回家\");\n            return \"出租车到了\";\n        });\n        SmallTool.printTimeAndThread(String.format(\"%s,我上车了\",stringCompletableFuture.join()));\n    }\n\n```\n# 例子七\n**如果100路没来之前，就撞树上了，那么应该坐上200路公交**","slug":"组件/CompletableFuture","published":1,"updated":"2022-06-10T10:11:19.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1kk000hys2mf3w7h1ul","content":"<h1 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallTool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">sleepMillis</span><span class=\"params\">(Integer millis)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(millis);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printTimeAndThread</span><span class=\"params\">(String  tag)</span></span>&#123;</span><br><span class=\"line\">        String result = <span class=\"keyword\">new</span> StringJoiner(<span class=\"string\">&quot;\\t|\\t&quot;</span>)</span><br><span class=\"line\">                .add(String.valueOf(System.currentTimeMillis()))</span><br><span class=\"line\">                .add(String.valueOf(Thread.currentThread().getId()))</span><br><span class=\"line\">                .add(Thread.currentThread().getName())</span><br><span class=\"line\">                .add(tag)</span><br><span class=\"line\">                .toString();</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我进了饭堂&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师炒菜&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师打饭&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;滑鸡 + 饭 好了&quot;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我在打王者&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// join等待任务执行结束，返回任务结果</span></span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>输出结果<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527011927.png\"></p>\n<h1 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h1><p>一般来说，打饭这件事情是服务员干的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我进了饭堂&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师炒菜&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;滑鸡&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// thenCompose要求我们传入一个Function接口，传入参数T，经过转换后返回R</span></span><br><span class=\"line\">        <span class=\"comment\">// 将前面任务的结果返回给下一个任务</span></span><br><span class=\"line\">    &#125;).thenCompose(s -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员打饭&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s+<span class=\"string\">&quot;米饭&quot;</span>;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我在打王者&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// join等待任务执行结束，返回任务结果</span></span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527012705.png\"></p>\n<h1 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h1><p>服务员还没做饭，要求厨师炒菜的时候，服务员同时蒸饭,要求炒菜和蒸饭同时返回，才能执行炒菜</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;我进了饭堂&quot;</span>);</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class=\"line\">        <span class=\"comment\">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class=\"line\">        CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">            SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师炒菜&quot;</span>);</span><br><span class=\"line\">            SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;滑鸡&quot;</span>;</span><br><span class=\"line\">        &#125;).thenCombine(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">            SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员蒸饭&quot;</span>);</span><br><span class=\"line\">            SmallTool.sleepMillis(<span class=\"number\">300</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;米饭&quot;</span>;</span><br><span class=\"line\">        &#125;),(s, s2) -&gt; &#123;</span><br><span class=\"line\">            SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员打饭&quot;</span>);</span><br><span class=\"line\">            SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s+%s 好了&quot;</span>,s,s2);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;我在打王者&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// join等待任务执行结束，返回任务结果</span></span><br><span class=\"line\">        SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三个例子的基本模型\"><a href=\"#三个例子的基本模型\" class=\"headerlink\" title=\"三个例子的基本模型\"></a>三个例子的基本模型</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527013220.png\"></p>\n<h1 id=\"例子四\"><a href=\"#例子四\" class=\"headerlink\" title=\"例子四\"></a>例子四</h1><p><strong>我吃完了，准备结账，要求开发票，服务员收款后，要求另一个人开发票，开发票的同时，接到电话，拿到发票，回家养猪</strong><br>使用thenCompose也能执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我吃完了&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;结账，并且要求开发票&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员收款 500元&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;500&quot;</span>;</span><br><span class=\"line\">    &#125;).thenApplyAsync(s -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;服务员开发票中 面额 %s元&quot;</span>, s));</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s元发票&quot;</span>, s);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我接到电话&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;我拿到%s,准备回家&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"例子五\"><a href=\"#例子五\" class=\"headerlink\" title=\"例子五\"></a>例子五</h1><p>我等车，等100路或200路公交都能到家，谁先来上谁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;来到公交站&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100或200路公交&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100路公交车&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;100路来了&quot;</span>;</span><br><span class=\"line\">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待200路公交&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;200路来了&quot;</span>;</span><br><span class=\"line\">    &#125;),s -&gt; s);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527015316.png\"></p>\n<h1 id=\"例子六\"><a href=\"#例子六\" class=\"headerlink\" title=\"例子六\"></a>例子六</h1><p><strong>我坐在车上,司机撞树上了，只能打车回家了</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;来到公交站&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100或200路公交&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100路公交车&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;100路来了&quot;</span>;</span><br><span class=\"line\">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待200路公交&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;200路来了&quot;</span>;</span><br><span class=\"line\">    &#125;),s -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.startsWith(<span class=\"string\">&quot;100&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;撞树上了&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(throwable.getMessage());</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;打出租车回家&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;出租车到了&quot;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"例子七\"><a href=\"#例子七\" class=\"headerlink\" title=\"例子七\"></a>例子七</h1><p><strong>如果100路没来之前，就撞树上了，那么应该坐上200路公交</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallTool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">sleepMillis</span><span class=\"params\">(Integer millis)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(millis);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printTimeAndThread</span><span class=\"params\">(String  tag)</span></span>&#123;</span><br><span class=\"line\">        String result = <span class=\"keyword\">new</span> StringJoiner(<span class=\"string\">&quot;\\t|\\t&quot;</span>)</span><br><span class=\"line\">                .add(String.valueOf(System.currentTimeMillis()))</span><br><span class=\"line\">                .add(String.valueOf(Thread.currentThread().getId()))</span><br><span class=\"line\">                .add(Thread.currentThread().getName())</span><br><span class=\"line\">                .add(tag)</span><br><span class=\"line\">                .toString();</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我进了饭堂&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师炒菜&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师打饭&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;滑鸡 + 饭 好了&quot;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我在打王者&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// join等待任务执行结束，返回任务结果</span></span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>输出结果<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527011927.png\"></p>\n<h1 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h1><p>一般来说，打饭这件事情是服务员干的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我进了饭堂&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师炒菜&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;滑鸡&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// thenCompose要求我们传入一个Function接口，传入参数T，经过转换后返回R</span></span><br><span class=\"line\">        <span class=\"comment\">// 将前面任务的结果返回给下一个任务</span></span><br><span class=\"line\">    &#125;).thenCompose(s -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员打饭&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s+<span class=\"string\">&quot;米饭&quot;</span>;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我在打王者&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// join等待任务执行结束，返回任务结果</span></span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527012705.png\"></p>\n<h1 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h1><p>服务员还没做饭，要求厨师炒菜的时候，服务员同时蒸饭,要求炒菜和蒸饭同时返回，才能执行炒菜</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;我进了饭堂&quot;</span>);</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class=\"line\">        <span class=\"comment\">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class=\"line\">        CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">            SmallTool.printTimeAndThread(<span class=\"string\">&quot;厨师炒菜&quot;</span>);</span><br><span class=\"line\">            SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;滑鸡&quot;</span>;</span><br><span class=\"line\">        &#125;).thenCombine(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">            SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员蒸饭&quot;</span>);</span><br><span class=\"line\">            SmallTool.sleepMillis(<span class=\"number\">300</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;米饭&quot;</span>;</span><br><span class=\"line\">        &#125;),(s, s2) -&gt; &#123;</span><br><span class=\"line\">            SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员打饭&quot;</span>);</span><br><span class=\"line\">            SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s+%s 好了&quot;</span>,s,s2);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;我在打王者&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// join等待任务执行结束，返回任务结果</span></span><br><span class=\"line\">        SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三个例子的基本模型\"><a href=\"#三个例子的基本模型\" class=\"headerlink\" title=\"三个例子的基本模型\"></a>三个例子的基本模型</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527013220.png\"></p>\n<h1 id=\"例子四\"><a href=\"#例子四\" class=\"headerlink\" title=\"例子四\"></a>例子四</h1><p><strong>我吃完了，准备结账，要求开发票，服务员收款后，要求另一个人开发票，开发票的同时，接到电话，拿到发票，回家养猪</strong><br>使用thenCompose也能执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我吃完了&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;结账，并且要求开发票&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;服务员收款 500元&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;500&quot;</span>;</span><br><span class=\"line\">    &#125;).thenApplyAsync(s -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;服务员开发票中 面额 %s元&quot;</span>, s));</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s元发票&quot;</span>, s);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;我接到电话&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;我拿到%s,准备回家&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"例子五\"><a href=\"#例子五\" class=\"headerlink\" title=\"例子五\"></a>例子五</h1><p>我等车，等100路或200路公交都能到家，谁先来上谁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;来到公交站&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100或200路公交&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100路公交车&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;100路来了&quot;</span>;</span><br><span class=\"line\">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待200路公交&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;200路来了&quot;</span>;</span><br><span class=\"line\">    &#125;),s -&gt; s);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527015316.png\"></p>\n<h1 id=\"例子六\"><a href=\"#例子六\" class=\"headerlink\" title=\"例子六\"></a>例子六</h1><p><strong>我坐在车上,司机撞树上了，只能打车回家了</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;来到公交站&quot;</span>);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100或200路公交&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待100路公交车&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;100路来了&quot;</span>;</span><br><span class=\"line\">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;等待200路公交&quot;</span>);</span><br><span class=\"line\">        SmallTool.sleepMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;200路来了&quot;</span>;</span><br><span class=\"line\">    &#125;),s -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.startsWith(<span class=\"string\">&quot;100&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;撞树上了&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class=\"line\">        SmallTool.printTimeAndThread(throwable.getMessage());</span><br><span class=\"line\">        SmallTool.printTimeAndThread(<span class=\"string\">&quot;打出租车回家&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;出租车到了&quot;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    SmallTool.printTimeAndThread(String.format(<span class=\"string\">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"例子七\"><a href=\"#例子七\" class=\"headerlink\" title=\"例子七\"></a>例子七</h1><p><strong>如果100路没来之前，就撞树上了，那么应该坐上200路公交</strong></p>\n"},{"title":"EasyExcel","date":"2020-05-24T16:50:54.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220525005115.png","_content":"\n# Apache POI\n> 有SAX模式和Dom模式解析，\nDom是一次性读取，容易造成内存溢出\nSAX模式相对比较复杂，在Excel03和07版本，数据存储的方式截然不同，sax解析方式也不同\n> 一个3M的Excel依然需要100M的内存\n\n## userModel模式\n> 大部分使用POI都是使用userModel模式，随便拷贝个代码就能用，但是转换要几百行代码，\n而且十分消耗内存，在并发情况下，会造成OOM和频繁的full gc\n\n# EasyExcel的改进\n## 重写了POI对07版本的Excel解析\n> 把内存消耗从100m降到了10m左右，并且再大的Excel也不会出现内存溢出，但是03版依然依赖于SAX模式","source":"_posts/组件/EasyExcel.md","raw":"---\ntitle: EasyExcel\ndate: 2020-5-25 00:50:54\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220525005115.png\ntags:\n- 组件\n---\n\n# Apache POI\n> 有SAX模式和Dom模式解析，\nDom是一次性读取，容易造成内存溢出\nSAX模式相对比较复杂，在Excel03和07版本，数据存储的方式截然不同，sax解析方式也不同\n> 一个3M的Excel依然需要100M的内存\n\n## userModel模式\n> 大部分使用POI都是使用userModel模式，随便拷贝个代码就能用，但是转换要几百行代码，\n而且十分消耗内存，在并发情况下，会造成OOM和频繁的full gc\n\n# EasyExcel的改进\n## 重写了POI对07版本的Excel解析\n> 把内存消耗从100m降到了10m左右，并且再大的Excel也不会出现内存溢出，但是03版依然依赖于SAX模式","slug":"组件/EasyExcel","published":1,"updated":"2022-06-10T10:11:19.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1kl000jys2mf8ch0git","content":"<h1 id=\"Apache-POI\"><a href=\"#Apache-POI\" class=\"headerlink\" title=\"Apache POI\"></a>Apache POI</h1><blockquote>\n<p>有SAX模式和Dom模式解析，<br>Dom是一次性读取，容易造成内存溢出<br>SAX模式相对比较复杂，在Excel03和07版本，数据存储的方式截然不同，sax解析方式也不同<br>一个3M的Excel依然需要100M的内存</p>\n</blockquote>\n<h2 id=\"userModel模式\"><a href=\"#userModel模式\" class=\"headerlink\" title=\"userModel模式\"></a>userModel模式</h2><blockquote>\n<p>大部分使用POI都是使用userModel模式，随便拷贝个代码就能用，但是转换要几百行代码，<br>而且十分消耗内存，在并发情况下，会造成OOM和频繁的full gc</p>\n</blockquote>\n<h1 id=\"EasyExcel的改进\"><a href=\"#EasyExcel的改进\" class=\"headerlink\" title=\"EasyExcel的改进\"></a>EasyExcel的改进</h1><h2 id=\"重写了POI对07版本的Excel解析\"><a href=\"#重写了POI对07版本的Excel解析\" class=\"headerlink\" title=\"重写了POI对07版本的Excel解析\"></a>重写了POI对07版本的Excel解析</h2><blockquote>\n<p>把内存消耗从100m降到了10m左右，并且再大的Excel也不会出现内存溢出，但是03版依然依赖于SAX模式</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Apache-POI\"><a href=\"#Apache-POI\" class=\"headerlink\" title=\"Apache POI\"></a>Apache POI</h1><blockquote>\n<p>有SAX模式和Dom模式解析，<br>Dom是一次性读取，容易造成内存溢出<br>SAX模式相对比较复杂，在Excel03和07版本，数据存储的方式截然不同，sax解析方式也不同<br>一个3M的Excel依然需要100M的内存</p>\n</blockquote>\n<h2 id=\"userModel模式\"><a href=\"#userModel模式\" class=\"headerlink\" title=\"userModel模式\"></a>userModel模式</h2><blockquote>\n<p>大部分使用POI都是使用userModel模式，随便拷贝个代码就能用，但是转换要几百行代码，<br>而且十分消耗内存，在并发情况下，会造成OOM和频繁的full gc</p>\n</blockquote>\n<h1 id=\"EasyExcel的改进\"><a href=\"#EasyExcel的改进\" class=\"headerlink\" title=\"EasyExcel的改进\"></a>EasyExcel的改进</h1><h2 id=\"重写了POI对07版本的Excel解析\"><a href=\"#重写了POI对07版本的Excel解析\" class=\"headerlink\" title=\"重写了POI对07版本的Excel解析\"></a>重写了POI对07版本的Excel解析</h2><blockquote>\n<p>把内存消耗从100m降到了10m左右，并且再大的Excel也不会出现内存溢出，但是03版依然依赖于SAX模式</p>\n</blockquote>\n"},{"title":"FastJson","date":"2020-05-20T15:28:06.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220523232857.png","_content":"# 什么是json\n**json是数据交换语言**\n# Json数据格式\n两种数据格式，对象与数组(List集合和Map集合不同)\n# TypeReference\n转换Map的过程中，不能设置泛型，没有泛型是不安全的，使用TypeReference，传入转后的Map集合\n结尾加上{},传入空的匿名内部类，因为TypeReference是protected修饰的构造方法，匿名内部类就是子类的内部对象\n```java\nMap<String,Student> map = JSON.parseObject(jsonString,new TypeReference<Map<String,Student>>(){});\n```\n# SerializerFeature \n进行序列化时，定制自己的需求的枚举\n\n## 设置空值为null\nfastJson序列化的时候，空值是不会序列化的\n```java\n Student student = new Student();\n        student.setId(\"1\");\n        student.setName(\"张三\");\n        student.setAge(null);\n        // 将student对象转换成Json字符串\n        String s = JSON.toJSONString(student, SerializerFeature.WriteMapNullValue);\n        System.out.println(s);\n```\n输出\n```json\n{\"age\":null,\"id\":\"1\",\"name\":\"张三\"}\n```\n## 设置空字段为双引\n```java\n        String s = JSON.toJSONString(student, SerializerFeature.WriteNullStringAsEmpty);\n```\n```json\n{\"age\":\"\",\"id\":\"1\",\"name\":\"张三\"}\n```\n## 设置空布尔为false\n```java\n        student.setIsStudent(null);\n        String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);\n\n```\n```json\n{\"age\":null,\"id\":\"1\",\"isStudent\":false,\"name\":\"张三\"}\n```\n\n## 格式化日期\n```java\nstudent.setBirthday(new Date());\nString s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);\n```\n```json\n{\"age\":null,\"birthday\":1653325416158,\"id\":\"1\",\"isStudent\":false,\"name\":\"张三\"}\n```\n添加格式化\n```java\n        String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse,SerializerFeature.WriteDateUseDateFormat);\n        System.out.println(s);\n```\n\n```json\n{\"age\":null,\"birthday\":\"2022-05-24 01:06:39\",\"id\":\"1\",\"isStudent\":false,\"name\":\"张三\"}\n```\n\n## 格式化输出\n```java\nString s = JSON.toJSONString(student, SerializerFeature.PrettyFormat,SerializerFeature.WriteDateUseDateFormat);\n        System.out.println(s);\n```\n```json\n{\n\t\"birthday\":\"2022-05-24 01:13:18\",\n\t\"id\":\"1\",\n\t\"name\":\"张三\"\n}\n```\n\n# JSONField\n## name\n```java\n    // name 指定序列化后的名字，\n@JSONField(name = \"studentName\")\nprivate String name;\n```\n```json\n{\n\t\"birthday\":\"2022-05-24 01:16:59\",\n\t\"id\":\"1\",\n\t\"studentName\":\"张三\"\n}\n```\n## ordinal\n```java\n    // 指定序列化后的顺序，值越小，越靠前\n    @JSONField(ordinal = 2)\n    private String age;\n```\n## format\n```java\n    @JSONField(format = \"YYYY-MM-dd\")\n    private Date birthday;\n```\n```json\n{\n\t\"birthday\":\"2022-22-24\",\n\t\"id\":\"1\",\n\t\"name\":\"张三\"\n}\n```\n## serialize\n该字段是否被序列化，默认true\n```java\n    @JSONField(serialize = false)\n    private String name;\n```\n```json\n{\n\t\"birthday\":\"2022-05-24\",\n\t\"id\":\"1\"\n}\n```\n## deserialize\n**在参与反序列化的过程中，这个字段不参与成为对象的一部分**\n```java\n    @JSONField(deserialize = false)\n    private String age;\n```\n\n\n\n\n\n\n","source":"_posts/组件/FastJson.md","raw":"---\ntitle: FastJson\ndate: 2020-5-20 23:28:06\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220523232857.png\ntags:\n- 组件\n---\n# 什么是json\n**json是数据交换语言**\n# Json数据格式\n两种数据格式，对象与数组(List集合和Map集合不同)\n# TypeReference\n转换Map的过程中，不能设置泛型，没有泛型是不安全的，使用TypeReference，传入转后的Map集合\n结尾加上{},传入空的匿名内部类，因为TypeReference是protected修饰的构造方法，匿名内部类就是子类的内部对象\n```java\nMap<String,Student> map = JSON.parseObject(jsonString,new TypeReference<Map<String,Student>>(){});\n```\n# SerializerFeature \n进行序列化时，定制自己的需求的枚举\n\n## 设置空值为null\nfastJson序列化的时候，空值是不会序列化的\n```java\n Student student = new Student();\n        student.setId(\"1\");\n        student.setName(\"张三\");\n        student.setAge(null);\n        // 将student对象转换成Json字符串\n        String s = JSON.toJSONString(student, SerializerFeature.WriteMapNullValue);\n        System.out.println(s);\n```\n输出\n```json\n{\"age\":null,\"id\":\"1\",\"name\":\"张三\"}\n```\n## 设置空字段为双引\n```java\n        String s = JSON.toJSONString(student, SerializerFeature.WriteNullStringAsEmpty);\n```\n```json\n{\"age\":\"\",\"id\":\"1\",\"name\":\"张三\"}\n```\n## 设置空布尔为false\n```java\n        student.setIsStudent(null);\n        String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);\n\n```\n```json\n{\"age\":null,\"id\":\"1\",\"isStudent\":false,\"name\":\"张三\"}\n```\n\n## 格式化日期\n```java\nstudent.setBirthday(new Date());\nString s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);\n```\n```json\n{\"age\":null,\"birthday\":1653325416158,\"id\":\"1\",\"isStudent\":false,\"name\":\"张三\"}\n```\n添加格式化\n```java\n        String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse,SerializerFeature.WriteDateUseDateFormat);\n        System.out.println(s);\n```\n\n```json\n{\"age\":null,\"birthday\":\"2022-05-24 01:06:39\",\"id\":\"1\",\"isStudent\":false,\"name\":\"张三\"}\n```\n\n## 格式化输出\n```java\nString s = JSON.toJSONString(student, SerializerFeature.PrettyFormat,SerializerFeature.WriteDateUseDateFormat);\n        System.out.println(s);\n```\n```json\n{\n\t\"birthday\":\"2022-05-24 01:13:18\",\n\t\"id\":\"1\",\n\t\"name\":\"张三\"\n}\n```\n\n# JSONField\n## name\n```java\n    // name 指定序列化后的名字，\n@JSONField(name = \"studentName\")\nprivate String name;\n```\n```json\n{\n\t\"birthday\":\"2022-05-24 01:16:59\",\n\t\"id\":\"1\",\n\t\"studentName\":\"张三\"\n}\n```\n## ordinal\n```java\n    // 指定序列化后的顺序，值越小，越靠前\n    @JSONField(ordinal = 2)\n    private String age;\n```\n## format\n```java\n    @JSONField(format = \"YYYY-MM-dd\")\n    private Date birthday;\n```\n```json\n{\n\t\"birthday\":\"2022-22-24\",\n\t\"id\":\"1\",\n\t\"name\":\"张三\"\n}\n```\n## serialize\n该字段是否被序列化，默认true\n```java\n    @JSONField(serialize = false)\n    private String name;\n```\n```json\n{\n\t\"birthday\":\"2022-05-24\",\n\t\"id\":\"1\"\n}\n```\n## deserialize\n**在参与反序列化的过程中，这个字段不参与成为对象的一部分**\n```java\n    @JSONField(deserialize = false)\n    private String age;\n```\n\n\n\n\n\n\n","slug":"组件/FastJson","published":1,"updated":"2022-05-30T03:05:17.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1kl000lys2m6c54ghww","content":"<h1 id=\"什么是json\"><a href=\"#什么是json\" class=\"headerlink\" title=\"什么是json\"></a>什么是json</h1><p><strong>json是数据交换语言</strong></p>\n<h1 id=\"Json数据格式\"><a href=\"#Json数据格式\" class=\"headerlink\" title=\"Json数据格式\"></a>Json数据格式</h1><p>两种数据格式，对象与数组(List集合和Map集合不同)</p>\n<h1 id=\"TypeReference\"><a href=\"#TypeReference\" class=\"headerlink\" title=\"TypeReference\"></a>TypeReference</h1><p>转换Map的过程中，不能设置泛型，没有泛型是不安全的，使用TypeReference，传入转后的Map集合<br>结尾加上{},传入空的匿名内部类，因为TypeReference是protected修饰的构造方法，匿名内部类就是子类的内部对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,Student&gt; map = JSON.parseObject(jsonString,<span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String,Student&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"SerializerFeature\"><a href=\"#SerializerFeature\" class=\"headerlink\" title=\"SerializerFeature\"></a>SerializerFeature</h1><p>进行序列化时，定制自己的需求的枚举</p>\n<h2 id=\"设置空值为null\"><a href=\"#设置空值为null\" class=\"headerlink\" title=\"设置空值为null\"></a>设置空值为null</h2><p>fastJson序列化的时候，空值是不会序列化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">       student.setId(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">       student.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">       student.setAge(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 将student对象转换成Json字符串</span></span><br><span class=\"line\">       String s = JSON.toJSONString(student, SerializerFeature.WriteMapNullValue);</span><br><span class=\"line\">       System.out.println(s);</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置空字段为双引\"><a href=\"#设置空字段为双引\" class=\"headerlink\" title=\"设置空字段为双引\"></a>设置空字段为双引</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullStringAsEmpty);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"string\">&quot;&quot;</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置空布尔为false\"><a href=\"#设置空布尔为false\" class=\"headerlink\" title=\"设置空布尔为false\"></a>设置空布尔为false</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">student.setIsStudent(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;isStudent&quot;</span>:<span class=\"literal\">false</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化日期\"><a href=\"#格式化日期\" class=\"headerlink\" title=\"格式化日期\"></a>格式化日期</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">student.setBirthday(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"number\">1653325416158</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;isStudent&quot;</span>:<span class=\"literal\">false</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>添加格式化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse,SerializerFeature.WriteDateUseDateFormat);</span><br><span class=\"line\">System.out.println(s);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24 01:06:39&quot;</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;isStudent&quot;</span>:<span class=\"literal\">false</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.PrettyFormat,SerializerFeature.WriteDateUseDateFormat);</span><br><span class=\"line\">        System.out.println(s);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24 01:13:18&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JSONField\"><a href=\"#JSONField\" class=\"headerlink\" title=\"JSONField\"></a>JSONField</h1><h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// name 指定序列化后的名字，</span></span><br><span class=\"line\"><span class=\"meta\">@JSONField(name = &quot;studentName&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24 01:16:59&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;studentName&quot;</span>:<span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ordinal\"><a href=\"#ordinal\" class=\"headerlink\" title=\"ordinal\"></a>ordinal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定序列化后的顺序，值越小，越靠前</span></span><br><span class=\"line\"><span class=\"meta\">@JSONField(ordinal = 2)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String age;</span><br></pre></td></tr></table></figure>\n<h2 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JSONField(format = &quot;YYYY-MM-dd&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Date birthday;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-22-24&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"serialize\"><a href=\"#serialize\" class=\"headerlink\" title=\"serialize\"></a>serialize</h2><p>该字段是否被序列化，默认true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JSONField(serialize = false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deserialize\"><a href=\"#deserialize\" class=\"headerlink\" title=\"deserialize\"></a>deserialize</h2><p><strong>在参与反序列化的过程中，这个字段不参与成为对象的一部分</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JSONField(deserialize = false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String age;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是json\"><a href=\"#什么是json\" class=\"headerlink\" title=\"什么是json\"></a>什么是json</h1><p><strong>json是数据交换语言</strong></p>\n<h1 id=\"Json数据格式\"><a href=\"#Json数据格式\" class=\"headerlink\" title=\"Json数据格式\"></a>Json数据格式</h1><p>两种数据格式，对象与数组(List集合和Map集合不同)</p>\n<h1 id=\"TypeReference\"><a href=\"#TypeReference\" class=\"headerlink\" title=\"TypeReference\"></a>TypeReference</h1><p>转换Map的过程中，不能设置泛型，没有泛型是不安全的，使用TypeReference，传入转后的Map集合<br>结尾加上{},传入空的匿名内部类，因为TypeReference是protected修饰的构造方法，匿名内部类就是子类的内部对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,Student&gt; map = JSON.parseObject(jsonString,<span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String,Student&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"SerializerFeature\"><a href=\"#SerializerFeature\" class=\"headerlink\" title=\"SerializerFeature\"></a>SerializerFeature</h1><p>进行序列化时，定制自己的需求的枚举</p>\n<h2 id=\"设置空值为null\"><a href=\"#设置空值为null\" class=\"headerlink\" title=\"设置空值为null\"></a>设置空值为null</h2><p>fastJson序列化的时候，空值是不会序列化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">       student.setId(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">       student.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">       student.setAge(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 将student对象转换成Json字符串</span></span><br><span class=\"line\">       String s = JSON.toJSONString(student, SerializerFeature.WriteMapNullValue);</span><br><span class=\"line\">       System.out.println(s);</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置空字段为双引\"><a href=\"#设置空字段为双引\" class=\"headerlink\" title=\"设置空字段为双引\"></a>设置空字段为双引</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullStringAsEmpty);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"string\">&quot;&quot;</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置空布尔为false\"><a href=\"#设置空布尔为false\" class=\"headerlink\" title=\"设置空布尔为false\"></a>设置空布尔为false</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">student.setIsStudent(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;isStudent&quot;</span>:<span class=\"literal\">false</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化日期\"><a href=\"#格式化日期\" class=\"headerlink\" title=\"格式化日期\"></a>格式化日期</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">student.setBirthday(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"number\">1653325416158</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;isStudent&quot;</span>:<span class=\"literal\">false</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>添加格式化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse,SerializerFeature.WriteDateUseDateFormat);</span><br><span class=\"line\">System.out.println(s);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;age&quot;</span>:<span class=\"literal\">null</span>,<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24 01:06:39&quot;</span>,<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,<span class=\"attr\">&quot;isStudent&quot;</span>:<span class=\"literal\">false</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = JSON.toJSONString(student, SerializerFeature.PrettyFormat,SerializerFeature.WriteDateUseDateFormat);</span><br><span class=\"line\">        System.out.println(s);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24 01:13:18&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JSONField\"><a href=\"#JSONField\" class=\"headerlink\" title=\"JSONField\"></a>JSONField</h1><h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// name 指定序列化后的名字，</span></span><br><span class=\"line\"><span class=\"meta\">@JSONField(name = &quot;studentName&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24 01:16:59&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;studentName&quot;</span>:<span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ordinal\"><a href=\"#ordinal\" class=\"headerlink\" title=\"ordinal\"></a>ordinal</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定序列化后的顺序，值越小，越靠前</span></span><br><span class=\"line\"><span class=\"meta\">@JSONField(ordinal = 2)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String age;</span><br></pre></td></tr></table></figure>\n<h2 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JSONField(format = &quot;YYYY-MM-dd&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Date birthday;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-22-24&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"serialize\"><a href=\"#serialize\" class=\"headerlink\" title=\"serialize\"></a>serialize</h2><p>该字段是否被序列化，默认true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JSONField(serialize = false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;birthday&quot;</span>:<span class=\"string\">&quot;2022-05-24&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>:<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deserialize\"><a href=\"#deserialize\" class=\"headerlink\" title=\"deserialize\"></a>deserialize</h2><p><strong>在参与反序列化的过程中，这个字段不参与成为对象的一部分</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JSONField(deserialize = false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String age;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"foreach批量插入","date":"2022-05-30T07:30:29.000Z","cover":"/img/1.png","_content":"```java\n@Test\npublic void testInsertBatch() throws Exception {\n    long start = System.currentTimeMillis();\n    List<User> list = new ArrayList<>();\n    User user;\n    for (int i = 0; i < 10000; i++) {\n        user = new User();\n        user.setId(\"test\" + i);\n        user.setName(\"name\" + i);\n        user.setDelFlag(\"0\");\n        list.add(user);\n    }\n    userService.insertBatch(list);\n    long end = System.currentTimeMillis();\n    System.out.println(\"---------------\" + (start - end) + \"---------------\");\n}\n```\n```java\n<insert id=\"insertBatch\">\n    INSERT INTO t_user\n            (id, name, del_flag)\n    VALUES\n    <foreach collection =\"list\" item=\"user\" separator =\",\">\n         (#{user.id}, #{user.name}, #{user.delFlag})\n    </foreach >\n</insert>\n```","source":"_posts/组件/foreach批量插入.md","raw":"---\ntitle: foreach批量插入\ndate: 2022-5-30 15:30:29\ncover: \ntags:\n- 组件\n---\n```java\n@Test\npublic void testInsertBatch() throws Exception {\n    long start = System.currentTimeMillis();\n    List<User> list = new ArrayList<>();\n    User user;\n    for (int i = 0; i < 10000; i++) {\n        user = new User();\n        user.setId(\"test\" + i);\n        user.setName(\"name\" + i);\n        user.setDelFlag(\"0\");\n        list.add(user);\n    }\n    userService.insertBatch(list);\n    long end = System.currentTimeMillis();\n    System.out.println(\"---------------\" + (start - end) + \"---------------\");\n}\n```\n```java\n<insert id=\"insertBatch\">\n    INSERT INTO t_user\n            (id, name, del_flag)\n    VALUES\n    <foreach collection =\"list\" item=\"user\" separator =\",\">\n         (#{user.id}, #{user.name}, #{user.delFlag})\n    </foreach >\n</insert>\n```","slug":"组件/foreach批量插入","published":1,"updated":"2022-05-30T07:30:35.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1km000nys2me0lk0bve","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsertBatch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    List&lt;User&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setId(<span class=\"string\">&quot;test&quot;</span> + i);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;name&quot;</span> + i);</span><br><span class=\"line\">        user.setDelFlag(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">        list.add(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    userService.insertBatch(list);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;---------------&quot;</span> + (start - end) + <span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=<span class=\"string\">&quot;insertBatch&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"function\">INSERT INTO <span class=\"title\">t_user</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"params\">(id, name, del_flag)</span></span></span><br><span class=\"line\"><span class=\"function\">    VALUES</span></span><br><span class=\"line\"><span class=\"function\">    &lt;foreach collection </span>=<span class=\"string\">&quot;list&quot;</span> item=<span class=\"string\">&quot;user&quot;</span> separator =<span class=\"string\">&quot;,&quot;</span>&gt;</span><br><span class=\"line\">         (#&#123;user.id&#125;, #&#123;user.name&#125;, #&#123;user.delFlag&#125;)</span><br><span class=\"line\">    &lt;/foreach &gt;</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsertBatch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    List&lt;User&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setId(<span class=\"string\">&quot;test&quot;</span> + i);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;name&quot;</span> + i);</span><br><span class=\"line\">        user.setDelFlag(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">        list.add(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    userService.insertBatch(list);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;---------------&quot;</span> + (start - end) + <span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=<span class=\"string\">&quot;insertBatch&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"function\">INSERT INTO <span class=\"title\">t_user</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"params\">(id, name, del_flag)</span></span></span><br><span class=\"line\"><span class=\"function\">    VALUES</span></span><br><span class=\"line\"><span class=\"function\">    &lt;foreach collection </span>=<span class=\"string\">&quot;list&quot;</span> item=<span class=\"string\">&quot;user&quot;</span> separator =<span class=\"string\">&quot;,&quot;</span>&gt;</span><br><span class=\"line\">         (#&#123;user.id&#125;, #&#123;user.name&#125;, #&#123;user.delFlag&#125;)</span><br><span class=\"line\">    &lt;/foreach &gt;</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>"},{"title":"StringJoiner类","date":"2020-05-26T17:02:04.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527010222.png","_content":"\n引言：在阅读项目代码是，突然看到了 StringJoiner 这个类的使用，感觉很有意思，对实际开发中也有用，实际上是运用了 StringBuilder 的一个拼接字符串的封装处理。\n\n## 介绍\nStringJoiner 是 Java8 新出的一个类，用于构造由分隔符分隔的字符序列，并可选择性地从提供的前缀开始和以提供的后缀结尾。省的我们开发人员再次通过 StringBuffer 或者 StingBuilder 拼接。\n我们查看一下一下代码，试着猜一下。\n\n```java\nStringJoiner sj = new StringJoiner(\":\", \"[\", \"]\");\nsj.add(\"George\").add(\"Sally\").add(\"Fred\");\nString desiredString = sj.toString();\n```\n代码输出为[George:Sally:Fred]\n\n## 源码\n```java\npackage java.util;\n\npublic final class StringJoiner {\n    private final String prefix;//前缀\n    private final String delimiter;//间隔符\n    private final String suffix;//后缀\n    private StringBuilder value;//值\n\n    private String emptyValue;//空值\n\n    public StringJoiner(CharSequence delimiter) {\n        this(delimiter, \"\", \"\");//默认前缀和后缀为\"\",重载调用\n    }\n\n    public StringJoiner(CharSequence delimiter,\n                        CharSequence prefix,\n                        CharSequence suffix) {\n        //间隔符，前缀和后缀判断是否为null，null将抛出异常\n        Objects.requireNonNull(prefix, \"The prefix must not be null\");\n        Objects.requireNonNull(delimiter, \"The delimiter must not be null\");\n        Objects.requireNonNull(suffix, \"The suffix must not be null\"); \n        // 成员变量赋值\n        this.prefix = prefix.toString();\n        this.delimiter = delimiter.toString();\n        this.suffix = suffix.toString();\n        this.emptyValue = this.prefix + this.suffix;//空值被设置为只有前后缀\n    }\n\t//设置空值，检查是否为null\n    public StringJoiner setEmptyValue(CharSequence emptyValue) {\n        this.emptyValue = Objects.requireNonNull(emptyValue,\n            \"The empty value must not be null\").toString();\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        if (value == null) {\n            return emptyValue;//没有值将返回空值或者后续设置的空值\n        } else {\n            if (suffix.equals(\"\")) {\n                return value.toString();//后缀为\"\"直接返回字符串，不用添加\n            } else {\n\t            //后缀不为\"\"，添加后缀，然后直接返回字符串，修改长度\n                int initialLength = value.length();\n                String result = value.append(suffix).toString();\n                // reset value to pre-append initialLength\n                value.setLength(initialLength);\n                return result;\n            }\n        }\n    }\n    初始化，先添加前缀，有了之后每次先添加间隔符，StringBuilder后续append字符串\n    public StringJoiner add(CharSequence newElement) {\n        prepareBuilder().append(newElement);\n        return this;\n    }\n\t//合并StringJoiner，注意后面StringJoiner 的前缀就不要了，后面的appen进来\n    public StringJoiner merge(StringJoiner other) {\n        Objects.requireNonNull(other);\n        if (other.value != null) {\n            final int length = other.value.length();\n            // lock the length so that we can seize the data to be appended\n            // before initiate copying to avoid interference, especially when\n            // merge 'this'\n            StringBuilder builder = prepareBuilder();\n            builder.append(other.value, other.prefix.length(), length);\n        }\n        return this;\n    }\n\t//初始化，先添加前缀，有了之后每次先添加间隔符\n    private StringBuilder prepareBuilder() {\n        if (value != null) {\n            value.append(delimiter);\n        } else {\n            value = new StringBuilder().append(prefix);\n        }\n        return value;\n    }\n\n    public int length() {\n        // Remember that we never actually append the suffix unless we return\n        // the full (present) value or some sub-string or length of it, so that\n        // we can add on more if we need to.\n        //不忘添加后缀的长度\n        return (value != null ? value.length() + suffix.length() :\n                emptyValue.length());\n    }\n}\n```\n","source":"_posts/组件/StringJoiner类.md","raw":"---\ntitle: StringJoiner类\ndate: 2020-5-27 01:02:04\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527010222.png\ntags:\n- 组件\n---\n\n引言：在阅读项目代码是，突然看到了 StringJoiner 这个类的使用，感觉很有意思，对实际开发中也有用，实际上是运用了 StringBuilder 的一个拼接字符串的封装处理。\n\n## 介绍\nStringJoiner 是 Java8 新出的一个类，用于构造由分隔符分隔的字符序列，并可选择性地从提供的前缀开始和以提供的后缀结尾。省的我们开发人员再次通过 StringBuffer 或者 StingBuilder 拼接。\n我们查看一下一下代码，试着猜一下。\n\n```java\nStringJoiner sj = new StringJoiner(\":\", \"[\", \"]\");\nsj.add(\"George\").add(\"Sally\").add(\"Fred\");\nString desiredString = sj.toString();\n```\n代码输出为[George:Sally:Fred]\n\n## 源码\n```java\npackage java.util;\n\npublic final class StringJoiner {\n    private final String prefix;//前缀\n    private final String delimiter;//间隔符\n    private final String suffix;//后缀\n    private StringBuilder value;//值\n\n    private String emptyValue;//空值\n\n    public StringJoiner(CharSequence delimiter) {\n        this(delimiter, \"\", \"\");//默认前缀和后缀为\"\",重载调用\n    }\n\n    public StringJoiner(CharSequence delimiter,\n                        CharSequence prefix,\n                        CharSequence suffix) {\n        //间隔符，前缀和后缀判断是否为null，null将抛出异常\n        Objects.requireNonNull(prefix, \"The prefix must not be null\");\n        Objects.requireNonNull(delimiter, \"The delimiter must not be null\");\n        Objects.requireNonNull(suffix, \"The suffix must not be null\"); \n        // 成员变量赋值\n        this.prefix = prefix.toString();\n        this.delimiter = delimiter.toString();\n        this.suffix = suffix.toString();\n        this.emptyValue = this.prefix + this.suffix;//空值被设置为只有前后缀\n    }\n\t//设置空值，检查是否为null\n    public StringJoiner setEmptyValue(CharSequence emptyValue) {\n        this.emptyValue = Objects.requireNonNull(emptyValue,\n            \"The empty value must not be null\").toString();\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        if (value == null) {\n            return emptyValue;//没有值将返回空值或者后续设置的空值\n        } else {\n            if (suffix.equals(\"\")) {\n                return value.toString();//后缀为\"\"直接返回字符串，不用添加\n            } else {\n\t            //后缀不为\"\"，添加后缀，然后直接返回字符串，修改长度\n                int initialLength = value.length();\n                String result = value.append(suffix).toString();\n                // reset value to pre-append initialLength\n                value.setLength(initialLength);\n                return result;\n            }\n        }\n    }\n    初始化，先添加前缀，有了之后每次先添加间隔符，StringBuilder后续append字符串\n    public StringJoiner add(CharSequence newElement) {\n        prepareBuilder().append(newElement);\n        return this;\n    }\n\t//合并StringJoiner，注意后面StringJoiner 的前缀就不要了，后面的appen进来\n    public StringJoiner merge(StringJoiner other) {\n        Objects.requireNonNull(other);\n        if (other.value != null) {\n            final int length = other.value.length();\n            // lock the length so that we can seize the data to be appended\n            // before initiate copying to avoid interference, especially when\n            // merge 'this'\n            StringBuilder builder = prepareBuilder();\n            builder.append(other.value, other.prefix.length(), length);\n        }\n        return this;\n    }\n\t//初始化，先添加前缀，有了之后每次先添加间隔符\n    private StringBuilder prepareBuilder() {\n        if (value != null) {\n            value.append(delimiter);\n        } else {\n            value = new StringBuilder().append(prefix);\n        }\n        return value;\n    }\n\n    public int length() {\n        // Remember that we never actually append the suffix unless we return\n        // the full (present) value or some sub-string or length of it, so that\n        // we can add on more if we need to.\n        //不忘添加后缀的长度\n        return (value != null ? value.length() + suffix.length() :\n                emptyValue.length());\n    }\n}\n```\n","slug":"组件/StringJoiner类","published":1,"updated":"2022-06-10T10:11:19.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1kn000oys2m60vvedxo","content":"<p>引言：在阅读项目代码是，突然看到了 StringJoiner 这个类的使用，感觉很有意思，对实际开发中也有用，实际上是运用了 StringBuilder 的一个拼接字符串的封装处理。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>StringJoiner 是 Java8 新出的一个类，用于构造由分隔符分隔的字符序列，并可选择性地从提供的前缀开始和以提供的后缀结尾。省的我们开发人员再次通过 StringBuffer 或者 StingBuilder 拼接。<br>我们查看一下一下代码，试着猜一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringJoiner sj = <span class=\"keyword\">new</span> StringJoiner(<span class=\"string\">&quot;:&quot;</span>, <span class=\"string\">&quot;[&quot;</span>, <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">sj.add(<span class=\"string\">&quot;George&quot;</span>).add(<span class=\"string\">&quot;Sally&quot;</span>).add(<span class=\"string\">&quot;Fred&quot;</span>);</span><br><span class=\"line\">String desiredString = sj.toString();</span><br></pre></td></tr></table></figure>\n<p>代码输出为[George:Sally:Fred]</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringJoiner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;<span class=\"comment\">//前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String delimiter;<span class=\"comment\">//间隔符</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String suffix;<span class=\"comment\">//后缀</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringBuilder value;<span class=\"comment\">//值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String emptyValue;<span class=\"comment\">//空值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(CharSequence delimiter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(delimiter, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);<span class=\"comment\">//默认前缀和后缀为&quot;&quot;,重载调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(CharSequence delimiter,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        CharSequence prefix,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        CharSequence suffix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//间隔符，前缀和后缀判断是否为null，null将抛出异常</span></span><br><span class=\"line\">        Objects.requireNonNull(prefix, <span class=\"string\">&quot;The prefix must not be null&quot;</span>);</span><br><span class=\"line\">        Objects.requireNonNull(delimiter, <span class=\"string\">&quot;The delimiter must not be null&quot;</span>);</span><br><span class=\"line\">        Objects.requireNonNull(suffix, <span class=\"string\">&quot;The suffix must not be null&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">// 成员变量赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prefix = prefix.toString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.delimiter = delimiter.toString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.suffix = suffix.toString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emptyValue = <span class=\"keyword\">this</span>.prefix + <span class=\"keyword\">this</span>.suffix;<span class=\"comment\">//空值被设置为只有前后缀</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置空值，检查是否为null</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">setEmptyValue</span><span class=\"params\">(CharSequence emptyValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emptyValue = Objects.requireNonNull(emptyValue,</span><br><span class=\"line\">            <span class=\"string\">&quot;The empty value must not be null&quot;</span>).toString();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emptyValue;<span class=\"comment\">//没有值将返回空值或者后续设置的空值</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (suffix.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value.toString();<span class=\"comment\">//后缀为&quot;&quot;直接返回字符串，不用添加</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">//后缀不为&quot;&quot;，添加后缀，然后直接返回字符串，修改长度</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> initialLength = value.length();</span><br><span class=\"line\">                String result = value.append(suffix).toString();</span><br><span class=\"line\">                <span class=\"comment\">// reset value to pre-append initialLength</span></span><br><span class=\"line\">                value.setLength(initialLength);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    初始化，先添加前缀，有了之后每次先添加间隔符，StringBuilder后续append字符串</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">add</span><span class=\"params\">(CharSequence newElement)</span> </span>&#123;</span><br><span class=\"line\">        prepareBuilder().append(newElement);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//合并StringJoiner，注意后面StringJoiner 的前缀就不要了，后面的appen进来</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">merge</span><span class=\"params\">(StringJoiner other)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (other.value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> length = other.value.length();</span><br><span class=\"line\">            <span class=\"comment\">// lock the length so that we can seize the data to be appended</span></span><br><span class=\"line\">            <span class=\"comment\">// before initiate copying to avoid interference, especially when</span></span><br><span class=\"line\">            <span class=\"comment\">// merge &#x27;this&#x27;</span></span><br><span class=\"line\">            StringBuilder builder = prepareBuilder();</span><br><span class=\"line\">            builder.append(other.value, other.prefix.length(), length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//初始化，先添加前缀，有了之后每次先添加间隔符</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> StringBuilder <span class=\"title\">prepareBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            value.append(delimiter);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            value = <span class=\"keyword\">new</span> StringBuilder().append(prefix);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Remember that we never actually append the suffix unless we return</span></span><br><span class=\"line\">        <span class=\"comment\">// the full (present) value or some sub-string or length of it, so that</span></span><br><span class=\"line\">        <span class=\"comment\">// we can add on more if we need to.</span></span><br><span class=\"line\">        <span class=\"comment\">//不忘添加后缀的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (value != <span class=\"keyword\">null</span> ? value.length() + suffix.length() :</span><br><span class=\"line\">                emptyValue.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>引言：在阅读项目代码是，突然看到了 StringJoiner 这个类的使用，感觉很有意思，对实际开发中也有用，实际上是运用了 StringBuilder 的一个拼接字符串的封装处理。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>StringJoiner 是 Java8 新出的一个类，用于构造由分隔符分隔的字符序列，并可选择性地从提供的前缀开始和以提供的后缀结尾。省的我们开发人员再次通过 StringBuffer 或者 StingBuilder 拼接。<br>我们查看一下一下代码，试着猜一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringJoiner sj = <span class=\"keyword\">new</span> StringJoiner(<span class=\"string\">&quot;:&quot;</span>, <span class=\"string\">&quot;[&quot;</span>, <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">sj.add(<span class=\"string\">&quot;George&quot;</span>).add(<span class=\"string\">&quot;Sally&quot;</span>).add(<span class=\"string\">&quot;Fred&quot;</span>);</span><br><span class=\"line\">String desiredString = sj.toString();</span><br></pre></td></tr></table></figure>\n<p>代码输出为[George:Sally:Fred]</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringJoiner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;<span class=\"comment\">//前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String delimiter;<span class=\"comment\">//间隔符</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String suffix;<span class=\"comment\">//后缀</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringBuilder value;<span class=\"comment\">//值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String emptyValue;<span class=\"comment\">//空值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(CharSequence delimiter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(delimiter, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);<span class=\"comment\">//默认前缀和后缀为&quot;&quot;,重载调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(CharSequence delimiter,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        CharSequence prefix,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        CharSequence suffix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//间隔符，前缀和后缀判断是否为null，null将抛出异常</span></span><br><span class=\"line\">        Objects.requireNonNull(prefix, <span class=\"string\">&quot;The prefix must not be null&quot;</span>);</span><br><span class=\"line\">        Objects.requireNonNull(delimiter, <span class=\"string\">&quot;The delimiter must not be null&quot;</span>);</span><br><span class=\"line\">        Objects.requireNonNull(suffix, <span class=\"string\">&quot;The suffix must not be null&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">// 成员变量赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prefix = prefix.toString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.delimiter = delimiter.toString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.suffix = suffix.toString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emptyValue = <span class=\"keyword\">this</span>.prefix + <span class=\"keyword\">this</span>.suffix;<span class=\"comment\">//空值被设置为只有前后缀</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置空值，检查是否为null</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">setEmptyValue</span><span class=\"params\">(CharSequence emptyValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emptyValue = Objects.requireNonNull(emptyValue,</span><br><span class=\"line\">            <span class=\"string\">&quot;The empty value must not be null&quot;</span>).toString();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> emptyValue;<span class=\"comment\">//没有值将返回空值或者后续设置的空值</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (suffix.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value.toString();<span class=\"comment\">//后缀为&quot;&quot;直接返回字符串，不用添加</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">//后缀不为&quot;&quot;，添加后缀，然后直接返回字符串，修改长度</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> initialLength = value.length();</span><br><span class=\"line\">                String result = value.append(suffix).toString();</span><br><span class=\"line\">                <span class=\"comment\">// reset value to pre-append initialLength</span></span><br><span class=\"line\">                value.setLength(initialLength);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    初始化，先添加前缀，有了之后每次先添加间隔符，StringBuilder后续append字符串</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">add</span><span class=\"params\">(CharSequence newElement)</span> </span>&#123;</span><br><span class=\"line\">        prepareBuilder().append(newElement);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//合并StringJoiner，注意后面StringJoiner 的前缀就不要了，后面的appen进来</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">merge</span><span class=\"params\">(StringJoiner other)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (other.value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> length = other.value.length();</span><br><span class=\"line\">            <span class=\"comment\">// lock the length so that we can seize the data to be appended</span></span><br><span class=\"line\">            <span class=\"comment\">// before initiate copying to avoid interference, especially when</span></span><br><span class=\"line\">            <span class=\"comment\">// merge &#x27;this&#x27;</span></span><br><span class=\"line\">            StringBuilder builder = prepareBuilder();</span><br><span class=\"line\">            builder.append(other.value, other.prefix.length(), length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//初始化，先添加前缀，有了之后每次先添加间隔符</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> StringBuilder <span class=\"title\">prepareBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            value.append(delimiter);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            value = <span class=\"keyword\">new</span> StringBuilder().append(prefix);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Remember that we never actually append the suffix unless we return</span></span><br><span class=\"line\">        <span class=\"comment\">// the full (present) value or some sub-string or length of it, so that</span></span><br><span class=\"line\">        <span class=\"comment\">// we can add on more if we need to.</span></span><br><span class=\"line\">        <span class=\"comment\">//不忘添加后缀的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (value != <span class=\"keyword\">null</span> ? value.length() + suffix.length() :</span><br><span class=\"line\">                emptyValue.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"redis之list来实现限流","date":"2022-05-30T03:50:07.000Z","cover":"/img/9.png","_content":"```java\n\t\tString key = \"userId\" + \"接口名\" ;\n        int listLength = llen(key);\n        if (listLength < 10) {\n        lpush(key, new ());\n        } else {\n        long time = lindex(key, -1);\n        if (now() - time < 60) {\n        System.out.println(\"访问频率超过了限制，请稍后再试\");\n        } else {\n        lpush(key, now);\n        ltrim(key, 0, 9);\n        }\n        }\n\n```\n![](![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220530115137.png))","source":"_posts/组件/redis之list来实现限流.md","raw":"---\ntitle: redis之list来实现限流\ndate: 2022-5-30 11:50:07\ncover: \ntags:\n- 组件\n---\n```java\n\t\tString key = \"userId\" + \"接口名\" ;\n        int listLength = llen(key);\n        if (listLength < 10) {\n        lpush(key, new ());\n        } else {\n        long time = lindex(key, -1);\n        if (now() - time < 60) {\n        System.out.println(\"访问频率超过了限制，请稍后再试\");\n        } else {\n        lpush(key, now);\n        ltrim(key, 0, 9);\n        }\n        }\n\n```\n![](![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220530115137.png))","slug":"组件/redis之list来实现限流","published":1,"updated":"2022-05-30T03:51:40.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1l0000rys2m6vld8o34","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String key = <span class=\"string\">&quot;userId&quot;</span> + <span class=\"string\">&quot;接口名&quot;</span> ;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> listLength = llen(key);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (listLength &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      lpush(key, <span class=\"keyword\">new</span> ());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">long</span> time = lindex(key, -<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (now() - time &lt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;访问频率超过了限制，请稍后再试&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      lpush(key, now);</span><br><span class=\"line\">      ltrim(key, <span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"!%5B%5D(https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220530115137.png)\"></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String key = <span class=\"string\">&quot;userId&quot;</span> + <span class=\"string\">&quot;接口名&quot;</span> ;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> listLength = llen(key);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (listLength &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      lpush(key, <span class=\"keyword\">new</span> ());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">long</span> time = lindex(key, -<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (now() - time &lt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;访问频率超过了限制，请稍后再试&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      lpush(key, now);</span><br><span class=\"line\">      ltrim(key, <span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"!%5B%5D(https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220530115137.png)\"></p>\n"},{"title":"常见多线程使用记录","date":"2020-05-26T14:55:20.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526225609.png","_content":"# 起始\n一个高并发系统，最优秀的响应时间在200ms之内\n在调用两个service串行调用的情况下，响应已经到了400ms\n\n# Callable\n想要获取一个有返回值的线程，使用Callable\n\n无法通过new Thread的方式创建Callable\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231027.png)\n\n## 使用FutureTask\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231313.png)\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231609.png)\n## 使用get方式获取\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526233057.png)\n响应时间-200ms\n## 问题\ntomcat处理线程默认是200个，如果没有get到返回值，会导致阻塞\n解决方案，使用Servlet3.0异步请求\n# Servlet3.0\n异步直接返回Callable,return callable会回调\nTomcat主线程接近0ms，子线程耗时300ms\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234543.png)\n## 原理\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234920.png)\n## 问题\n多线程调用多个接口，造成大量的并发\n解决方案\n使用批量接口，定时任务，或者CompletableFuture\n# 定时任务加批量接口\n将请求装到队列中，每隔10ms批量调用，包装成list返回，通过分布式id，分发给对应的客户端\n## CountDownLatch\n模拟1w个并发\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527001708.png)\n\n## 定时线程池\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002334.png)\n\n## 阻塞队列\n包装请求，放入唯一id，请求内容，CompletableFuture\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002454.png)\n\n## 封装数据\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002728.png)\n## 定时任务\n 如果队列为空，直接return\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527003927.png)\n 接口的参数包装\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004024.png)\n 调用批量接口\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004254.png)\n## 测试单个调用的性能差距\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004551.png)","source":"_posts/组件/多线程.md","raw":"---\ntitle: 常见多线程使用记录\ndate: 2020-5-26 22:55:20\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526225609.png\ntags:\n- 组件\n---\n# 起始\n一个高并发系统，最优秀的响应时间在200ms之内\n在调用两个service串行调用的情况下，响应已经到了400ms\n\n# Callable\n想要获取一个有返回值的线程，使用Callable\n\n无法通过new Thread的方式创建Callable\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231027.png)\n\n## 使用FutureTask\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231313.png)\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231609.png)\n## 使用get方式获取\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526233057.png)\n响应时间-200ms\n## 问题\ntomcat处理线程默认是200个，如果没有get到返回值，会导致阻塞\n解决方案，使用Servlet3.0异步请求\n# Servlet3.0\n异步直接返回Callable,return callable会回调\nTomcat主线程接近0ms，子线程耗时300ms\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234543.png)\n## 原理\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234920.png)\n## 问题\n多线程调用多个接口，造成大量的并发\n解决方案\n使用批量接口，定时任务，或者CompletableFuture\n# 定时任务加批量接口\n将请求装到队列中，每隔10ms批量调用，包装成list返回，通过分布式id，分发给对应的客户端\n## CountDownLatch\n模拟1w个并发\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527001708.png)\n\n## 定时线程池\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002334.png)\n\n## 阻塞队列\n包装请求，放入唯一id，请求内容，CompletableFuture\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002454.png)\n\n## 封装数据\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002728.png)\n## 定时任务\n 如果队列为空，直接return\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527003927.png)\n 接口的参数包装\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004024.png)\n 调用批量接口\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004254.png)\n## 测试单个调用的性能差距\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004551.png)","slug":"组件/多线程","published":1,"updated":"2022-06-10T10:11:19.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1l1000sys2m5169hzva","content":"<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><p>一个高并发系统，最优秀的响应时间在200ms之内<br>在调用两个service串行调用的情况下，响应已经到了400ms</p>\n<h1 id=\"Callable\"><a href=\"#Callable\" class=\"headerlink\" title=\"Callable\"></a>Callable</h1><p>想要获取一个有返回值的线程，使用Callable</p>\n<p>无法通过new Thread的方式创建Callable<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231027.png\"></p>\n<h2 id=\"使用FutureTask\"><a href=\"#使用FutureTask\" class=\"headerlink\" title=\"使用FutureTask\"></a>使用FutureTask</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231313.png\"><br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231609.png\"></p>\n<h2 id=\"使用get方式获取\"><a href=\"#使用get方式获取\" class=\"headerlink\" title=\"使用get方式获取\"></a>使用get方式获取</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526233057.png\"><br>响应时间-200ms</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>tomcat处理线程默认是200个，如果没有get到返回值，会导致阻塞<br>解决方案，使用Servlet3.0异步请求</p>\n<h1 id=\"Servlet3-0\"><a href=\"#Servlet3-0\" class=\"headerlink\" title=\"Servlet3.0\"></a>Servlet3.0</h1><p>异步直接返回Callable,return callable会回调<br>Tomcat主线程接近0ms，子线程耗时300ms<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234543.png\"></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234920.png\"></p>\n<h2 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>多线程调用多个接口，造成大量的并发<br>解决方案<br>使用批量接口，定时任务，或者CompletableFuture</p>\n<h1 id=\"定时任务加批量接口\"><a href=\"#定时任务加批量接口\" class=\"headerlink\" title=\"定时任务加批量接口\"></a>定时任务加批量接口</h1><p>将请求装到队列中，每隔10ms批量调用，包装成list返回，通过分布式id，分发给对应的客户端</p>\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><p>模拟1w个并发<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527001708.png\"></p>\n<h2 id=\"定时线程池\"><a href=\"#定时线程池\" class=\"headerlink\" title=\"定时线程池\"></a>定时线程池</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002334.png\"></p>\n<h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><p>包装请求，放入唯一id，请求内容，CompletableFuture<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002454.png\"></p>\n<h2 id=\"封装数据\"><a href=\"#封装数据\" class=\"headerlink\" title=\"封装数据\"></a>封装数据</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002728.png\"></p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p> 如果队列为空，直接return<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527003927.png\"><br> 接口的参数包装<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004024.png\"><br> 调用批量接口<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004254.png\"></p>\n<h2 id=\"测试单个调用的性能差距\"><a href=\"#测试单个调用的性能差距\" class=\"headerlink\" title=\"测试单个调用的性能差距\"></a>测试单个调用的性能差距</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004551.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><p>一个高并发系统，最优秀的响应时间在200ms之内<br>在调用两个service串行调用的情况下，响应已经到了400ms</p>\n<h1 id=\"Callable\"><a href=\"#Callable\" class=\"headerlink\" title=\"Callable\"></a>Callable</h1><p>想要获取一个有返回值的线程，使用Callable</p>\n<p>无法通过new Thread的方式创建Callable<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231027.png\"></p>\n<h2 id=\"使用FutureTask\"><a href=\"#使用FutureTask\" class=\"headerlink\" title=\"使用FutureTask\"></a>使用FutureTask</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231313.png\"><br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231609.png\"></p>\n<h2 id=\"使用get方式获取\"><a href=\"#使用get方式获取\" class=\"headerlink\" title=\"使用get方式获取\"></a>使用get方式获取</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526233057.png\"><br>响应时间-200ms</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>tomcat处理线程默认是200个，如果没有get到返回值，会导致阻塞<br>解决方案，使用Servlet3.0异步请求</p>\n<h1 id=\"Servlet3-0\"><a href=\"#Servlet3-0\" class=\"headerlink\" title=\"Servlet3.0\"></a>Servlet3.0</h1><p>异步直接返回Callable,return callable会回调<br>Tomcat主线程接近0ms，子线程耗时300ms<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234543.png\"></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234920.png\"></p>\n<h2 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>多线程调用多个接口，造成大量的并发<br>解决方案<br>使用批量接口，定时任务，或者CompletableFuture</p>\n<h1 id=\"定时任务加批量接口\"><a href=\"#定时任务加批量接口\" class=\"headerlink\" title=\"定时任务加批量接口\"></a>定时任务加批量接口</h1><p>将请求装到队列中，每隔10ms批量调用，包装成list返回，通过分布式id，分发给对应的客户端</p>\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><p>模拟1w个并发<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527001708.png\"></p>\n<h2 id=\"定时线程池\"><a href=\"#定时线程池\" class=\"headerlink\" title=\"定时线程池\"></a>定时线程池</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002334.png\"></p>\n<h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><p>包装请求，放入唯一id，请求内容，CompletableFuture<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002454.png\"></p>\n<h2 id=\"封装数据\"><a href=\"#封装数据\" class=\"headerlink\" title=\"封装数据\"></a>封装数据</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002728.png\"></p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p> 如果队列为空，直接return<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527003927.png\"><br> 接口的参数包装<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004024.png\"><br> 调用批量接口<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004254.png\"></p>\n<h2 id=\"测试单个调用的性能差距\"><a href=\"#测试单个调用的性能差距\" class=\"headerlink\" title=\"测试单个调用的性能差距\"></a>测试单个调用的性能差距</h2><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004551.png\"></p>\n"},{"title":"微信支付","date":"2020-05-22T13:51:42.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220522215253.png","_content":"\n# 调用流程\n> 1.调用url地址\n> 2.初始化HttpClient对象\n> 3.设置是否是https\n> 4.设置请求参数,一般为 Map<String, String>\n> 5.发起post请求\n> 6.获取结果 httpClient.getContent\n> 7.根据return_code返回结果\n\n# 扫码支付\n## http工具\n```java\npublic class HttpClient {\n    private String url;\n    private Map<String, String> param;\n    private int statusCode;\n    private String content;\n    private String xmlParam;\n    private boolean isHttps;\n\n    public boolean isHttps() {\n        return isHttps;\n    }\n\n    public void setHttps(boolean isHttps) {\n        this.isHttps = isHttps;\n    }\n\n    public String getXmlParam() {\n        return xmlParam;\n    }\n\n    public void setXmlParam(String xmlParam) {\n        this.xmlParam = xmlParam;\n    }\n\n    public HttpClient(String url, Map<String, String> param) {\n        this.url = url;\n        this.param = param;\n    }\n\n    public HttpClient(String url) {\n        this.url = url;\n    }\n\n    public void setParameter(Map<String, String> map) {\n        param = map;\n    }\n\n    public void addParameter(String key, String value) {\n        if (param == null)\n            param = new HashMap<String, String>();\n        param.put(key, value);\n    }\n\n    public void post() throws ClientProtocolException, IOException {\n        HttpPost http = new HttpPost(url);\n        setEntity(http);\n        execute(http);\n    }\n\n    public void put() throws ClientProtocolException, IOException {\n        HttpPut http = new HttpPut(url);\n        setEntity(http);\n        execute(http);\n    }\n\n    public void get() throws ClientProtocolException, IOException {\n        if (param != null) {\n            StringBuilder url = new StringBuilder(this.url);\n            boolean isFirst = true;\n            for (String key : param.keySet()) {\n                if (isFirst) {\n                    url.append(\"?\");\n                }else {\n                    url.append(\"&\");\n                }\n                url.append(key).append(\"=\").append(param.get(key));\n            }\n            this.url = url.toString();\n        }\n        HttpGet http = new HttpGet(url);\n        execute(http);\n    }\n\n    /**\n     * set http post,put param\n     */\n    private void setEntity(HttpEntityEnclosingRequestBase http) {\n        if (param != null) {\n            List<NameValuePair> nvps = new LinkedList<NameValuePair>();\n            for (String key : param.keySet()) {\n                nvps.add(new BasicNameValuePair(key, param.get(key))); // 参数\n            }\n            http.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8)); // 设置参数\n        }\n        if (xmlParam != null) {\n            http.setEntity(new StringEntity(xmlParam, Consts.UTF_8));\n        }\n    }\n\n    private void execute(HttpUriRequest http) throws ClientProtocolException,\n            IOException {\n        CloseableHttpClient httpClient = null;\n        try {\n            if (isHttps) {\n                SSLContext sslContext = new SSLContextBuilder()\n                        .loadTrustMaterial(null, new TrustStrategy() {\n                            // 信任所有\n                            @Override\n                            public boolean isTrusted(X509Certificate[] chain,\n                                                     String authType)\n                                    throws CertificateException {\n                                return true;\n                            }\n                        }).build();\n                SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(\n                        sslContext);\n                httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)\n                        .build();\n            } else {\n                httpClient = HttpClients.createDefault();\n            }\n            CloseableHttpResponse response = httpClient.execute(http);\n            try {\n                if (response != null) {\n                    if (response.getStatusLine() != null) {\n                        statusCode = response.getStatusLine().getStatusCode();\n                    }\n                    HttpEntity entity = response.getEntity();\n                    // 响应内容\n                    content = EntityUtils.toString(entity, Consts.UTF_8);\n                }\n            } finally {\n                response.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            httpClient.close();\n        }\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n\n    public String getContent() throws ParseException, IOException {\n        return content;\n    }\n}\n```\n## 生成二维码\n获取统一下单的url地址，生成二维码图片\n```java\n    @Override\n    public String getPayUrl(Map<String, String> map) {\n\n        // 统一下单接口链接\n        String url = \"https://api.mch.weixin.qq.com/pay/unifiedorder\";\n        HttpClient httpClient = new HttpClient(url);\n        httpClient.setHttps(true);\n\n        Map<String, String> param = new HashMap<>();\n        // 公众账号ID\n        param.put(\"appid\",appId);\n        // 商户号\n        param.put(\"mch_id\",partner);\n        // 随机字符串\n        param.put(\"nonce_str\", WXPayUtil.generateNonceStr());\n        // 商品描述\n        param.put(\"body\",map.get(\"body\"));\n        // 商户订单号(自己项目的订单号）\n        param.put(\"out_trade_no\",map.get(\"orderId\"));\n        // 标价金额\n        param.put(\"total_fee\",map.get(\"money\"));\n        // 终端IP\n        param.put(\"spbill_create_ip\",\"192.168.200.1\");\n        // 通知地址(异步接收微信支付结果)\n        param.put(\"notify_url\",notifyUrl);\n        // 交易类型(扫码支付）\n        param.put(\"trade_type\",\"NATIVE\");\n\n        // 附加参数，在接收的时候原样返回\n        Map<String,String> attachMap = new HashMap<>();\n        attachMap.put(\"exchange\",map.get(\"exchange\"));\n        attachMap.put(\"routingKey\",map.get(\"routingKey\"));\n        param.put(\"attach\", JSONObject.toJSONString(attachMap));\n\n        try {\n            // 将参数转换为xml格式，同时生成签名\n            String xmlParam = WXPayUtil.generateSignedXml(param, partnerkey);\n            // 设置请求参数\n            httpClient.setXmlParam(xmlParam);\n            // 发起post请求\n            httpClient.post();\n            // 获取结果\n            String content = httpClient.getContent();\n            // 解析xml格式的数据,转换成map数据\n            Map<String, String> result = WXPayUtil.xmlToMap(content);\n\n            // 返回结果\n            if (result.get(\"return_code\").equals(\"SUCCESS\") &&\n            result.get(\"result_code\").equals(\"SUCCESS\")){\n                return result.get(\"code_url\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n```\n\n\n","source":"_posts/组件/微信支付.md","raw":"---\ntitle: 微信支付\ndate: 2020-5-22 21:51:42\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220522215253.png\ntags:\n- 组件\n---\n\n# 调用流程\n> 1.调用url地址\n> 2.初始化HttpClient对象\n> 3.设置是否是https\n> 4.设置请求参数,一般为 Map<String, String>\n> 5.发起post请求\n> 6.获取结果 httpClient.getContent\n> 7.根据return_code返回结果\n\n# 扫码支付\n## http工具\n```java\npublic class HttpClient {\n    private String url;\n    private Map<String, String> param;\n    private int statusCode;\n    private String content;\n    private String xmlParam;\n    private boolean isHttps;\n\n    public boolean isHttps() {\n        return isHttps;\n    }\n\n    public void setHttps(boolean isHttps) {\n        this.isHttps = isHttps;\n    }\n\n    public String getXmlParam() {\n        return xmlParam;\n    }\n\n    public void setXmlParam(String xmlParam) {\n        this.xmlParam = xmlParam;\n    }\n\n    public HttpClient(String url, Map<String, String> param) {\n        this.url = url;\n        this.param = param;\n    }\n\n    public HttpClient(String url) {\n        this.url = url;\n    }\n\n    public void setParameter(Map<String, String> map) {\n        param = map;\n    }\n\n    public void addParameter(String key, String value) {\n        if (param == null)\n            param = new HashMap<String, String>();\n        param.put(key, value);\n    }\n\n    public void post() throws ClientProtocolException, IOException {\n        HttpPost http = new HttpPost(url);\n        setEntity(http);\n        execute(http);\n    }\n\n    public void put() throws ClientProtocolException, IOException {\n        HttpPut http = new HttpPut(url);\n        setEntity(http);\n        execute(http);\n    }\n\n    public void get() throws ClientProtocolException, IOException {\n        if (param != null) {\n            StringBuilder url = new StringBuilder(this.url);\n            boolean isFirst = true;\n            for (String key : param.keySet()) {\n                if (isFirst) {\n                    url.append(\"?\");\n                }else {\n                    url.append(\"&\");\n                }\n                url.append(key).append(\"=\").append(param.get(key));\n            }\n            this.url = url.toString();\n        }\n        HttpGet http = new HttpGet(url);\n        execute(http);\n    }\n\n    /**\n     * set http post,put param\n     */\n    private void setEntity(HttpEntityEnclosingRequestBase http) {\n        if (param != null) {\n            List<NameValuePair> nvps = new LinkedList<NameValuePair>();\n            for (String key : param.keySet()) {\n                nvps.add(new BasicNameValuePair(key, param.get(key))); // 参数\n            }\n            http.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8)); // 设置参数\n        }\n        if (xmlParam != null) {\n            http.setEntity(new StringEntity(xmlParam, Consts.UTF_8));\n        }\n    }\n\n    private void execute(HttpUriRequest http) throws ClientProtocolException,\n            IOException {\n        CloseableHttpClient httpClient = null;\n        try {\n            if (isHttps) {\n                SSLContext sslContext = new SSLContextBuilder()\n                        .loadTrustMaterial(null, new TrustStrategy() {\n                            // 信任所有\n                            @Override\n                            public boolean isTrusted(X509Certificate[] chain,\n                                                     String authType)\n                                    throws CertificateException {\n                                return true;\n                            }\n                        }).build();\n                SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(\n                        sslContext);\n                httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)\n                        .build();\n            } else {\n                httpClient = HttpClients.createDefault();\n            }\n            CloseableHttpResponse response = httpClient.execute(http);\n            try {\n                if (response != null) {\n                    if (response.getStatusLine() != null) {\n                        statusCode = response.getStatusLine().getStatusCode();\n                    }\n                    HttpEntity entity = response.getEntity();\n                    // 响应内容\n                    content = EntityUtils.toString(entity, Consts.UTF_8);\n                }\n            } finally {\n                response.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            httpClient.close();\n        }\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n\n    public String getContent() throws ParseException, IOException {\n        return content;\n    }\n}\n```\n## 生成二维码\n获取统一下单的url地址，生成二维码图片\n```java\n    @Override\n    public String getPayUrl(Map<String, String> map) {\n\n        // 统一下单接口链接\n        String url = \"https://api.mch.weixin.qq.com/pay/unifiedorder\";\n        HttpClient httpClient = new HttpClient(url);\n        httpClient.setHttps(true);\n\n        Map<String, String> param = new HashMap<>();\n        // 公众账号ID\n        param.put(\"appid\",appId);\n        // 商户号\n        param.put(\"mch_id\",partner);\n        // 随机字符串\n        param.put(\"nonce_str\", WXPayUtil.generateNonceStr());\n        // 商品描述\n        param.put(\"body\",map.get(\"body\"));\n        // 商户订单号(自己项目的订单号）\n        param.put(\"out_trade_no\",map.get(\"orderId\"));\n        // 标价金额\n        param.put(\"total_fee\",map.get(\"money\"));\n        // 终端IP\n        param.put(\"spbill_create_ip\",\"192.168.200.1\");\n        // 通知地址(异步接收微信支付结果)\n        param.put(\"notify_url\",notifyUrl);\n        // 交易类型(扫码支付）\n        param.put(\"trade_type\",\"NATIVE\");\n\n        // 附加参数，在接收的时候原样返回\n        Map<String,String> attachMap = new HashMap<>();\n        attachMap.put(\"exchange\",map.get(\"exchange\"));\n        attachMap.put(\"routingKey\",map.get(\"routingKey\"));\n        param.put(\"attach\", JSONObject.toJSONString(attachMap));\n\n        try {\n            // 将参数转换为xml格式，同时生成签名\n            String xmlParam = WXPayUtil.generateSignedXml(param, partnerkey);\n            // 设置请求参数\n            httpClient.setXmlParam(xmlParam);\n            // 发起post请求\n            httpClient.post();\n            // 获取结果\n            String content = httpClient.getContent();\n            // 解析xml格式的数据,转换成map数据\n            Map<String, String> result = WXPayUtil.xmlToMap(content);\n\n            // 返回结果\n            if (result.get(\"return_code\").equals(\"SUCCESS\") &&\n            result.get(\"result_code\").equals(\"SUCCESS\")){\n                return result.get(\"code_url\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n```\n\n\n","slug":"组件/微信支付","published":1,"updated":"2022-06-10T10:11:19.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl48ai1l4000vys2m12b3avdq","content":"<h1 id=\"调用流程\"><a href=\"#调用流程\" class=\"headerlink\" title=\"调用流程\"></a>调用流程</h1><blockquote>\n<p>1.调用url地址<br>2.初始化HttpClient对象<br>3.设置是否是https<br>4.设置请求参数,一般为 Map&lt;String, String&gt;<br>5.发起post请求<br>6.获取结果 httpClient.getContent<br>7.根据return_code返回结果</p>\n</blockquote>\n<h1 id=\"扫码支付\"><a href=\"#扫码支付\" class=\"headerlink\" title=\"扫码支付\"></a>扫码支付</h1><h2 id=\"http工具\"><a href=\"#http工具\" class=\"headerlink\" title=\"http工具\"></a>http工具</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; param;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> statusCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String xmlParam;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isHttps;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHttps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isHttps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHttps</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isHttps)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isHttps = isHttps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getXmlParam</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xmlParam;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setXmlParam</span><span class=\"params\">(String xmlParam)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.xmlParam = xmlParam;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpClient</span><span class=\"params\">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param = param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpClient</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParameter</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class=\"line\">        param = map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addParameter</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        param.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">post</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class=\"line\">        HttpPost http = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">        setEntity(http);</span><br><span class=\"line\">        execute(http);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class=\"line\">        HttpPut http = <span class=\"keyword\">new</span> HttpPut(url);</span><br><span class=\"line\">        setEntity(http);</span><br><span class=\"line\">        execute(http);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            StringBuilder url = <span class=\"keyword\">new</span> StringBuilder(<span class=\"keyword\">this</span>.url);</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isFirst = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isFirst) &#123;</span><br><span class=\"line\">                    url.append(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    url.append(<span class=\"string\">&quot;&amp;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                url.append(key).append(<span class=\"string\">&quot;=&quot;</span>).append(param.get(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.url = url.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HttpGet http = <span class=\"keyword\">new</span> HttpGet(url);</span><br><span class=\"line\">        execute(http);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set http post,put param</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setEntity</span><span class=\"params\">(HttpEntityEnclosingRequestBase http)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            List&lt;NameValuePair&gt; nvps = <span class=\"keyword\">new</span> LinkedList&lt;NameValuePair&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</span><br><span class=\"line\">                nvps.add(<span class=\"keyword\">new</span> BasicNameValuePair(key, param.get(key))); <span class=\"comment\">// 参数</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            http.setEntity(<span class=\"keyword\">new</span> UrlEncodedFormEntity(nvps, Consts.UTF_8)); <span class=\"comment\">// 设置参数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xmlParam != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            http.setEntity(<span class=\"keyword\">new</span> StringEntity(xmlParam, Consts.UTF_8));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(HttpUriRequest http)</span> <span class=\"keyword\">throws</span> ClientProtocolException,</span></span><br><span class=\"line\"><span class=\"function\">            IOException </span>&#123;</span><br><span class=\"line\">        CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isHttps) &#123;</span><br><span class=\"line\">                SSLContext sslContext = <span class=\"keyword\">new</span> SSLContextBuilder()</span><br><span class=\"line\">                        .loadTrustMaterial(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 信任所有</span></span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                     String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                                    <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;).build();</span><br><span class=\"line\">                SSLConnectionSocketFactory sslsf = <span class=\"keyword\">new</span> SSLConnectionSocketFactory(</span><br><span class=\"line\">                        sslContext);</span><br><span class=\"line\">                httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                httpClient = HttpClients.createDefault();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            CloseableHttpResponse response = httpClient.execute(http);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (response.getStatusLine() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    HttpEntity entity = response.getEntity();</span><br><span class=\"line\">                    <span class=\"comment\">// 响应内容</span></span><br><span class=\"line\">                    content = EntityUtils.toString(entity, Consts.UTF_8);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                response.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            httpClient.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStatusCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> statusCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParseException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成二维码\"><a href=\"#生成二维码\" class=\"headerlink\" title=\"生成二维码\"></a>生成二维码</h2><p>获取统一下单的url地址，生成二维码图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPayUrl</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 统一下单接口链接</span></span><br><span class=\"line\">    String url = <span class=\"string\">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>;</span><br><span class=\"line\">    HttpClient httpClient = <span class=\"keyword\">new</span> HttpClient(url);</span><br><span class=\"line\">    httpClient.setHttps(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 公众账号ID</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;appid&quot;</span>,appId);</span><br><span class=\"line\">    <span class=\"comment\">// 商户号</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;mch_id&quot;</span>,partner);</span><br><span class=\"line\">    <span class=\"comment\">// 随机字符串</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class=\"line\">    <span class=\"comment\">// 商品描述</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;body&quot;</span>,map.get(<span class=\"string\">&quot;body&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 商户订单号(自己项目的订单号）</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;out_trade_no&quot;</span>,map.get(<span class=\"string\">&quot;orderId&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 标价金额</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;total_fee&quot;</span>,map.get(<span class=\"string\">&quot;money&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 终端IP</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;spbill_create_ip&quot;</span>,<span class=\"string\">&quot;192.168.200.1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 通知地址(异步接收微信支付结果)</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;notify_url&quot;</span>,notifyUrl);</span><br><span class=\"line\">    <span class=\"comment\">// 交易类型(扫码支付）</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;trade_type&quot;</span>,<span class=\"string\">&quot;NATIVE&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 附加参数，在接收的时候原样返回</span></span><br><span class=\"line\">    Map&lt;String,String&gt; attachMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    attachMap.put(<span class=\"string\">&quot;exchange&quot;</span>,map.get(<span class=\"string\">&quot;exchange&quot;</span>));</span><br><span class=\"line\">    attachMap.put(<span class=\"string\">&quot;routingKey&quot;</span>,map.get(<span class=\"string\">&quot;routingKey&quot;</span>));</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;attach&quot;</span>, JSONObject.toJSONString(attachMap));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将参数转换为xml格式，同时生成签名</span></span><br><span class=\"line\">        String xmlParam = WXPayUtil.generateSignedXml(param, partnerkey);</span><br><span class=\"line\">        <span class=\"comment\">// 设置请求参数</span></span><br><span class=\"line\">        httpClient.setXmlParam(xmlParam);</span><br><span class=\"line\">        <span class=\"comment\">// 发起post请求</span></span><br><span class=\"line\">        httpClient.post();</span><br><span class=\"line\">        <span class=\"comment\">// 获取结果</span></span><br><span class=\"line\">        String content = httpClient.getContent();</span><br><span class=\"line\">        <span class=\"comment\">// 解析xml格式的数据,转换成map数据</span></span><br><span class=\"line\">        Map&lt;String, String&gt; result = WXPayUtil.xmlToMap(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.get(<span class=\"string\">&quot;return_code&quot;</span>).equals(<span class=\"string\">&quot;SUCCESS&quot;</span>) &amp;&amp;</span><br><span class=\"line\">        result.get(<span class=\"string\">&quot;result_code&quot;</span>).equals(<span class=\"string\">&quot;SUCCESS&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.get(<span class=\"string\">&quot;code_url&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"调用流程\"><a href=\"#调用流程\" class=\"headerlink\" title=\"调用流程\"></a>调用流程</h1><blockquote>\n<p>1.调用url地址<br>2.初始化HttpClient对象<br>3.设置是否是https<br>4.设置请求参数,一般为 Map&lt;String, String&gt;<br>5.发起post请求<br>6.获取结果 httpClient.getContent<br>7.根据return_code返回结果</p>\n</blockquote>\n<h1 id=\"扫码支付\"><a href=\"#扫码支付\" class=\"headerlink\" title=\"扫码支付\"></a>扫码支付</h1><h2 id=\"http工具\"><a href=\"#http工具\" class=\"headerlink\" title=\"http工具\"></a>http工具</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; param;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> statusCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String xmlParam;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isHttps;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHttps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isHttps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHttps</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isHttps)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isHttps = isHttps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getXmlParam</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xmlParam;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setXmlParam</span><span class=\"params\">(String xmlParam)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.xmlParam = xmlParam;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpClient</span><span class=\"params\">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param = param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpClient</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParameter</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class=\"line\">        param = map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addParameter</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        param.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">post</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class=\"line\">        HttpPost http = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">        setEntity(http);</span><br><span class=\"line\">        execute(http);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class=\"line\">        HttpPut http = <span class=\"keyword\">new</span> HttpPut(url);</span><br><span class=\"line\">        setEntity(http);</span><br><span class=\"line\">        execute(http);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            StringBuilder url = <span class=\"keyword\">new</span> StringBuilder(<span class=\"keyword\">this</span>.url);</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isFirst = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isFirst) &#123;</span><br><span class=\"line\">                    url.append(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    url.append(<span class=\"string\">&quot;&amp;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                url.append(key).append(<span class=\"string\">&quot;=&quot;</span>).append(param.get(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.url = url.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HttpGet http = <span class=\"keyword\">new</span> HttpGet(url);</span><br><span class=\"line\">        execute(http);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set http post,put param</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setEntity</span><span class=\"params\">(HttpEntityEnclosingRequestBase http)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            List&lt;NameValuePair&gt; nvps = <span class=\"keyword\">new</span> LinkedList&lt;NameValuePair&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</span><br><span class=\"line\">                nvps.add(<span class=\"keyword\">new</span> BasicNameValuePair(key, param.get(key))); <span class=\"comment\">// 参数</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            http.setEntity(<span class=\"keyword\">new</span> UrlEncodedFormEntity(nvps, Consts.UTF_8)); <span class=\"comment\">// 设置参数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xmlParam != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            http.setEntity(<span class=\"keyword\">new</span> StringEntity(xmlParam, Consts.UTF_8));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(HttpUriRequest http)</span> <span class=\"keyword\">throws</span> ClientProtocolException,</span></span><br><span class=\"line\"><span class=\"function\">            IOException </span>&#123;</span><br><span class=\"line\">        CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isHttps) &#123;</span><br><span class=\"line\">                SSLContext sslContext = <span class=\"keyword\">new</span> SSLContextBuilder()</span><br><span class=\"line\">                        .loadTrustMaterial(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 信任所有</span></span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                     String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                                    <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;).build();</span><br><span class=\"line\">                SSLConnectionSocketFactory sslsf = <span class=\"keyword\">new</span> SSLConnectionSocketFactory(</span><br><span class=\"line\">                        sslContext);</span><br><span class=\"line\">                httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                httpClient = HttpClients.createDefault();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            CloseableHttpResponse response = httpClient.execute(http);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (response.getStatusLine() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    HttpEntity entity = response.getEntity();</span><br><span class=\"line\">                    <span class=\"comment\">// 响应内容</span></span><br><span class=\"line\">                    content = EntityUtils.toString(entity, Consts.UTF_8);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                response.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            httpClient.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStatusCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> statusCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParseException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成二维码\"><a href=\"#生成二维码\" class=\"headerlink\" title=\"生成二维码\"></a>生成二维码</h2><p>获取统一下单的url地址，生成二维码图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPayUrl</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 统一下单接口链接</span></span><br><span class=\"line\">    String url = <span class=\"string\">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>;</span><br><span class=\"line\">    HttpClient httpClient = <span class=\"keyword\">new</span> HttpClient(url);</span><br><span class=\"line\">    httpClient.setHttps(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 公众账号ID</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;appid&quot;</span>,appId);</span><br><span class=\"line\">    <span class=\"comment\">// 商户号</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;mch_id&quot;</span>,partner);</span><br><span class=\"line\">    <span class=\"comment\">// 随机字符串</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class=\"line\">    <span class=\"comment\">// 商品描述</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;body&quot;</span>,map.get(<span class=\"string\">&quot;body&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 商户订单号(自己项目的订单号）</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;out_trade_no&quot;</span>,map.get(<span class=\"string\">&quot;orderId&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 标价金额</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;total_fee&quot;</span>,map.get(<span class=\"string\">&quot;money&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 终端IP</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;spbill_create_ip&quot;</span>,<span class=\"string\">&quot;192.168.200.1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 通知地址(异步接收微信支付结果)</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;notify_url&quot;</span>,notifyUrl);</span><br><span class=\"line\">    <span class=\"comment\">// 交易类型(扫码支付）</span></span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;trade_type&quot;</span>,<span class=\"string\">&quot;NATIVE&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 附加参数，在接收的时候原样返回</span></span><br><span class=\"line\">    Map&lt;String,String&gt; attachMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    attachMap.put(<span class=\"string\">&quot;exchange&quot;</span>,map.get(<span class=\"string\">&quot;exchange&quot;</span>));</span><br><span class=\"line\">    attachMap.put(<span class=\"string\">&quot;routingKey&quot;</span>,map.get(<span class=\"string\">&quot;routingKey&quot;</span>));</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;attach&quot;</span>, JSONObject.toJSONString(attachMap));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将参数转换为xml格式，同时生成签名</span></span><br><span class=\"line\">        String xmlParam = WXPayUtil.generateSignedXml(param, partnerkey);</span><br><span class=\"line\">        <span class=\"comment\">// 设置请求参数</span></span><br><span class=\"line\">        httpClient.setXmlParam(xmlParam);</span><br><span class=\"line\">        <span class=\"comment\">// 发起post请求</span></span><br><span class=\"line\">        httpClient.post();</span><br><span class=\"line\">        <span class=\"comment\">// 获取结果</span></span><br><span class=\"line\">        String content = httpClient.getContent();</span><br><span class=\"line\">        <span class=\"comment\">// 解析xml格式的数据,转换成map数据</span></span><br><span class=\"line\">        Map&lt;String, String&gt; result = WXPayUtil.xmlToMap(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.get(<span class=\"string\">&quot;return_code&quot;</span>).equals(<span class=\"string\">&quot;SUCCESS&quot;</span>) &amp;&amp;</span><br><span class=\"line\">        result.get(<span class=\"string\">&quot;result_code&quot;</span>).equals(<span class=\"string\">&quot;SUCCESS&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.get(<span class=\"string\">&quot;code_url&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"maven","date":"2022-06-10T02:34:00.000Z","cover":"/img/1.png","_content":"# 命令行跳过测试打包\n```shell\nmvn clean install -Dmaven.test.skip=true\n```\n\n# 明明有本地文件，idea却找不到包\n在idea中使用maven时常常出现配置好pom依赖后，怎么reimport都无法下载jar包。\n解决方法：在Maven窗口中打开mvn命令，输入更新不完整依赖命令：\n```shell\nmvn -U idea:idea\n```\n运行，就可以下载没有的jar包。\n\n# maven红色波浪线\n通过上面的命令jar包已经导入了成功也不能消除（reimport也不行，不过可以正常使用），可以先将带红色波浪线的依赖剪切掉，reimport一下，再将依赖粘贴回去，完美解决。\n\n","source":"_posts/开发记录/maven.md","raw":"---\ntitle: maven\ndate: 2022-6-10 10:34:00\ncover: \ntags:\n- 开发记录\n---\n# 命令行跳过测试打包\n```shell\nmvn clean install -Dmaven.test.skip=true\n```\n\n# 明明有本地文件，idea却找不到包\n在idea中使用maven时常常出现配置好pom依赖后，怎么reimport都无法下载jar包。\n解决方法：在Maven窗口中打开mvn命令，输入更新不完整依赖命令：\n```shell\nmvn -U idea:idea\n```\n运行，就可以下载没有的jar包。\n\n# maven红色波浪线\n通过上面的命令jar包已经导入了成功也不能消除（reimport也不行，不过可以正常使用），可以先将带红色波浪线的依赖剪切掉，reimport一下，再将依赖粘贴回去，完美解决。\n\n","slug":"开发记录/maven","published":1,"updated":"2022-06-20T03:18:33.928Z","_id":"cl48ai1l5000wys2mhw539sbo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"命令行跳过测试打包\"><a href=\"#命令行跳过测试打包\" class=\"headerlink\" title=\"命令行跳过测试打包\"></a>命令行跳过测试打包</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"明明有本地文件，idea却找不到包\"><a href=\"#明明有本地文件，idea却找不到包\" class=\"headerlink\" title=\"明明有本地文件，idea却找不到包\"></a>明明有本地文件，idea却找不到包</h1><p>在idea中使用maven时常常出现配置好pom依赖后，怎么reimport都无法下载jar包。<br>解决方法：在Maven窗口中打开mvn命令，输入更新不完整依赖命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -U idea:idea</span><br></pre></td></tr></table></figure>\n<p>运行，就可以下载没有的jar包。</p>\n<h1 id=\"maven红色波浪线\"><a href=\"#maven红色波浪线\" class=\"headerlink\" title=\"maven红色波浪线\"></a>maven红色波浪线</h1><p>通过上面的命令jar包已经导入了成功也不能消除（reimport也不行，不过可以正常使用），可以先将带红色波浪线的依赖剪切掉，reimport一下，再将依赖粘贴回去，完美解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"命令行跳过测试打包\"><a href=\"#命令行跳过测试打包\" class=\"headerlink\" title=\"命令行跳过测试打包\"></a>命令行跳过测试打包</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"明明有本地文件，idea却找不到包\"><a href=\"#明明有本地文件，idea却找不到包\" class=\"headerlink\" title=\"明明有本地文件，idea却找不到包\"></a>明明有本地文件，idea却找不到包</h1><p>在idea中使用maven时常常出现配置好pom依赖后，怎么reimport都无法下载jar包。<br>解决方法：在Maven窗口中打开mvn命令，输入更新不完整依赖命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -U idea:idea</span><br></pre></td></tr></table></figure>\n<p>运行，就可以下载没有的jar包。</p>\n<h1 id=\"maven红色波浪线\"><a href=\"#maven红色波浪线\" class=\"headerlink\" title=\"maven红色波浪线\"></a>maven红色波浪线</h1><p>通过上面的命令jar包已经导入了成功也不能消除（reimport也不行，不过可以正常使用），可以先将带红色波浪线的依赖剪切掉，reimport一下，再将依赖粘贴回去，完美解决。</p>\n"},{"title":"MyBatisCodeHelper-Pro","date":"2022-06-14T03:19:40.000Z","cover":"/img/4.png","_content":"\n# 配置model不被覆盖\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614114751.png)\n\n# 生成单元测试\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115240.png)\n\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115304.png)\n\n# xml生成resultMap\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/generateResultMapAndXmlGenerateJavaMethod.gif)","source":"_posts/插件/MyBatisCodeHelper-Pro.md","raw":"---\ntitle: MyBatisCodeHelper-Pro\ndate: 2022-6-14 11:19:40\ncover: \ntags:\n- IDEA插件\n---\n\n# 配置model不被覆盖\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614114751.png)\n\n# 生成单元测试\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115240.png)\n\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115304.png)\n\n# xml生成resultMap\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/generateResultMapAndXmlGenerateJavaMethod.gif)","slug":"插件/MyBatisCodeHelper-Pro","published":1,"updated":"2022-06-14T03:55:28.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4f1felf0000fg2m65imhhgh","content":"<h1 id=\"配置model不被覆盖\"><a href=\"#配置model不被覆盖\" class=\"headerlink\" title=\"配置model不被覆盖\"></a>配置model不被覆盖</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614114751.png\"></p>\n<h1 id=\"生成单元测试\"><a href=\"#生成单元测试\" class=\"headerlink\" title=\"生成单元测试\"></a>生成单元测试</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115240.png\"></p>\n<p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115304.png\"></p>\n<h1 id=\"xml生成resultMap\"><a href=\"#xml生成resultMap\" class=\"headerlink\" title=\"xml生成resultMap\"></a>xml生成resultMap</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/generateResultMapAndXmlGenerateJavaMethod.gif\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配置model不被覆盖\"><a href=\"#配置model不被覆盖\" class=\"headerlink\" title=\"配置model不被覆盖\"></a>配置model不被覆盖</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614114751.png\"></p>\n<h1 id=\"生成单元测试\"><a href=\"#生成单元测试\" class=\"headerlink\" title=\"生成单元测试\"></a>生成单元测试</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115240.png\"></p>\n<p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115304.png\"></p>\n<h1 id=\"xml生成resultMap\"><a href=\"#xml生成resultMap\" class=\"headerlink\" title=\"xml生成resultMap\"></a>xml生成resultMap</h1><p><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/generateResultMapAndXmlGenerateJavaMethod.gif\"></p>\n"},{"title":"vo对象转换插件","date":"2022-06-14T03:15:23.000Z","cover":"/img/7.png","_content":"# 使用指南\nBeanMappingKey 就是为了解决繁琐的手动对象转换而开发的，它（暂时）一共有三种用法：\n\n选中一个带有返回值和参数的方法，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey， 就能自动插入相关转换代码。\n选中一个变量，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。\n选中一个类，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。","source":"_posts/插件/vo对象转换插件.md","raw":"---\ntitle: vo对象转换插件\ndate: 2022-6-14 11:15:23\ncover: \ntags:\n- IDEA插件\n---\n# 使用指南\nBeanMappingKey 就是为了解决繁琐的手动对象转换而开发的，它（暂时）一共有三种用法：\n\n选中一个带有返回值和参数的方法，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey， 就能自动插入相关转换代码。\n选中一个变量，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。\n选中一个类，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。","slug":"插件/vo对象转换插件","published":1,"updated":"2022-06-14T03:15:52.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4f1felh0002fg2me6mo3qqb","content":"<h1 id=\"使用指南\"><a href=\"#使用指南\" class=\"headerlink\" title=\"使用指南\"></a>使用指南</h1><p>BeanMappingKey 就是为了解决繁琐的手动对象转换而开发的，它（暂时）一共有三种用法：</p>\n<p>选中一个带有返回值和参数的方法，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey， 就能自动插入相关转换代码。<br>选中一个变量，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。<br>选中一个类，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用指南\"><a href=\"#使用指南\" class=\"headerlink\" title=\"使用指南\"></a>使用指南</h1><p>BeanMappingKey 就是为了解决繁琐的手动对象转换而开发的，它（暂时）一共有三种用法：</p>\n<p>选中一个带有返回值和参数的方法，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey， 就能自动插入相关转换代码。<br>选中一个变量，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。<br>选中一个类，使用快捷键 Ctrl+M 或者右键点击 BeanMappingKey，就能自动生成转换代码到粘贴板。</p>\n"},{"title":"好看的图标","date":"2022-06-14T03:18:26.000Z","cover":"/img/9.png","_content":"Extra ToolWindow Colorful Icons\n","source":"_posts/插件/好看的图标.md","raw":"---\ntitle: 好看的图标\ndate: 2022-6-14 11:18:26\ncover: \ntags:\n- IDEA插件 \n---\nExtra ToolWindow Colorful Icons\n","slug":"插件/好看的图标","published":1,"updated":"2022-06-14T03:18:40.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4f1feln0004fg2m19z80jmg","content":"<p>Extra ToolWindow Colorful Icons</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Extra ToolWindow Colorful Icons</p>\n"},{"title":"阿里云智能编码插件（Alibaba Cloud AI Coding Assistant）","date":"2022-06-14T02:51:51.000Z","cover":"/img/3.png","_content":"# 快捷搜索\nctrl+shift+s 搜索指定API。\n## 多api搜索\n默认只能搜索一个标签，另外的功能只能在输入框输入\n\n# 代码智能补全\n","source":"_posts/插件/阿里云智能编码插件.md","raw":"---\ntitle: 阿里云智能编码插件（Alibaba Cloud AI Coding Assistant）\ndate: 2022-6-14 10:51:51\ncover: \ntags:\n- IDEA插件\n---\n# 快捷搜索\nctrl+shift+s 搜索指定API。\n## 多api搜索\n默认只能搜索一个标签，另外的功能只能在输入框输入\n\n# 代码智能补全\n","slug":"插件/阿里云智能编码插件","published":1,"updated":"2022-06-14T02:57:14.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4f1felq0005fg2mc7gq2v7c","content":"<h1 id=\"快捷搜索\"><a href=\"#快捷搜索\" class=\"headerlink\" title=\"快捷搜索\"></a>快捷搜索</h1><p>ctrl+shift+s 搜索指定API。</p>\n<h2 id=\"多api搜索\"><a href=\"#多api搜索\" class=\"headerlink\" title=\"多api搜索\"></a>多api搜索</h2><p>默认只能搜索一个标签，另外的功能只能在输入框输入</p>\n<h1 id=\"代码智能补全\"><a href=\"#代码智能补全\" class=\"headerlink\" title=\"代码智能补全\"></a>代码智能补全</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"快捷搜索\"><a href=\"#快捷搜索\" class=\"headerlink\" title=\"快捷搜索\"></a>快捷搜索</h1><p>ctrl+shift+s 搜索指定API。</p>\n<h2 id=\"多api搜索\"><a href=\"#多api搜索\" class=\"headerlink\" title=\"多api搜索\"></a>多api搜索</h2><p>默认只能搜索一个标签，另外的功能只能在输入框输入</p>\n<h1 id=\"代码智能补全\"><a href=\"#代码智能补全\" class=\"headerlink\" title=\"代码智能补全\"></a>代码智能补全</h1>"},{"title":"资金清算-商户下拉框查询","date":"2022-06-15T03:31:40.000Z","cover":"/img/1.png","_content":"# 商户账号网页\nhttps://fap-sit.inwesure.com/$define/liquidate_account\n\n账户api\n\n```\nhttp://wesure-accounting-liquidate-server-http/liquidate/accountInfo/list\n```\n\n业务类型\n\n```\nhttp://wesure-accounting-engin-server-http/public/base/order/type/config/getOrderTypeCode\n```\n\n```java\n       JSONArray jsonArray = new JSONArray();\n        Set<String> businessTypeCodes=new HashSet<>();\n        for(BaseOrderTypeConfig config:result){\n            if(businessTypeCodes.add(config.getBusinessTypeCode())){\n                JSONObject jsonObj = new JSONObject();\n                jsonObj.put(\"text\", config.getBusinessTypeName());\n                jsonObj.put(\"value\", config.getBusinessTypeCode());\n                jsonArray.add(jsonObj);\n            }\n        }\n```\n\n\n\nwesure-accounting-liquidate-server-http/liquidate/public/get/account\n\nwesure-accounting-liquidate-server-http/liquidate/public/get/biz/tag\n\n```json\n{\n  \"pageNum\": 1,\n  \"pageSize\": 10,\n  \"order\": null,\n  \"sort\": null,\n  \"filter\": {\n    \"summary\": {\n      \"value\": \"1\"\n    }\n  }\n}\n```\n\n清算批次\n\n```java\n        ComplexResult check = FluentValidator.checkAll()\n                .on(liquidateBatch.getSummary(), new NotNullValidator(\"摘要\"))\n                .doValidate()\n                .result(ResultCollectors.toComplex());\n        if (!check.isSuccess()){\n            return new BaseResult(BaseMessage.INVALID_PARAMETER.getCode(),\n                    check.getErrors().get(0).toString(),\n                    null);\n        }\n```\n\n\n\n```\nWofCustomAppListRequestVo<FapQueryForm> form\n```\n\naccountId 为空\n\n```js\n    // 按条件导入fap\n    handleSearchFap (selection, action, cb) {\n      // let url = api.interactiveFapBill\n      this.$confirm('是否按搜索结果导入', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        alert('1')\n      })\n    },\n```\n\n批量导入\n\nhttps://fap-sit.inwesure.com/liquidate/fap/inter/batch/bill/interactive\n\n```json\n{\n  \"data\": [\n    \"PAPAJK202206082802000005BI\",\n    \"PAHTIC202206082802000003FU\"\n  ]\n}\n```\n\n批量重新导入\n\nhttps://fap-sit.inwesure.com/liquidat e/fap/inter/batch/bill/interactive\n\n```sql\n{\n  \"data\": [\n    \"PAPAJK202206082802000005BI\",\n    \"PAHTIC202206082802000003FU\"\n  ],\n  \"reImportFlag\": \"Y\"\n}\n```\n\n```\n.then(() => {\n  this.$http\n    .post(api.interactiveFapBillByParam, { ...param })\n    .then(res => {\n      if (res.code === 0) {\n        this.$message.success(res.message)\n        this.refleshCb()\n      } else {\n        this.$message.warning(res.message)\n      }\n    })\n    .finally(() => {\n      this.showIdentifyDialog = false\n    })\n})\n```\n\n```\n    searchData: {}\n  }\n},\nmethods: {\n  filterConfig (data) {\n    this.searchData = data\n    return data\n  },\n```\n","source":"_posts/日志/资金清算-商户下拉框查询.md","raw":"---\ntitle: 资金清算-商户下拉框查询\ndate: 2022-6-15 11:31:40\ncover: \ntags:\n- 日志\n---\n# 商户账号网页\nhttps://fap-sit.inwesure.com/$define/liquidate_account\n\n账户api\n\n```\nhttp://wesure-accounting-liquidate-server-http/liquidate/accountInfo/list\n```\n\n业务类型\n\n```\nhttp://wesure-accounting-engin-server-http/public/base/order/type/config/getOrderTypeCode\n```\n\n```java\n       JSONArray jsonArray = new JSONArray();\n        Set<String> businessTypeCodes=new HashSet<>();\n        for(BaseOrderTypeConfig config:result){\n            if(businessTypeCodes.add(config.getBusinessTypeCode())){\n                JSONObject jsonObj = new JSONObject();\n                jsonObj.put(\"text\", config.getBusinessTypeName());\n                jsonObj.put(\"value\", config.getBusinessTypeCode());\n                jsonArray.add(jsonObj);\n            }\n        }\n```\n\n\n\nwesure-accounting-liquidate-server-http/liquidate/public/get/account\n\nwesure-accounting-liquidate-server-http/liquidate/public/get/biz/tag\n\n```json\n{\n  \"pageNum\": 1,\n  \"pageSize\": 10,\n  \"order\": null,\n  \"sort\": null,\n  \"filter\": {\n    \"summary\": {\n      \"value\": \"1\"\n    }\n  }\n}\n```\n\n清算批次\n\n```java\n        ComplexResult check = FluentValidator.checkAll()\n                .on(liquidateBatch.getSummary(), new NotNullValidator(\"摘要\"))\n                .doValidate()\n                .result(ResultCollectors.toComplex());\n        if (!check.isSuccess()){\n            return new BaseResult(BaseMessage.INVALID_PARAMETER.getCode(),\n                    check.getErrors().get(0).toString(),\n                    null);\n        }\n```\n\n\n\n```\nWofCustomAppListRequestVo<FapQueryForm> form\n```\n\naccountId 为空\n\n```js\n    // 按条件导入fap\n    handleSearchFap (selection, action, cb) {\n      // let url = api.interactiveFapBill\n      this.$confirm('是否按搜索结果导入', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        alert('1')\n      })\n    },\n```\n\n批量导入\n\nhttps://fap-sit.inwesure.com/liquidate/fap/inter/batch/bill/interactive\n\n```json\n{\n  \"data\": [\n    \"PAPAJK202206082802000005BI\",\n    \"PAHTIC202206082802000003FU\"\n  ]\n}\n```\n\n批量重新导入\n\nhttps://fap-sit.inwesure.com/liquidat e/fap/inter/batch/bill/interactive\n\n```sql\n{\n  \"data\": [\n    \"PAPAJK202206082802000005BI\",\n    \"PAHTIC202206082802000003FU\"\n  ],\n  \"reImportFlag\": \"Y\"\n}\n```\n\n```\n.then(() => {\n  this.$http\n    .post(api.interactiveFapBillByParam, { ...param })\n    .then(res => {\n      if (res.code === 0) {\n        this.$message.success(res.message)\n        this.refleshCb()\n      } else {\n        this.$message.warning(res.message)\n      }\n    })\n    .finally(() => {\n      this.showIdentifyDialog = false\n    })\n})\n```\n\n```\n    searchData: {}\n  }\n},\nmethods: {\n  filterConfig (data) {\n    this.searchData = data\n    return data\n  },\n```\n","slug":"日志/资金清算-商户下拉框查询","published":1,"updated":"2022-06-17T06:31:37.851Z","_id":"cl4f7mfer0000vo2mez9cc6ig","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"商户账号网页\"><a href=\"#商户账号网页\" class=\"headerlink\" title=\"商户账号网页\"></a>商户账号网页</h1><p><a href=\"https://fap-sit.inwesure.com/$define/liquidate_account\">https://fap-sit.inwesure.com/$define/liquidate_account</a></p>\n<p>账户api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://wesure-accounting-liquidate-server-http/liquidate/accountInfo/list</span><br></pre></td></tr></table></figure>\n\n<p>业务类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://wesure-accounting-engin-server-http/public/base/order/type/config/getOrderTypeCode</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\"> Set&lt;String&gt; businessTypeCodes=<span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(BaseOrderTypeConfig config:result)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(businessTypeCodes.add(config.getBusinessTypeCode()))&#123;</span><br><span class=\"line\">         JSONObject jsonObj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">         jsonObj.put(<span class=\"string\">&quot;text&quot;</span>, config.getBusinessTypeName());</span><br><span class=\"line\">         jsonObj.put(<span class=\"string\">&quot;value&quot;</span>, config.getBusinessTypeCode());</span><br><span class=\"line\">         jsonArray.add(jsonObj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>wesure-accounting-liquidate-server-http/liquidate/public/get/account</p>\n<p>wesure-accounting-liquidate-server-http/liquidate/public/get/biz/tag</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;pageNum&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;pageSize&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;order&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;filter&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;summary&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;value&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>清算批次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ComplexResult check = FluentValidator.checkAll()</span><br><span class=\"line\">        .on(liquidateBatch.getSummary(), <span class=\"keyword\">new</span> NotNullValidator(<span class=\"string\">&quot;摘要&quot;</span>))</span><br><span class=\"line\">        .doValidate()</span><br><span class=\"line\">        .result(ResultCollectors.toComplex());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!check.isSuccess())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.INVALID_PARAMETER.getCode(),</span><br><span class=\"line\">            check.getErrors().get(<span class=\"number\">0</span>).toString(),</span><br><span class=\"line\">            <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WofCustomAppListRequestVo&lt;FapQueryForm&gt; form</span><br></pre></td></tr></table></figure>\n\n<p>accountId 为空</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按条件导入fap</span></span><br><span class=\"line\">handleSearchFap (selection, action, cb) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// let url = api.interactiveFapBill</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$confirm(<span class=\"string\">&#x27;是否按搜索结果导入&#x27;</span>, <span class=\"string\">&#x27;提示&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">confirmButtonText</span>: <span class=\"string\">&#x27;确定&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">cancelButtonText</span>: <span class=\"string\">&#x27;取消&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;warning&#x27;</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>批量导入</p>\n<p><a href=\"https://fap-sit.inwesure.com/liquidate/fap/inter/batch/bill/interactive\">https://fap-sit.inwesure.com/liquidate/fap/inter/batch/bill/interactive</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;PAPAJK202206082802000005BI&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;PAHTIC202206082802000003FU&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>批量重新导入</p>\n<p><a href=\"https://fap-sit.inwesure.com/liquidat\">https://fap-sit.inwesure.com/liquidat</a> e/fap/inter/batch/bill/interactive</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;data&quot;: [</span><br><span class=\"line\">    &quot;PAPAJK202206082802000005BI&quot;,</span><br><span class=\"line\">    &quot;PAHTIC202206082802000003FU&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;reImportFlag&quot;: &quot;Y&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(() =&gt; &#123;</span><br><span class=\"line\">  this.$http</span><br><span class=\"line\">    .post(api.interactiveFapBillByParam, &#123; ...param &#125;)</span><br><span class=\"line\">    .then(res =&gt; &#123;</span><br><span class=\"line\">      if (res.code === 0) &#123;</span><br><span class=\"line\">        this.$message.success(res.message)</span><br><span class=\"line\">        this.refleshCb()</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.$message.warning(res.message)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(() =&gt; &#123;</span><br><span class=\"line\">      this.showIdentifyDialog = false</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    searchData: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  filterConfig (data) &#123;</span><br><span class=\"line\">    this.searchData = data</span><br><span class=\"line\">    return data</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"商户账号网页\"><a href=\"#商户账号网页\" class=\"headerlink\" title=\"商户账号网页\"></a>商户账号网页</h1><p><a href=\"https://fap-sit.inwesure.com/$define/liquidate_account\">https://fap-sit.inwesure.com/$define/liquidate_account</a></p>\n<p>账户api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://wesure-accounting-liquidate-server-http/liquidate/accountInfo/list</span><br></pre></td></tr></table></figure>\n\n<p>业务类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://wesure-accounting-engin-server-http/public/base/order/type/config/getOrderTypeCode</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\"> Set&lt;String&gt; businessTypeCodes=<span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(BaseOrderTypeConfig config:result)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(businessTypeCodes.add(config.getBusinessTypeCode()))&#123;</span><br><span class=\"line\">         JSONObject jsonObj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">         jsonObj.put(<span class=\"string\">&quot;text&quot;</span>, config.getBusinessTypeName());</span><br><span class=\"line\">         jsonObj.put(<span class=\"string\">&quot;value&quot;</span>, config.getBusinessTypeCode());</span><br><span class=\"line\">         jsonArray.add(jsonObj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>wesure-accounting-liquidate-server-http/liquidate/public/get/account</p>\n<p>wesure-accounting-liquidate-server-http/liquidate/public/get/biz/tag</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;pageNum&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;pageSize&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;order&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;filter&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;summary&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;value&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>清算批次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ComplexResult check = FluentValidator.checkAll()</span><br><span class=\"line\">        .on(liquidateBatch.getSummary(), <span class=\"keyword\">new</span> NotNullValidator(<span class=\"string\">&quot;摘要&quot;</span>))</span><br><span class=\"line\">        .doValidate()</span><br><span class=\"line\">        .result(ResultCollectors.toComplex());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!check.isSuccess())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.INVALID_PARAMETER.getCode(),</span><br><span class=\"line\">            check.getErrors().get(<span class=\"number\">0</span>).toString(),</span><br><span class=\"line\">            <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WofCustomAppListRequestVo&lt;FapQueryForm&gt; form</span><br></pre></td></tr></table></figure>\n\n<p>accountId 为空</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按条件导入fap</span></span><br><span class=\"line\">handleSearchFap (selection, action, cb) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// let url = api.interactiveFapBill</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$confirm(<span class=\"string\">&#x27;是否按搜索结果导入&#x27;</span>, <span class=\"string\">&#x27;提示&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">confirmButtonText</span>: <span class=\"string\">&#x27;确定&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">cancelButtonText</span>: <span class=\"string\">&#x27;取消&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;warning&#x27;</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>批量导入</p>\n<p><a href=\"https://fap-sit.inwesure.com/liquidate/fap/inter/batch/bill/interactive\">https://fap-sit.inwesure.com/liquidate/fap/inter/batch/bill/interactive</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;PAPAJK202206082802000005BI&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;PAHTIC202206082802000003FU&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>批量重新导入</p>\n<p><a href=\"https://fap-sit.inwesure.com/liquidat\">https://fap-sit.inwesure.com/liquidat</a> e/fap/inter/batch/bill/interactive</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;data&quot;: [</span><br><span class=\"line\">    &quot;PAPAJK202206082802000005BI&quot;,</span><br><span class=\"line\">    &quot;PAHTIC202206082802000003FU&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;reImportFlag&quot;: &quot;Y&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(() =&gt; &#123;</span><br><span class=\"line\">  this.$http</span><br><span class=\"line\">    .post(api.interactiveFapBillByParam, &#123; ...param &#125;)</span><br><span class=\"line\">    .then(res =&gt; &#123;</span><br><span class=\"line\">      if (res.code === 0) &#123;</span><br><span class=\"line\">        this.$message.success(res.message)</span><br><span class=\"line\">        this.refleshCb()</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.$message.warning(res.message)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(() =&gt; &#123;</span><br><span class=\"line\">      this.showIdentifyDialog = false</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    searchData: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  filterConfig (data) &#123;</span><br><span class=\"line\">    this.searchData = data</span><br><span class=\"line\">    return data</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n"},{"title":"代码片段","date":"2022-06-20T02:36:39.000Z","cover":"/img/3.png","_content":"\n# 文件后缀名校验\n```java\n        if (!\"xls,xlsx\".contains(file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(\".\") + 1, file.getOriginalFilename().length()))) {\n            return new BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), \"只支持excel附件上传\", null);\n        }\n```\n# 文件大小限制\n```java\n //限制文件300K\n        if (file.getSize() > 300 * 1024) {\n            return new BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), \"文件大小不得超过300K\", null);\n        }\n```\n# 集合判断\n```java\n        if (CollectionUtils.isNotEmpty()) {\n```\n# 返回json,用于提供给远程api接口\n```java\n        JSONArray jsonArray = new JSONArray();\n        for (LiquidateAccountInfo accountInfo : list) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"text\", accountInfo.getAccountName());\n            jsonObject.put(\"value\", accountInfo.getAccountId());\n            jsonArray.add(jsonObject);\n        }\n        return new BaseResult(BaseMessage.SUCCESS, jsonArray);\n```\n\n# 详情\n```java\n    @ApiOperation(value = \"批次详情\", notes = \"权限码[liquidate:batch:order:view]\")\n    //@PermissionAnnotation(check = true, functionCodes = {\"liquidate:batch:order:view\"})\n    @PostMapping(value = \"/view\")\n    @ResponseBody\n    public BaseResult view(@RequestBody JSONObject request) {\n        LiquidateBatchExample example = new LiquidateBatchExample();\n        LiquidateBatchExample.Criteria criteria = example.createCriteria();\n        if (!request.containsKey(\"id\") || request.getLong(\"id\") == null) {\n            return new BaseResult<>(BaseMessage.INVALID_PARAMETER);\n        }\n        criteria.andIdEqualTo(request.getLongValue(\"id\"));\n\n        List<LiquidateBatch> list = liquidateBatchService.selectByExample(example);\n        if (list != null && list.size() > 0) {\n            return new BaseResult<>(BaseMessage.SUCCESS, list.get(0));\n        } else {\n            return new BaseResult<>(BaseMessage.DATA_NOT_EXIST);\n        }\n    }\n```\n\n# 逻辑删除\n```java\n    @ApiOperation(value = \"删除批次\", notes = \"权限码[liquidate:batch:order:del]\")\n    //@PermissionAnnotation(check = true, functionCodes = {\"liquidate:batch:order:del\"})\n    @PostMapping(value = \"/delete\")\n    @ResponseBody\n    public BaseResult delete(@RequestBody JSONObject request) {\n        LiquidateBatchExample example = new LiquidateBatchExample();\n        LiquidateBatchExample.Criteria criteria = example.createCriteria();\n        if (!request.containsKey(\"id\") || request.getLong(\"id\") == null) {\n            return new BaseResult<>(BaseMessage.INVALID_PARAMETER);\n        }\n        criteria.andIdEqualTo(request.getLongValue(\"id\"));\n\n        List<LiquidateBatch> list = liquidateBatchService.selectByExample(example);\n        if (list != null && list.size() > 0) {\n            LiquidateBatch batch = list.get(0);\n            batch.setDeleteFlag(DeleteFlag.DISABLE.getIndex());\n            liquidateBatchService.updateByPrimaryKeySelective(batch);\n        }\n\n        return new BaseResult();\n    }\n```\n\n# json对象解析(返回分页结果)\n## 旧\n```java\n    public BaseResult list(@RequestBody JSONObject request) throws Exception{\n        return liquidateBatchService.list(request);\n    }\n```\n```java\n    @Override\n    public BaseResult list(JSONObject request) throws Exception {\n        LiquidateBatchExample example = createQueryExample(request);\n        int pageNum = request.get(\"pageNum\") != null ? request.getInteger(\"pageNum\") : 1;\n        int pageSize = request.get(\"pageSize\") != null ? request.getInteger(\"pageSize\") : 10;\n        long count = getMapper().countByExample(example);\n        List<LiquidateBatch> list = selectByExampleForOffsetPage(example, (pageNum - 1) * pageSize, pageSize);\n        JSONObject resultData = new JSONObject();\n        resultData.put(\"data\", list);\n        resultData.put(\"pageNum\", pageNum);\n        resultData.put(\"totalPage\", (count % pageSize == 0) ? (count / pageSize) : (count / pageSize + 1));\n        resultData.put(\"totalCount\", count);\n        return new BaseResult<>(BaseMessage.SUCCESS, resultData);\n    }\n```\n## 新\n\n```java\n@Data\npublic class WofCustomAppListRequestVo<T> {\n    private int pageNum;\n    private int pageSize;\n    private String order;\n    private int sort;\n    private T filter;\n\n\n    //解决自定义表单value问题\n    public WofCustomAppListRequestVo<T> resolveParam(JSONObject obj, Class<T> t) {\n        if (null != obj.get(\"pageNum\")) {\n            this.setPageNum(obj.getInteger(\"pageNum\"));\n        }\n        if (null != obj.get(\"pageSize\")) {\n            this.setPageSize(obj.getInteger(\"pageSize\"));\n        }\n        if (null != obj.get(\"order\")) {\n            this.setOrder(obj.getString(\"order\"));\n        }\n        if (null != obj.get(\"sort\")) {\n            this.setSort(obj.getInteger(\"sort\"));\n        }\n        JSONObject filterJson = obj.getJSONObject(\"filter\");\n        T excludeValueObj=null;\n        if (null != obj.get(\"filter\")) {\n            JSONObject excludeValueJSON = new JSONObject();\n            filterJson.forEach((k, v) -> {\n                JSONObject valueJson = new JSONObject((Map)v);\n                //时间段筛选\n                if(null!=valueJson.get(\"type\")){\n                    if(\"daterange\".equals(valueJson.getString(\"type\"))){\n                        String from=valueJson.getString(\"from\");\n                        String to=valueJson.getString(\"to\");\n                        if(null!=from){\n                            excludeValueJSON.put(k+\"Begin\",valueJson.getString(\"from\"));\n                        }\n                        if(null!=to){\n                            excludeValueJSON.put(k+\"End\",valueJson.getString(\"to\"));\n                        }\n                    }\n                    if(\"array\".equals(valueJson.getString(\"type\"))){\n                        excludeValueJSON.put(k, valueJson.getJSONArray(\"value\"));\n                    }\n                }else {\n                    excludeValueJSON.put(k, valueJson.get(\"value\"));\n                }\n\n            });\n            excludeValueObj=JSONObject.toJavaObject(excludeValueJSON, t);\n        }\n        this.setFilter(excludeValueObj);\n        return this;\n    }\n}\n```\n\n```java\n    public BaseResult list(@RequestBody JSONObject jsonObject) {\n        WofCustomAppListRequestVo vo = new WofCustomAppListRequestVo();\n        vo.resolveParam(jsonObject, LiquidateAccountInfo.class);\n        return liquidateAccountInfoService.list(vo);\n```\n\n```java\n    public BaseResult list(WofCustomAppListRequestVo<LiquidateAccountInfo> request) {\n        LiquidateAccountInfoExample example = new LiquidateAccountInfoExample();\n        LiquidateAccountInfoExample.Criteria criteria = example.createCriteria();\n        criteria.andDeleteFlagEqualTo(DeleteFlag.ENABLE.getIndex());\n        if (null != request.getFilter()) {\n            if (StringUtils.isNotBlank(request.getFilter().getAccountId())) {\n                criteria.andAccountIdLike(\"%\" +request.getFilter().getAccountId()+ \"%\");\n            }\n        }\n        int count = countByExample(example);\n        int pageNum = request.getPageNum();\n        int pageSize = request.getPageSize();\n        List<LiquidateAccountInfo> list = selectByExampleForOffsetPage(example, (pageNum - 1) * pageSize, pageSize);\n        BasePageResult basePageResult = new BasePageResult(list, (long) count, pageSize, pageNum);\n        BaseResult baseResult = new BaseResult();\n        baseResult.setResult(basePageResult);\n        return baseResult;\n    }\n```\n\n\n","source":"_posts/日志/代码片段.md","raw":"---\ntitle: 代码片段\ndate: 2022-6-20 10:36:39\ncover: \ntags:\n- 代码片段\n---\n\n# 文件后缀名校验\n```java\n        if (!\"xls,xlsx\".contains(file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(\".\") + 1, file.getOriginalFilename().length()))) {\n            return new BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), \"只支持excel附件上传\", null);\n        }\n```\n# 文件大小限制\n```java\n //限制文件300K\n        if (file.getSize() > 300 * 1024) {\n            return new BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), \"文件大小不得超过300K\", null);\n        }\n```\n# 集合判断\n```java\n        if (CollectionUtils.isNotEmpty()) {\n```\n# 返回json,用于提供给远程api接口\n```java\n        JSONArray jsonArray = new JSONArray();\n        for (LiquidateAccountInfo accountInfo : list) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"text\", accountInfo.getAccountName());\n            jsonObject.put(\"value\", accountInfo.getAccountId());\n            jsonArray.add(jsonObject);\n        }\n        return new BaseResult(BaseMessage.SUCCESS, jsonArray);\n```\n\n# 详情\n```java\n    @ApiOperation(value = \"批次详情\", notes = \"权限码[liquidate:batch:order:view]\")\n    //@PermissionAnnotation(check = true, functionCodes = {\"liquidate:batch:order:view\"})\n    @PostMapping(value = \"/view\")\n    @ResponseBody\n    public BaseResult view(@RequestBody JSONObject request) {\n        LiquidateBatchExample example = new LiquidateBatchExample();\n        LiquidateBatchExample.Criteria criteria = example.createCriteria();\n        if (!request.containsKey(\"id\") || request.getLong(\"id\") == null) {\n            return new BaseResult<>(BaseMessage.INVALID_PARAMETER);\n        }\n        criteria.andIdEqualTo(request.getLongValue(\"id\"));\n\n        List<LiquidateBatch> list = liquidateBatchService.selectByExample(example);\n        if (list != null && list.size() > 0) {\n            return new BaseResult<>(BaseMessage.SUCCESS, list.get(0));\n        } else {\n            return new BaseResult<>(BaseMessage.DATA_NOT_EXIST);\n        }\n    }\n```\n\n# 逻辑删除\n```java\n    @ApiOperation(value = \"删除批次\", notes = \"权限码[liquidate:batch:order:del]\")\n    //@PermissionAnnotation(check = true, functionCodes = {\"liquidate:batch:order:del\"})\n    @PostMapping(value = \"/delete\")\n    @ResponseBody\n    public BaseResult delete(@RequestBody JSONObject request) {\n        LiquidateBatchExample example = new LiquidateBatchExample();\n        LiquidateBatchExample.Criteria criteria = example.createCriteria();\n        if (!request.containsKey(\"id\") || request.getLong(\"id\") == null) {\n            return new BaseResult<>(BaseMessage.INVALID_PARAMETER);\n        }\n        criteria.andIdEqualTo(request.getLongValue(\"id\"));\n\n        List<LiquidateBatch> list = liquidateBatchService.selectByExample(example);\n        if (list != null && list.size() > 0) {\n            LiquidateBatch batch = list.get(0);\n            batch.setDeleteFlag(DeleteFlag.DISABLE.getIndex());\n            liquidateBatchService.updateByPrimaryKeySelective(batch);\n        }\n\n        return new BaseResult();\n    }\n```\n\n# json对象解析(返回分页结果)\n## 旧\n```java\n    public BaseResult list(@RequestBody JSONObject request) throws Exception{\n        return liquidateBatchService.list(request);\n    }\n```\n```java\n    @Override\n    public BaseResult list(JSONObject request) throws Exception {\n        LiquidateBatchExample example = createQueryExample(request);\n        int pageNum = request.get(\"pageNum\") != null ? request.getInteger(\"pageNum\") : 1;\n        int pageSize = request.get(\"pageSize\") != null ? request.getInteger(\"pageSize\") : 10;\n        long count = getMapper().countByExample(example);\n        List<LiquidateBatch> list = selectByExampleForOffsetPage(example, (pageNum - 1) * pageSize, pageSize);\n        JSONObject resultData = new JSONObject();\n        resultData.put(\"data\", list);\n        resultData.put(\"pageNum\", pageNum);\n        resultData.put(\"totalPage\", (count % pageSize == 0) ? (count / pageSize) : (count / pageSize + 1));\n        resultData.put(\"totalCount\", count);\n        return new BaseResult<>(BaseMessage.SUCCESS, resultData);\n    }\n```\n## 新\n\n```java\n@Data\npublic class WofCustomAppListRequestVo<T> {\n    private int pageNum;\n    private int pageSize;\n    private String order;\n    private int sort;\n    private T filter;\n\n\n    //解决自定义表单value问题\n    public WofCustomAppListRequestVo<T> resolveParam(JSONObject obj, Class<T> t) {\n        if (null != obj.get(\"pageNum\")) {\n            this.setPageNum(obj.getInteger(\"pageNum\"));\n        }\n        if (null != obj.get(\"pageSize\")) {\n            this.setPageSize(obj.getInteger(\"pageSize\"));\n        }\n        if (null != obj.get(\"order\")) {\n            this.setOrder(obj.getString(\"order\"));\n        }\n        if (null != obj.get(\"sort\")) {\n            this.setSort(obj.getInteger(\"sort\"));\n        }\n        JSONObject filterJson = obj.getJSONObject(\"filter\");\n        T excludeValueObj=null;\n        if (null != obj.get(\"filter\")) {\n            JSONObject excludeValueJSON = new JSONObject();\n            filterJson.forEach((k, v) -> {\n                JSONObject valueJson = new JSONObject((Map)v);\n                //时间段筛选\n                if(null!=valueJson.get(\"type\")){\n                    if(\"daterange\".equals(valueJson.getString(\"type\"))){\n                        String from=valueJson.getString(\"from\");\n                        String to=valueJson.getString(\"to\");\n                        if(null!=from){\n                            excludeValueJSON.put(k+\"Begin\",valueJson.getString(\"from\"));\n                        }\n                        if(null!=to){\n                            excludeValueJSON.put(k+\"End\",valueJson.getString(\"to\"));\n                        }\n                    }\n                    if(\"array\".equals(valueJson.getString(\"type\"))){\n                        excludeValueJSON.put(k, valueJson.getJSONArray(\"value\"));\n                    }\n                }else {\n                    excludeValueJSON.put(k, valueJson.get(\"value\"));\n                }\n\n            });\n            excludeValueObj=JSONObject.toJavaObject(excludeValueJSON, t);\n        }\n        this.setFilter(excludeValueObj);\n        return this;\n    }\n}\n```\n\n```java\n    public BaseResult list(@RequestBody JSONObject jsonObject) {\n        WofCustomAppListRequestVo vo = new WofCustomAppListRequestVo();\n        vo.resolveParam(jsonObject, LiquidateAccountInfo.class);\n        return liquidateAccountInfoService.list(vo);\n```\n\n```java\n    public BaseResult list(WofCustomAppListRequestVo<LiquidateAccountInfo> request) {\n        LiquidateAccountInfoExample example = new LiquidateAccountInfoExample();\n        LiquidateAccountInfoExample.Criteria criteria = example.createCriteria();\n        criteria.andDeleteFlagEqualTo(DeleteFlag.ENABLE.getIndex());\n        if (null != request.getFilter()) {\n            if (StringUtils.isNotBlank(request.getFilter().getAccountId())) {\n                criteria.andAccountIdLike(\"%\" +request.getFilter().getAccountId()+ \"%\");\n            }\n        }\n        int count = countByExample(example);\n        int pageNum = request.getPageNum();\n        int pageSize = request.getPageSize();\n        List<LiquidateAccountInfo> list = selectByExampleForOffsetPage(example, (pageNum - 1) * pageSize, pageSize);\n        BasePageResult basePageResult = new BasePageResult(list, (long) count, pageSize, pageNum);\n        BaseResult baseResult = new BaseResult();\n        baseResult.setResult(basePageResult);\n        return baseResult;\n    }\n```\n\n\n","slug":"日志/代码片段","published":1,"updated":"2022-06-20T07:20:54.960Z","_id":"cl4m4maug0000iw2meu7b1ioh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"文件后缀名校验\"><a href=\"#文件后缀名校验\" class=\"headerlink\" title=\"文件后缀名校验\"></a>文件后缀名校验</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"string\">&quot;xls,xlsx&quot;</span>.contains(file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>, file.getOriginalFilename().length()))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), <span class=\"string\">&quot;只支持excel附件上传&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件大小限制\"><a href=\"#文件大小限制\" class=\"headerlink\" title=\"文件大小限制\"></a>文件大小限制</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//限制文件300K</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (file.getSize() &gt; <span class=\"number\">300</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), <span class=\"string\">&quot;文件大小不得超过300K&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"集合判断\"><a href=\"#集合判断\" class=\"headerlink\" title=\"集合判断\"></a>集合判断</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty()) &#123;</span><br></pre></td></tr></table></figure>\n<h1 id=\"返回json-用于提供给远程api接口\"><a href=\"#返回json-用于提供给远程api接口\" class=\"headerlink\" title=\"返回json,用于提供给远程api接口\"></a>返回json,用于提供给远程api接口</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (LiquidateAccountInfo accountInfo : list) &#123;</span><br><span class=\"line\">    JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    jsonObject.put(<span class=\"string\">&quot;text&quot;</span>, accountInfo.getAccountName());</span><br><span class=\"line\">    jsonObject.put(<span class=\"string\">&quot;value&quot;</span>, accountInfo.getAccountId());</span><br><span class=\"line\">    jsonArray.add(jsonObject);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.SUCCESS, jsonArray);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;批次详情&quot;, notes = &quot;权限码[liquidate:batch:order:view]&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//@PermissionAnnotation(check = true, functionCodes = &#123;&quot;liquidate:batch:order:view&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/view&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">view</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject request)</span> </span>&#123;</span><br><span class=\"line\">    LiquidateBatchExample example = <span class=\"keyword\">new</span> LiquidateBatchExample();</span><br><span class=\"line\">    LiquidateBatchExample.Criteria criteria = example.createCriteria();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!request.containsKey(<span class=\"string\">&quot;id&quot;</span>) || request.getLong(<span class=\"string\">&quot;id&quot;</span>) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.INVALID_PARAMETER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    criteria.andIdEqualTo(request.getLongValue(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;LiquidateBatch&gt; list = liquidateBatchService.selectByExample(example);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.SUCCESS, list.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.DATA_NOT_EXIST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"逻辑删除\"><a href=\"#逻辑删除\" class=\"headerlink\" title=\"逻辑删除\"></a>逻辑删除</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;删除批次&quot;, notes = &quot;权限码[liquidate:batch:order:del]&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//@PermissionAnnotation(check = true, functionCodes = &#123;&quot;liquidate:batch:order:del&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/delete&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">delete</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject request)</span> </span>&#123;</span><br><span class=\"line\">    LiquidateBatchExample example = <span class=\"keyword\">new</span> LiquidateBatchExample();</span><br><span class=\"line\">    LiquidateBatchExample.Criteria criteria = example.createCriteria();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!request.containsKey(<span class=\"string\">&quot;id&quot;</span>) || request.getLong(<span class=\"string\">&quot;id&quot;</span>) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.INVALID_PARAMETER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    criteria.andIdEqualTo(request.getLongValue(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;LiquidateBatch&gt; list = liquidateBatchService.selectByExample(example);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        LiquidateBatch batch = list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        batch.setDeleteFlag(DeleteFlag.DISABLE.getIndex());</span><br><span class=\"line\">        liquidateBatchService.updateByPrimaryKeySelective(batch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"json对象解析-返回分页结果\"><a href=\"#json对象解析-返回分页结果\" class=\"headerlink\" title=\"json对象解析(返回分页结果)\"></a>json对象解析(返回分页结果)</h1><h2 id=\"旧\"><a href=\"#旧\" class=\"headerlink\" title=\"旧\"></a>旧</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject request)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> liquidateBatchService.list(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(JSONObject request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    LiquidateBatchExample example = createQueryExample(request);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageNum = request.get(<span class=\"string\">&quot;pageNum&quot;</span>) != <span class=\"keyword\">null</span> ? request.getInteger(<span class=\"string\">&quot;pageNum&quot;</span>) : <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageSize = request.get(<span class=\"string\">&quot;pageSize&quot;</span>) != <span class=\"keyword\">null</span> ? request.getInteger(<span class=\"string\">&quot;pageSize&quot;</span>) : <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count = getMapper().countByExample(example);</span><br><span class=\"line\">    List&lt;LiquidateBatch&gt; list = selectByExampleForOffsetPage(example, (pageNum - <span class=\"number\">1</span>) * pageSize, pageSize);</span><br><span class=\"line\">    JSONObject resultData = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;data&quot;</span>, list);</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;pageNum&quot;</span>, pageNum);</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;totalPage&quot;</span>, (count % pageSize == <span class=\"number\">0</span>) ? (count / pageSize) : (count / pageSize + <span class=\"number\">1</span>));</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;totalCount&quot;</span>, count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.SUCCESS, resultData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新\"><a href=\"#新\" class=\"headerlink\" title=\"新\"></a>新</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WofCustomAppListRequestVo</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pageNum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pageSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String order;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sort;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T filter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解决自定义表单value问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WofCustomAppListRequestVo&lt;T&gt; <span class=\"title\">resolveParam</span><span class=\"params\">(JSONObject obj, Class&lt;T&gt; t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;pageNum&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setPageNum(obj.getInteger(<span class=\"string\">&quot;pageNum&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;pageSize&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setPageSize(obj.getInteger(<span class=\"string\">&quot;pageSize&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;order&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setOrder(obj.getString(<span class=\"string\">&quot;order&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;sort&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setSort(obj.getInteger(<span class=\"string\">&quot;sort&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JSONObject filterJson = obj.getJSONObject(<span class=\"string\">&quot;filter&quot;</span>);</span><br><span class=\"line\">        T excludeValueObj=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;filter&quot;</span>)) &#123;</span><br><span class=\"line\">            JSONObject excludeValueJSON = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            filterJson.forEach((k, v) -&gt; &#123;</span><br><span class=\"line\">                JSONObject valueJson = <span class=\"keyword\">new</span> JSONObject((Map)v);</span><br><span class=\"line\">                <span class=\"comment\">//时间段筛选</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=valueJson.get(<span class=\"string\">&quot;type&quot;</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"string\">&quot;daterange&quot;</span>.equals(valueJson.getString(<span class=\"string\">&quot;type&quot;</span>)))&#123;</span><br><span class=\"line\">                        String from=valueJson.getString(<span class=\"string\">&quot;from&quot;</span>);</span><br><span class=\"line\">                        String to=valueJson.getString(<span class=\"string\">&quot;to&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=from)&#123;</span><br><span class=\"line\">                            excludeValueJSON.put(k+<span class=\"string\">&quot;Begin&quot;</span>,valueJson.getString(<span class=\"string\">&quot;from&quot;</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=to)&#123;</span><br><span class=\"line\">                            excludeValueJSON.put(k+<span class=\"string\">&quot;End&quot;</span>,valueJson.getString(<span class=\"string\">&quot;to&quot;</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"string\">&quot;array&quot;</span>.equals(valueJson.getString(<span class=\"string\">&quot;type&quot;</span>)))&#123;</span><br><span class=\"line\">                        excludeValueJSON.put(k, valueJson.getJSONArray(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    excludeValueJSON.put(k, valueJson.get(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            excludeValueObj=JSONObject.toJavaObject(excludeValueJSON, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setFilter(excludeValueObj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject jsonObject)</span> </span>&#123;</span><br><span class=\"line\">    WofCustomAppListRequestVo vo = <span class=\"keyword\">new</span> WofCustomAppListRequestVo();</span><br><span class=\"line\">    vo.resolveParam(jsonObject, LiquidateAccountInfo.class);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> liquidateAccountInfoService.list(vo);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(WofCustomAppListRequestVo&lt;LiquidateAccountInfo&gt; request)</span> </span>&#123;</span><br><span class=\"line\">    LiquidateAccountInfoExample example = <span class=\"keyword\">new</span> LiquidateAccountInfoExample();</span><br><span class=\"line\">    LiquidateAccountInfoExample.Criteria criteria = example.createCriteria();</span><br><span class=\"line\">    criteria.andDeleteFlagEqualTo(DeleteFlag.ENABLE.getIndex());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != request.getFilter()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(request.getFilter().getAccountId())) &#123;</span><br><span class=\"line\">            criteria.andAccountIdLike(<span class=\"string\">&quot;%&quot;</span> +request.getFilter().getAccountId()+ <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = countByExample(example);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageNum = request.getPageNum();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageSize = request.getPageSize();</span><br><span class=\"line\">    List&lt;LiquidateAccountInfo&gt; list = selectByExampleForOffsetPage(example, (pageNum - <span class=\"number\">1</span>) * pageSize, pageSize);</span><br><span class=\"line\">    BasePageResult basePageResult = <span class=\"keyword\">new</span> BasePageResult(list, (<span class=\"keyword\">long</span>) count, pageSize, pageNum);</span><br><span class=\"line\">    BaseResult baseResult = <span class=\"keyword\">new</span> BaseResult();</span><br><span class=\"line\">    baseResult.setResult(basePageResult);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> baseResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"文件后缀名校验\"><a href=\"#文件后缀名校验\" class=\"headerlink\" title=\"文件后缀名校验\"></a>文件后缀名校验</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"string\">&quot;xls,xlsx&quot;</span>.contains(file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>, file.getOriginalFilename().length()))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), <span class=\"string\">&quot;只支持excel附件上传&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件大小限制\"><a href=\"#文件大小限制\" class=\"headerlink\" title=\"文件大小限制\"></a>文件大小限制</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//限制文件300K</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (file.getSize() &gt; <span class=\"number\">300</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.INVALID_PARAMETER.getCode(), <span class=\"string\">&quot;文件大小不得超过300K&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"集合判断\"><a href=\"#集合判断\" class=\"headerlink\" title=\"集合判断\"></a>集合判断</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty()) &#123;</span><br></pre></td></tr></table></figure>\n<h1 id=\"返回json-用于提供给远程api接口\"><a href=\"#返回json-用于提供给远程api接口\" class=\"headerlink\" title=\"返回json,用于提供给远程api接口\"></a>返回json,用于提供给远程api接口</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (LiquidateAccountInfo accountInfo : list) &#123;</span><br><span class=\"line\">    JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    jsonObject.put(<span class=\"string\">&quot;text&quot;</span>, accountInfo.getAccountName());</span><br><span class=\"line\">    jsonObject.put(<span class=\"string\">&quot;value&quot;</span>, accountInfo.getAccountId());</span><br><span class=\"line\">    jsonArray.add(jsonObject);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult(BaseMessage.SUCCESS, jsonArray);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;批次详情&quot;, notes = &quot;权限码[liquidate:batch:order:view]&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//@PermissionAnnotation(check = true, functionCodes = &#123;&quot;liquidate:batch:order:view&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/view&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">view</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject request)</span> </span>&#123;</span><br><span class=\"line\">    LiquidateBatchExample example = <span class=\"keyword\">new</span> LiquidateBatchExample();</span><br><span class=\"line\">    LiquidateBatchExample.Criteria criteria = example.createCriteria();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!request.containsKey(<span class=\"string\">&quot;id&quot;</span>) || request.getLong(<span class=\"string\">&quot;id&quot;</span>) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.INVALID_PARAMETER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    criteria.andIdEqualTo(request.getLongValue(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;LiquidateBatch&gt; list = liquidateBatchService.selectByExample(example);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.SUCCESS, list.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.DATA_NOT_EXIST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"逻辑删除\"><a href=\"#逻辑删除\" class=\"headerlink\" title=\"逻辑删除\"></a>逻辑删除</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;删除批次&quot;, notes = &quot;权限码[liquidate:batch:order:del]&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//@PermissionAnnotation(check = true, functionCodes = &#123;&quot;liquidate:batch:order:del&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/delete&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">delete</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject request)</span> </span>&#123;</span><br><span class=\"line\">    LiquidateBatchExample example = <span class=\"keyword\">new</span> LiquidateBatchExample();</span><br><span class=\"line\">    LiquidateBatchExample.Criteria criteria = example.createCriteria();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!request.containsKey(<span class=\"string\">&quot;id&quot;</span>) || request.getLong(<span class=\"string\">&quot;id&quot;</span>) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.INVALID_PARAMETER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    criteria.andIdEqualTo(request.getLongValue(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;LiquidateBatch&gt; list = liquidateBatchService.selectByExample(example);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        LiquidateBatch batch = list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        batch.setDeleteFlag(DeleteFlag.DISABLE.getIndex());</span><br><span class=\"line\">        liquidateBatchService.updateByPrimaryKeySelective(batch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"json对象解析-返回分页结果\"><a href=\"#json对象解析-返回分页结果\" class=\"headerlink\" title=\"json对象解析(返回分页结果)\"></a>json对象解析(返回分页结果)</h1><h2 id=\"旧\"><a href=\"#旧\" class=\"headerlink\" title=\"旧\"></a>旧</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject request)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> liquidateBatchService.list(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(JSONObject request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    LiquidateBatchExample example = createQueryExample(request);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageNum = request.get(<span class=\"string\">&quot;pageNum&quot;</span>) != <span class=\"keyword\">null</span> ? request.getInteger(<span class=\"string\">&quot;pageNum&quot;</span>) : <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageSize = request.get(<span class=\"string\">&quot;pageSize&quot;</span>) != <span class=\"keyword\">null</span> ? request.getInteger(<span class=\"string\">&quot;pageSize&quot;</span>) : <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count = getMapper().countByExample(example);</span><br><span class=\"line\">    List&lt;LiquidateBatch&gt; list = selectByExampleForOffsetPage(example, (pageNum - <span class=\"number\">1</span>) * pageSize, pageSize);</span><br><span class=\"line\">    JSONObject resultData = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;data&quot;</span>, list);</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;pageNum&quot;</span>, pageNum);</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;totalPage&quot;</span>, (count % pageSize == <span class=\"number\">0</span>) ? (count / pageSize) : (count / pageSize + <span class=\"number\">1</span>));</span><br><span class=\"line\">    resultData.put(<span class=\"string\">&quot;totalCount&quot;</span>, count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResult&lt;&gt;(BaseMessage.SUCCESS, resultData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新\"><a href=\"#新\" class=\"headerlink\" title=\"新\"></a>新</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WofCustomAppListRequestVo</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pageNum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pageSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String order;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sort;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T filter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解决自定义表单value问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WofCustomAppListRequestVo&lt;T&gt; <span class=\"title\">resolveParam</span><span class=\"params\">(JSONObject obj, Class&lt;T&gt; t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;pageNum&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setPageNum(obj.getInteger(<span class=\"string\">&quot;pageNum&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;pageSize&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setPageSize(obj.getInteger(<span class=\"string\">&quot;pageSize&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;order&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setOrder(obj.getString(<span class=\"string\">&quot;order&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;sort&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setSort(obj.getInteger(<span class=\"string\">&quot;sort&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JSONObject filterJson = obj.getJSONObject(<span class=\"string\">&quot;filter&quot;</span>);</span><br><span class=\"line\">        T excludeValueObj=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != obj.get(<span class=\"string\">&quot;filter&quot;</span>)) &#123;</span><br><span class=\"line\">            JSONObject excludeValueJSON = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            filterJson.forEach((k, v) -&gt; &#123;</span><br><span class=\"line\">                JSONObject valueJson = <span class=\"keyword\">new</span> JSONObject((Map)v);</span><br><span class=\"line\">                <span class=\"comment\">//时间段筛选</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=valueJson.get(<span class=\"string\">&quot;type&quot;</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"string\">&quot;daterange&quot;</span>.equals(valueJson.getString(<span class=\"string\">&quot;type&quot;</span>)))&#123;</span><br><span class=\"line\">                        String from=valueJson.getString(<span class=\"string\">&quot;from&quot;</span>);</span><br><span class=\"line\">                        String to=valueJson.getString(<span class=\"string\">&quot;to&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=from)&#123;</span><br><span class=\"line\">                            excludeValueJSON.put(k+<span class=\"string\">&quot;Begin&quot;</span>,valueJson.getString(<span class=\"string\">&quot;from&quot;</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>!=to)&#123;</span><br><span class=\"line\">                            excludeValueJSON.put(k+<span class=\"string\">&quot;End&quot;</span>,valueJson.getString(<span class=\"string\">&quot;to&quot;</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"string\">&quot;array&quot;</span>.equals(valueJson.getString(<span class=\"string\">&quot;type&quot;</span>)))&#123;</span><br><span class=\"line\">                        excludeValueJSON.put(k, valueJson.getJSONArray(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    excludeValueJSON.put(k, valueJson.get(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            excludeValueObj=JSONObject.toJavaObject(excludeValueJSON, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setFilter(excludeValueObj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject jsonObject)</span> </span>&#123;</span><br><span class=\"line\">    WofCustomAppListRequestVo vo = <span class=\"keyword\">new</span> WofCustomAppListRequestVo();</span><br><span class=\"line\">    vo.resolveParam(jsonObject, LiquidateAccountInfo.class);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> liquidateAccountInfoService.list(vo);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResult <span class=\"title\">list</span><span class=\"params\">(WofCustomAppListRequestVo&lt;LiquidateAccountInfo&gt; request)</span> </span>&#123;</span><br><span class=\"line\">    LiquidateAccountInfoExample example = <span class=\"keyword\">new</span> LiquidateAccountInfoExample();</span><br><span class=\"line\">    LiquidateAccountInfoExample.Criteria criteria = example.createCriteria();</span><br><span class=\"line\">    criteria.andDeleteFlagEqualTo(DeleteFlag.ENABLE.getIndex());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != request.getFilter()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(request.getFilter().getAccountId())) &#123;</span><br><span class=\"line\">            criteria.andAccountIdLike(<span class=\"string\">&quot;%&quot;</span> +request.getFilter().getAccountId()+ <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = countByExample(example);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageNum = request.getPageNum();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageSize = request.getPageSize();</span><br><span class=\"line\">    List&lt;LiquidateAccountInfo&gt; list = selectByExampleForOffsetPage(example, (pageNum - <span class=\"number\">1</span>) * pageSize, pageSize);</span><br><span class=\"line\">    BasePageResult basePageResult = <span class=\"keyword\">new</span> BasePageResult(list, (<span class=\"keyword\">long</span>) count, pageSize, pageNum);</span><br><span class=\"line\">    BaseResult baseResult = <span class=\"keyword\">new</span> BaseResult();</span><br><span class=\"line\">    baseResult.setResult(basePageResult);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> baseResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"跨域请求","date":"2020-05-18T12:37:39.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220518203805.png","_content":"\n# 什么是跨域请求\n>请求的目标URL和所在网页的URL的协议、域名、端口有一个不同，就算是跨域\n> https,baidu,80\n\n# CORS\n**跨域资源共享(Cross-origin resource sharing)**\n\n> 在跨域请求之前，先发送options请求询问服务器是否允许接下来的跨域请求\n> OPTIONS请求中添加字段\n> Origin:发起请求的域\n> Access-Control-Request-Method：将要发起的跨域请求方式（GET/PUT/POST/DELETE）\n> Access-Control-Request-Headers：将要发起的跨域请求中包含的请求头字段\n\n服务器通过响应字段表示是否允许这个跨域请求，浏览器收到后检查如果不符合，就拒绝\n> Access-Control-Allow-Origin：允许哪些域来访问（*表示允许所有域的请求）\nAccess-Control-Allow-Methods：允许哪些请求方式\nAccess-Control-Allow-Headers：允许哪些请求头字段\nAccess-Control-Allow-Credentials：是否允许携带Cookie\n\n# 两个优化\n如果是一个简单请求，那么就直接发起请求，只需要加入Origin字段表明自己的来源，服务器根据Allow-Origin判断是否符合要求\n简单请求就是HEAD，GET，POST三者之一，请求头中的\n\n# 四种常见的 POST 提交数据方式\nHTTP协议是由ASCII码传输的，建立在TCP/IP协议之上的应用层规范，规范把HTTP请求分为三个部分，状态行，请求头，消息主体\n协议规定POST提交的数据必须放到消息体中，但是没有规定编码方式。\n数据发送出去，服务端通过Content-Type字段对主体进行解析\n## application/x-www-form-urlencoded\n默认的编码方式，采用的浏览器的原生form表单，\n","source":"_posts/开发记录/跨域请求.md","raw":"---\ntitle: 跨域请求\ndate: 2020-5-18 20:37:39\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220518203805.png\ntags:\n- 开发记录\n---\n\n# 什么是跨域请求\n>请求的目标URL和所在网页的URL的协议、域名、端口有一个不同，就算是跨域\n> https,baidu,80\n\n# CORS\n**跨域资源共享(Cross-origin resource sharing)**\n\n> 在跨域请求之前，先发送options请求询问服务器是否允许接下来的跨域请求\n> OPTIONS请求中添加字段\n> Origin:发起请求的域\n> Access-Control-Request-Method：将要发起的跨域请求方式（GET/PUT/POST/DELETE）\n> Access-Control-Request-Headers：将要发起的跨域请求中包含的请求头字段\n\n服务器通过响应字段表示是否允许这个跨域请求，浏览器收到后检查如果不符合，就拒绝\n> Access-Control-Allow-Origin：允许哪些域来访问（*表示允许所有域的请求）\nAccess-Control-Allow-Methods：允许哪些请求方式\nAccess-Control-Allow-Headers：允许哪些请求头字段\nAccess-Control-Allow-Credentials：是否允许携带Cookie\n\n# 两个优化\n如果是一个简单请求，那么就直接发起请求，只需要加入Origin字段表明自己的来源，服务器根据Allow-Origin判断是否符合要求\n简单请求就是HEAD，GET，POST三者之一，请求头中的\n\n# 四种常见的 POST 提交数据方式\nHTTP协议是由ASCII码传输的，建立在TCP/IP协议之上的应用层规范，规范把HTTP请求分为三个部分，状态行，请求头，消息主体\n协议规定POST提交的数据必须放到消息体中，但是没有规定编码方式。\n数据发送出去，服务端通过Content-Type字段对主体进行解析\n## application/x-www-form-urlencoded\n默认的编码方式，采用的浏览器的原生form表单，\n","slug":"开发记录/跨域请求","published":1,"updated":"2022-05-30T03:05:17.169Z","_id":"cl4m62ivv0003iw2m0nc68i2g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是跨域请求\"><a href=\"#什么是跨域请求\" class=\"headerlink\" title=\"什么是跨域请求\"></a>什么是跨域请求</h1><blockquote>\n<p>请求的目标URL和所在网页的URL的协议、域名、端口有一个不同，就算是跨域<br>https,baidu,80</p>\n</blockquote>\n<h1 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h1><p><strong>跨域资源共享(Cross-origin resource sharing)</strong></p>\n<blockquote>\n<p>在跨域请求之前，先发送options请求询问服务器是否允许接下来的跨域请求<br>OPTIONS请求中添加字段<br>Origin:发起请求的域<br>Access-Control-Request-Method：将要发起的跨域请求方式（GET/PUT/POST/DELETE）<br>Access-Control-Request-Headers：将要发起的跨域请求中包含的请求头字段</p>\n</blockquote>\n<p>服务器通过响应字段表示是否允许这个跨域请求，浏览器收到后检查如果不符合，就拒绝</p>\n<blockquote>\n<p>Access-Control-Allow-Origin：允许哪些域来访问（*表示允许所有域的请求）<br>Access-Control-Allow-Methods：允许哪些请求方式<br>Access-Control-Allow-Headers：允许哪些请求头字段<br>Access-Control-Allow-Credentials：是否允许携带Cookie</p>\n</blockquote>\n<h1 id=\"两个优化\"><a href=\"#两个优化\" class=\"headerlink\" title=\"两个优化\"></a>两个优化</h1><p>如果是一个简单请求，那么就直接发起请求，只需要加入Origin字段表明自己的来源，服务器根据Allow-Origin判断是否符合要求<br>简单请求就是HEAD，GET，POST三者之一，请求头中的</p>\n<h1 id=\"四种常见的-POST-提交数据方式\"><a href=\"#四种常见的-POST-提交数据方式\" class=\"headerlink\" title=\"四种常见的 POST 提交数据方式\"></a>四种常见的 POST 提交数据方式</h1><p>HTTP协议是由ASCII码传输的，建立在TCP/IP协议之上的应用层规范，规范把HTTP请求分为三个部分，状态行，请求头，消息主体<br>协议规定POST提交的数据必须放到消息体中，但是没有规定编码方式。<br>数据发送出去，服务端通过Content-Type字段对主体进行解析</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><p>默认的编码方式，采用的浏览器的原生form表单，</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是跨域请求\"><a href=\"#什么是跨域请求\" class=\"headerlink\" title=\"什么是跨域请求\"></a>什么是跨域请求</h1><blockquote>\n<p>请求的目标URL和所在网页的URL的协议、域名、端口有一个不同，就算是跨域<br>https,baidu,80</p>\n</blockquote>\n<h1 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h1><p><strong>跨域资源共享(Cross-origin resource sharing)</strong></p>\n<blockquote>\n<p>在跨域请求之前，先发送options请求询问服务器是否允许接下来的跨域请求<br>OPTIONS请求中添加字段<br>Origin:发起请求的域<br>Access-Control-Request-Method：将要发起的跨域请求方式（GET/PUT/POST/DELETE）<br>Access-Control-Request-Headers：将要发起的跨域请求中包含的请求头字段</p>\n</blockquote>\n<p>服务器通过响应字段表示是否允许这个跨域请求，浏览器收到后检查如果不符合，就拒绝</p>\n<blockquote>\n<p>Access-Control-Allow-Origin：允许哪些域来访问（*表示允许所有域的请求）<br>Access-Control-Allow-Methods：允许哪些请求方式<br>Access-Control-Allow-Headers：允许哪些请求头字段<br>Access-Control-Allow-Credentials：是否允许携带Cookie</p>\n</blockquote>\n<h1 id=\"两个优化\"><a href=\"#两个优化\" class=\"headerlink\" title=\"两个优化\"></a>两个优化</h1><p>如果是一个简单请求，那么就直接发起请求，只需要加入Origin字段表明自己的来源，服务器根据Allow-Origin判断是否符合要求<br>简单请求就是HEAD，GET，POST三者之一，请求头中的</p>\n<h1 id=\"四种常见的-POST-提交数据方式\"><a href=\"#四种常见的-POST-提交数据方式\" class=\"headerlink\" title=\"四种常见的 POST 提交数据方式\"></a>四种常见的 POST 提交数据方式</h1><p>HTTP协议是由ASCII码传输的，建立在TCP/IP协议之上的应用层规范，规范把HTTP请求分为三个部分，状态行，请求头，消息主体<br>协议规定POST提交的数据必须放到消息体中，但是没有规定编码方式。<br>数据发送出去，服务端通过Content-Type字段对主体进行解析</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><p>默认的编码方式，采用的浏览器的原生form表单，</p>\n"},{"title":"redis封装工具类","date":"2022-06-20T07:05:33.000Z","cover":"/img/3.png","_content":"```java\n@Component\npublic class RedisTemplateUtil {\n    @Bean(name = \"redisTemplateJson\")\n    public RedisTemplate redisTemplateJson(\n            @Value(\"${spring.fap.cache.redis.database:}\") int database,\n            @Value(\"${spring.fap.cache.redis.host:}\") String host,\n            @Value(\"${spring.fap.cache.redis.password:}\") String password,\n            @Value(\"${spring.fap.cache.redis.port:}\") int port,\n            @Value(\"${spring.fap.cache.redis.pool.min-idle:}\") int minIdle,\n            @Value(\"${spring.fap.cache.redis.pool.max-idle:}\") int maxIdle,\n            @Value(\"${spring.fap.cache.redis.timeout:}\") int timeout) {\n        JedisConnectionFactory factory = new JedisConnectionFactory();\n        factory.setDatabase(database);\n        factory.setHostName(host);\n        factory.setPassword(password);\n        factory.setPort(port);\n        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n        jedisPoolConfig.setMinIdle(minIdle);\n        jedisPoolConfig.setMaxIdle(maxIdle);\n        factory.setPoolConfig(jedisPoolConfig);\n        factory.setTimeout(timeout); //设置连接超时时间\n        factory.afterPropertiesSet();\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.setKeySerializer(new StringRedisSerializer());\n        template.afterPropertiesSet();\n        return template;\n    }\n\n    @Resource(name = \"redisTemplateJson\")\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 写入缓存\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public <T> boolean set(final String key, T value) {\n        boolean result = false;\n        try {\n            ValueOperations<Serializable, T> operations = redisTemplate.opsForValue();\n            operations.set(key, value);\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * 写入缓存设置时效时间\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public <T> boolean set(final String key, T value, Long expireTime) {\n        boolean result = false;\n        try {\n            ValueOperations<Serializable, T> operations = redisTemplate.opsForValue();\n            operations.set(key, value, expireTime, TimeUnit.SECONDS);\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * 批量删除对应的value\n     *\n     * @param keys\n     */\n    public void remove(final String... keys) {\n        for (String key : keys) {\n            remove(key);\n        }\n    }\n\n    /**\n     * 批量删除key\n     *\n     * @param pattern\n     */\n    public void removePattern(final String pattern) {\n        Set<Serializable> keys = redisTemplate.keys(pattern);\n        if (keys.size() > 0) {\n            redisTemplate.delete(keys);\n        }\n    }\n\n    /**\n     * 删除对应的value\n     *\n     * @param key\n     */\n    public void remove(final String key) {\n        if (exists(key)) {\n            redisTemplate.delete(key);\n        }\n    }\n\n    /**\n     * 判断缓存中是否有对应的value\n     *\n     * @param key\n     * @return\n     */\n    public boolean exists(final String key) {\n\n        return redisTemplate.hasKey(key);\n    }\n\n    /**\n     * 读取缓存\n     *\n     * @param key\n     * @return\n     */\n    public <T> T get(final String key) {\n        ValueOperations<Serializable, T> operations = redisTemplate.opsForValue();\n        return operations.get(key);\n    }\n\n    /**\n     * 哈希 添加\n     *\n     * @param key\n     * @param hashKey\n     * @param value\n     */\n    public void hmSet(String key, Object hashKey, Object value) {\n        HashOperations<String, Object, Object> hash = redisTemplate.opsForHash();\n        hash.put(key, hashKey, value);\n    }\n\n    /**\n     * 哈希获取数据\n     *\n     * @param key\n     * @param hashKey\n     * @return\n     */\n    public Object hmGet(String key, Object hashKey) {\n        HashOperations<String, Object, Object> hash = redisTemplate.opsForHash();\n        return hash.get(key, hashKey);\n    }\n\n    /**\n     * 列表添加\n     *\n     * @param k\n     * @param v\n     */\n    public void lPush(String k, List<Object> v) {\n        ListOperations<String, Object> list = redisTemplate.opsForList();\n        list.rightPushAll(k, v);\n    }\n\n    /**\n     * 列表获取\n     *\n     * @param k\n     * @param l\n     * @param l1\n     * @return\n     */\n    public List<Object> lRange(String k, long l, long l1) {\n        ListOperations<String, Object> list = redisTemplate.opsForList();\n        return list.range(k, l, l1);\n    }\n\n    /**\n     * 集合添加\n     *\n     * @param key\n     * @param value\n     */\n    public void add(String key, Object value) {\n        SetOperations<String, Object> set = redisTemplate.opsForSet();\n        set.add(key, value);\n    }\n\n    /**\n     * 集合获取\n     *\n     * @param key\n     * @return\n     */\n    public Set<Object> setMembers(String key) {\n        SetOperations<String, Object> set = redisTemplate.opsForSet();\n        return set.members(key);\n    }\n\n    /**\n     * 有序集合添加\n     *\n     * @param key\n     * @param value\n     * @param scoure\n     */\n    public void zAdd(String key, Object value, double scoure) {\n        ZSetOperations<String, Object> zset = redisTemplate.opsForZSet();\n        zset.add(key, value, scoure);\n    }\n\n    /**\n     * 有序集合获取\n     *\n     * @param key\n     * @param scoure\n     * @param scoure1\n     * @return\n     */\n    public Set<Object> rangeByScore(String key, double scoure, double scoure1) {\n        ZSetOperations<String, Object> zset = redisTemplate.opsForZSet();\n        return zset.rangeByScore(key, scoure, scoure1);\n    }\n\n    /**\n     * 获取自增数据\n     *\n     * @param key\n     * @return\n     */\n    public Long getIncrId(String key, Long expireTime, Long startValue) {\n        Boolean  hasKey=redisTemplate.hasKey(key);\n        RedisAtomicLong entityIdCounter = new RedisAtomicLong(key, redisTemplate.getConnectionFactory());\n        if(!hasKey){\n            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);\n        }\n        if(null != startValue){\n            entityIdCounter.set(startValue);\n            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);\n        }\n        return entityIdCounter.incrementAndGet();\n    }\n}\n```\n","source":"_posts/组件/redis封装.md","raw":"---\ntitle: redis封装工具类\ndate: 2022-6-20 15:05:33\ncover: \ntags:\n- 组件\n---\n```java\n@Component\npublic class RedisTemplateUtil {\n    @Bean(name = \"redisTemplateJson\")\n    public RedisTemplate redisTemplateJson(\n            @Value(\"${spring.fap.cache.redis.database:}\") int database,\n            @Value(\"${spring.fap.cache.redis.host:}\") String host,\n            @Value(\"${spring.fap.cache.redis.password:}\") String password,\n            @Value(\"${spring.fap.cache.redis.port:}\") int port,\n            @Value(\"${spring.fap.cache.redis.pool.min-idle:}\") int minIdle,\n            @Value(\"${spring.fap.cache.redis.pool.max-idle:}\") int maxIdle,\n            @Value(\"${spring.fap.cache.redis.timeout:}\") int timeout) {\n        JedisConnectionFactory factory = new JedisConnectionFactory();\n        factory.setDatabase(database);\n        factory.setHostName(host);\n        factory.setPassword(password);\n        factory.setPort(port);\n        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n        jedisPoolConfig.setMinIdle(minIdle);\n        jedisPoolConfig.setMaxIdle(maxIdle);\n        factory.setPoolConfig(jedisPoolConfig);\n        factory.setTimeout(timeout); //设置连接超时时间\n        factory.afterPropertiesSet();\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.setKeySerializer(new StringRedisSerializer());\n        template.afterPropertiesSet();\n        return template;\n    }\n\n    @Resource(name = \"redisTemplateJson\")\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 写入缓存\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public <T> boolean set(final String key, T value) {\n        boolean result = false;\n        try {\n            ValueOperations<Serializable, T> operations = redisTemplate.opsForValue();\n            operations.set(key, value);\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * 写入缓存设置时效时间\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public <T> boolean set(final String key, T value, Long expireTime) {\n        boolean result = false;\n        try {\n            ValueOperations<Serializable, T> operations = redisTemplate.opsForValue();\n            operations.set(key, value, expireTime, TimeUnit.SECONDS);\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * 批量删除对应的value\n     *\n     * @param keys\n     */\n    public void remove(final String... keys) {\n        for (String key : keys) {\n            remove(key);\n        }\n    }\n\n    /**\n     * 批量删除key\n     *\n     * @param pattern\n     */\n    public void removePattern(final String pattern) {\n        Set<Serializable> keys = redisTemplate.keys(pattern);\n        if (keys.size() > 0) {\n            redisTemplate.delete(keys);\n        }\n    }\n\n    /**\n     * 删除对应的value\n     *\n     * @param key\n     */\n    public void remove(final String key) {\n        if (exists(key)) {\n            redisTemplate.delete(key);\n        }\n    }\n\n    /**\n     * 判断缓存中是否有对应的value\n     *\n     * @param key\n     * @return\n     */\n    public boolean exists(final String key) {\n\n        return redisTemplate.hasKey(key);\n    }\n\n    /**\n     * 读取缓存\n     *\n     * @param key\n     * @return\n     */\n    public <T> T get(final String key) {\n        ValueOperations<Serializable, T> operations = redisTemplate.opsForValue();\n        return operations.get(key);\n    }\n\n    /**\n     * 哈希 添加\n     *\n     * @param key\n     * @param hashKey\n     * @param value\n     */\n    public void hmSet(String key, Object hashKey, Object value) {\n        HashOperations<String, Object, Object> hash = redisTemplate.opsForHash();\n        hash.put(key, hashKey, value);\n    }\n\n    /**\n     * 哈希获取数据\n     *\n     * @param key\n     * @param hashKey\n     * @return\n     */\n    public Object hmGet(String key, Object hashKey) {\n        HashOperations<String, Object, Object> hash = redisTemplate.opsForHash();\n        return hash.get(key, hashKey);\n    }\n\n    /**\n     * 列表添加\n     *\n     * @param k\n     * @param v\n     */\n    public void lPush(String k, List<Object> v) {\n        ListOperations<String, Object> list = redisTemplate.opsForList();\n        list.rightPushAll(k, v);\n    }\n\n    /**\n     * 列表获取\n     *\n     * @param k\n     * @param l\n     * @param l1\n     * @return\n     */\n    public List<Object> lRange(String k, long l, long l1) {\n        ListOperations<String, Object> list = redisTemplate.opsForList();\n        return list.range(k, l, l1);\n    }\n\n    /**\n     * 集合添加\n     *\n     * @param key\n     * @param value\n     */\n    public void add(String key, Object value) {\n        SetOperations<String, Object> set = redisTemplate.opsForSet();\n        set.add(key, value);\n    }\n\n    /**\n     * 集合获取\n     *\n     * @param key\n     * @return\n     */\n    public Set<Object> setMembers(String key) {\n        SetOperations<String, Object> set = redisTemplate.opsForSet();\n        return set.members(key);\n    }\n\n    /**\n     * 有序集合添加\n     *\n     * @param key\n     * @param value\n     * @param scoure\n     */\n    public void zAdd(String key, Object value, double scoure) {\n        ZSetOperations<String, Object> zset = redisTemplate.opsForZSet();\n        zset.add(key, value, scoure);\n    }\n\n    /**\n     * 有序集合获取\n     *\n     * @param key\n     * @param scoure\n     * @param scoure1\n     * @return\n     */\n    public Set<Object> rangeByScore(String key, double scoure, double scoure1) {\n        ZSetOperations<String, Object> zset = redisTemplate.opsForZSet();\n        return zset.rangeByScore(key, scoure, scoure1);\n    }\n\n    /**\n     * 获取自增数据\n     *\n     * @param key\n     * @return\n     */\n    public Long getIncrId(String key, Long expireTime, Long startValue) {\n        Boolean  hasKey=redisTemplate.hasKey(key);\n        RedisAtomicLong entityIdCounter = new RedisAtomicLong(key, redisTemplate.getConnectionFactory());\n        if(!hasKey){\n            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);\n        }\n        if(null != startValue){\n            entityIdCounter.set(startValue);\n            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);\n        }\n        return entityIdCounter.incrementAndGet();\n    }\n}\n```\n","slug":"组件/redis封装","published":1,"updated":"2022-06-20T07:06:06.588Z","_id":"cl4me80fx0000b82m96zu5dn1","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisTemplateUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;redisTemplateJson&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate <span class=\"title\">redisTemplateJson</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.database:&#125;&quot;)</span> <span class=\"keyword\">int</span> database,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.host:&#125;&quot;)</span> String host,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.password:&#125;&quot;)</span> String password,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.port:&#125;&quot;)</span> <span class=\"keyword\">int</span> port,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.pool.min-idle:&#125;&quot;)</span> <span class=\"keyword\">int</span> minIdle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.pool.max-idle:&#125;&quot;)</span> <span class=\"keyword\">int</span> maxIdle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.timeout:&#125;&quot;)</span> <span class=\"keyword\">int</span> timeout)</span> </span>&#123;</span><br><span class=\"line\">        JedisConnectionFactory factory = <span class=\"keyword\">new</span> JedisConnectionFactory();</span><br><span class=\"line\">        factory.setDatabase(database);</span><br><span class=\"line\">        factory.setHostName(host);</span><br><span class=\"line\">        factory.setPassword(password);</span><br><span class=\"line\">        factory.setPort(port);</span><br><span class=\"line\">        JedisPoolConfig jedisPoolConfig = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\">        jedisPoolConfig.setMinIdle(minIdle);</span><br><span class=\"line\">        jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class=\"line\">        factory.setPoolConfig(jedisPoolConfig);</span><br><span class=\"line\">        factory.setTimeout(timeout); <span class=\"comment\">//设置连接超时时间</span></span><br><span class=\"line\">        factory.afterPropertiesSet();</span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(factory);</span><br><span class=\"line\"></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource(name = &quot;redisTemplateJson&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ValueOperations&lt;Serializable, T&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">            operations.set(key, value);</span><br><span class=\"line\">            result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写入缓存设置时效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, T value, Long expireTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ValueOperations&lt;Serializable, T&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">            operations.set(key, value, expireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">            result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">final</span> String... keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            remove(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removePattern</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keys.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            redisTemplate.delete(keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exists(key)) &#123;</span><br><span class=\"line\">            redisTemplate.delete(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断缓存中是否有对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exists</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        ValueOperations&lt;Serializable, T&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> operations.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 哈希 添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hashKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hmSet</span><span class=\"params\">(String key, Object hashKey, Object value)</span> </span>&#123;</span><br><span class=\"line\">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class=\"line\">        hash.put(key, hashKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 哈希获取数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hashKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">hmGet</span><span class=\"params\">(String key, Object hashKey)</span> </span>&#123;</span><br><span class=\"line\">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash.get(key, hashKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 列表添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lPush</span><span class=\"params\">(String k, List&lt;Object&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class=\"line\">        list.rightPushAll(k, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 列表获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> l</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> l1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">lRange</span><span class=\"params\">(String k, <span class=\"keyword\">long</span> l, <span class=\"keyword\">long</span> l1)</span> </span>&#123;</span><br><span class=\"line\">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.range(k, l, l1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 集合添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class=\"line\">        set.add(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 集合获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">setMembers</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set.members(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有序集合添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scoure</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zAdd</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">double</span> scoure)</span> </span>&#123;</span><br><span class=\"line\">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class=\"line\">        zset.add(key, value, scoure);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有序集合获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scoure</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scoure1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">rangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> scoure, <span class=\"keyword\">double</span> scoure1)</span> </span>&#123;</span><br><span class=\"line\">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zset.rangeByScore(key, scoure, scoure1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取自增数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getIncrId</span><span class=\"params\">(String key, Long expireTime, Long startValue)</span> </span>&#123;</span><br><span class=\"line\">        Boolean  hasKey=redisTemplate.hasKey(key);</span><br><span class=\"line\">        RedisAtomicLong entityIdCounter = <span class=\"keyword\">new</span> RedisAtomicLong(key, redisTemplate.getConnectionFactory());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!hasKey)&#123;</span><br><span class=\"line\">            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != startValue)&#123;</span><br><span class=\"line\">            entityIdCounter.set(startValue);</span><br><span class=\"line\">            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entityIdCounter.incrementAndGet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisTemplateUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;redisTemplateJson&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate <span class=\"title\">redisTemplateJson</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.database:&#125;&quot;)</span> <span class=\"keyword\">int</span> database,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.host:&#125;&quot;)</span> String host,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.password:&#125;&quot;)</span> String password,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.port:&#125;&quot;)</span> <span class=\"keyword\">int</span> port,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.pool.min-idle:&#125;&quot;)</span> <span class=\"keyword\">int</span> minIdle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.pool.max-idle:&#125;&quot;)</span> <span class=\"keyword\">int</span> maxIdle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@Value(&quot;$&#123;spring.fap.cache.redis.timeout:&#125;&quot;)</span> <span class=\"keyword\">int</span> timeout)</span> </span>&#123;</span><br><span class=\"line\">        JedisConnectionFactory factory = <span class=\"keyword\">new</span> JedisConnectionFactory();</span><br><span class=\"line\">        factory.setDatabase(database);</span><br><span class=\"line\">        factory.setHostName(host);</span><br><span class=\"line\">        factory.setPassword(password);</span><br><span class=\"line\">        factory.setPort(port);</span><br><span class=\"line\">        JedisPoolConfig jedisPoolConfig = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\">        jedisPoolConfig.setMinIdle(minIdle);</span><br><span class=\"line\">        jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class=\"line\">        factory.setPoolConfig(jedisPoolConfig);</span><br><span class=\"line\">        factory.setTimeout(timeout); <span class=\"comment\">//设置连接超时时间</span></span><br><span class=\"line\">        factory.afterPropertiesSet();</span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(factory);</span><br><span class=\"line\"></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource(name = &quot;redisTemplateJson&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ValueOperations&lt;Serializable, T&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">            operations.set(key, value);</span><br><span class=\"line\">            result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写入缓存设置时效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, T value, Long expireTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ValueOperations&lt;Serializable, T&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">            operations.set(key, value, expireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">            result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">final</span> String... keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            remove(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removePattern</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keys.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            redisTemplate.delete(keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exists(key)) &#123;</span><br><span class=\"line\">            redisTemplate.delete(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断缓存中是否有对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exists</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        ValueOperations&lt;Serializable, T&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> operations.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 哈希 添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hashKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hmSet</span><span class=\"params\">(String key, Object hashKey, Object value)</span> </span>&#123;</span><br><span class=\"line\">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class=\"line\">        hash.put(key, hashKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 哈希获取数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hashKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">hmGet</span><span class=\"params\">(String key, Object hashKey)</span> </span>&#123;</span><br><span class=\"line\">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash.get(key, hashKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 列表添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lPush</span><span class=\"params\">(String k, List&lt;Object&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class=\"line\">        list.rightPushAll(k, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 列表获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> l</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> l1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">lRange</span><span class=\"params\">(String k, <span class=\"keyword\">long</span> l, <span class=\"keyword\">long</span> l1)</span> </span>&#123;</span><br><span class=\"line\">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.range(k, l, l1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 集合添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class=\"line\">        set.add(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 集合获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">setMembers</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set.members(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有序集合添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scoure</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zAdd</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">double</span> scoure)</span> </span>&#123;</span><br><span class=\"line\">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class=\"line\">        zset.add(key, value, scoure);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有序集合获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scoure</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scoure1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">rangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> scoure, <span class=\"keyword\">double</span> scoure1)</span> </span>&#123;</span><br><span class=\"line\">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zset.rangeByScore(key, scoure, scoure1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取自增数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getIncrId</span><span class=\"params\">(String key, Long expireTime, Long startValue)</span> </span>&#123;</span><br><span class=\"line\">        Boolean  hasKey=redisTemplate.hasKey(key);</span><br><span class=\"line\">        RedisAtomicLong entityIdCounter = <span class=\"keyword\">new</span> RedisAtomicLong(key, redisTemplate.getConnectionFactory());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!hasKey)&#123;</span><br><span class=\"line\">            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != startValue)&#123;</span><br><span class=\"line\">            entityIdCounter.set(startValue);</span><br><span class=\"line\">            entityIdCounter.expire(expireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entityIdCounter.incrementAndGet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"阿里巴巴开发规范.md","date":"2020-05-13T03:13:39.000Z","cover":"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513111454.png","_content":"\n>boolean不要以is开头，不然get方法就会出问题。\n\n>包名统一用单数形式。\n\n>使用完整的单词表达。\n\n>禁止出现魔法值，任何直接出现在代码中的字符串都是魔法值\n\n>使用long类型，必需使用大L,避免i1不分\n\n>equals容易出现空指针异常\n正确写法\n＂sbdl＂.equals=object\n推荐使用jdk7工具类\nequals(a，b)\n\n>Integer使用static生成-128到127的之间所以的数字，所以128=128等于false\n所以所有的包装类都要用equals比较\n\n>任何货币金额，都以最小金额单位且整形来存储\n\n>浮点型数据，基本类型不能用==，包装类型不能用equals，1.0=1.00为false，因为精度不同，应该使用compareTo\n\n>禁止在bigDicmal中传入double，应该使用valueOf,实现原理是toString\n\n>所有的对象pojo都使用包装类型，不然有默认值\n所有的局部变量都使用基本类型\n\n>pojo类必须写toString方法，如果有继承，要super.toString\n\n>日期格式化，new SImpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n大写M 月份\n小写M 分钟\n24小时是大写H\n12小时是小写的h\n\n>获取当前毫秒数，System.currentTimeMillis()，底层使用的native方法\n精确计时使用Instant类，精确到纳秒\n\n>不要在程序中写死一年的天数，应该使用LocalDate.now().lengthOfYear()获取今年天数\n\n>只要重写了equals，就要重写hashCode方法,Set和Map的key依据hashCode判断,\nString重写的hashCode和equals方法，所以可以将String对象作为key来使用\n\n>判断集合是否为空，调用isEmpty1方法,因为不是遍历实现的size==0\n\n>使用stream流中的Collectors的toMap时，一定要使用含有参数类型BinaryOperator，参数值为mergeFunction的方法，否则出现相同的key，会抛出IllegalStateException\nCollectors.toMap(key,value,(v1,v2)->v1)\n> toMap时，value也不能为空，所以在转换之前要做filter过滤\n> list.stream().filter(t->StringUtils.isNotBlank(t.getName)).collect(Collectors.toMap(t.getId,t.getName,(v1,v2)->v1))\n\n>ArrayList的subList不可用强转ArrayList,因为subList返回的内部类是SubList是ArrayList的视图，对于subList的操作都会返回到原ArrayList上\n\n>使用Map中的keySet/values/entrySet返回集合对象时，不可用对其添加元素操作，否则抛出UnsupportedOperationException\n\n>在subList场景中，对父类集合的增加和删除，均会导致子列表的遍历，增加，删除产生ConcurrentModificationException\n\n>集合转换数据的时候，list.toArray要指定参数，list.toArray(new String[0]),不然返回的object对象再转换，会出现转换异常，toArray的带参方法，length=0时，动态创建和size相同的数组\n\n>使用ArrayList.addAll底层实现还是toArray,所以使用之前要判断参数是否为空\n\n>不要在foreach中进行元素的add/remove操作。remove元素请使用Iterator，如果是并发操作请对Iterator对象加锁\n\n>获取单例对象要保证线程安全\n\n>创建线程或线程池，请指定有意义的线程名字，使用自定义线程工厂实现ThreadFactory，\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513160147.png)\n\n>线程资源必须通过线程池提供，通过ThreadPoolExecutor方法创建，\n\n>SimpleDateFormat是线程不安全的类，不要定义为static变量,在jkd8应用中，使用Instant代替Date,LocalDateTime代替Calendar,使用DateTimeFormatter代替SimpleDateFormat\n\n>必须回收自定义的ThreadLocal变量，在线程池场景下，会造成内存泄漏，建议使用\n```java\naThreadLocal.set(userInfo)\n        try{\n            \n        }finally(){\n        aThreadLocal.remove()\n        }\n```\n\n>高并发中，能锁区块就不要锁整个方法，能用对象锁就不要用类锁\n\n>对多个资源，数据库表，对象同时加锁时，注意保持一致的加锁顺序，否则可能会造成死锁\n\n>使用阻塞等待获取锁的过程中，必须在try代码块之外，并且加锁方法与try之间没有任何可能抛出的异常，避免加锁成功后，在finally无法解锁\n```java\nnew Lock();\n        lock.lock();\n        try{\n\n        }finally{\n        lock.unlock()\n        }\n```\n\n>在尝试机制获取锁中，进入业务代码块之前，必须先判断当前线程是否持有锁，锁的释放规则与锁的阻塞等待方法相同\n```java\nLock lock=new aLock();\n        boolean isLocked=lock.tryLock();\n        if(isLocked){\n        try{\n        doSomething();\n        }finally{\n        lock.unlock();\n        }\n        }\n```\n\n>并发修改时，更新同一条记录，避免更新丢失，需要加锁，要么在应用层面加锁，要么在缓存加锁，要么在数据库使用乐观锁version,访问冲突概率小于20%，使用乐观锁，否则使用悲观锁。\n> 乐观锁的重试次数不得小于3次。\n\n>多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中一个没有捕获抛出异常，其他任务便会自动停止运行，使用ScheduledExecutorService则没有这个问题。\n\n**反**\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163237.png)\n\n**正**\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163142.png)\n>资金相关的信息，使用悲观锁，乐观锁在获取锁的同时完成了更新操作，检验逻辑容易出现漏洞，另外乐观锁对锁冲突的解决策略有较复杂的要求，处理不当容易造成系统压力，\n> 悲观锁原则：一锁，二判，三更新，四释放\n\n>在switch块中，每一个case都要通过continue/break/return来控制\n> 必须包含一个default放在语句最后，即使他什么代码也没有\n\n> 在switch块之前判断param是否为null，不然default方法也不会执行，抛出空指针异常\n\n> 三目运算符 1:2中，注意1:2的类型对齐时，可能会抛出空指针问题\n> 自动拆箱的触发场景\n> 1和2的值只要有一个是原始类型\n> 1和2的值类型不一致，会强制拆箱升级\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513164033.png)\n\n>高并发场景中，避免使用\"等于\"判断作为中断或退出条件，建议使用大于或小于\n> 比如：判断剩余商品数量等于0，终止发放商品，但是并发处理导致奖品数量瞬间变成了负数\n\n>Api规范\n> 协议:生产环境必须使用HTTPS\n> 路径:使用名词，推荐使用复数，请求方法已经表达了动作的含义,不能使用大写url，使用下环线分割，禁止携带表示请求内容的后缀，比如.json,.xml\n> 请求方法：Get:取出资源 POST:新建资源 PUT:更新资源 DELETE: 删除资源\n> 请求内容: url参数必须无敏感信息或加密,body里带的参数必须设置Content-Type\n> 响应体:响应体body可以防止多种数据类型，由Content-Type头来确定\n\n>前后端数据列表的接口返回，如果为空，返回空数组或空集合，避免前端很多琐碎的null判断\n\n>需要使用长整数一律用String，使用Long类型，js会自动转换成number类型(双浮点),会出现精度丢失,比如订单号，不要用long类型\n\n>http请求通过url传参，不能超过2048字节\n\n>http请求通过body传参，必须控制长度，nginx默认1mb，tomcat默认2mb\n\n>在分页场景中，输入的参数小于1则显示第一页，参数大于总页数则返回最后一页\n\n>正则表达式利用预编译功能，加快匹配速度，指不要在方法体内定义规则 \n> 错误写法：Pattern pattern = Pattern.compile(\"规则)\n\n>避免使用Apache Beanutils，可以使用Spring的BeanUtils(都是浅拷贝)\n\n>获取随机值，直接使用Random对象的nextInt和nextLong方法\n\n>可以通过预检查规避的RuntimeException不应该通过catch处理\n正例：if(a != null)\n反例：try{(a.getA)} catch(NullPointException e)\n\n>不要在finally块中使用return，try块中的return执行完成后，并不会马上返回，而是继续执行finally块，再返回\n\n>rpc调用，或者二方包调用时，捕获异常必须使用Throwable类进行拦截,在catch块中判断具体接受的异常\n\n>不可用直接使用日志系统(log4j,Logback)的api，而应该使用slf4j,JCL面门框架的Api,有利于各个类的日志统一处理\n\n>所有日志至少保存15天，对于当天日志，以应用名.log保存，保存在home/admin/应用名/logs/ 目录下,\n>过往日志格式为:logName.log.保存日期 日期格式 yyyy-MM-dd\n\n>根据国家法律规定，网络运行状态，网络安全事件，个人敏感信息等操作日志，保存不少于六个月，并且网络多机备份\n\n>扩展日志命令方式appName_logType_logName.log\n\n>日志输出时，使用占位符拼接,内部实现的是StringBuilder\n> logger.debug(\"id = {} and symbol = {}\",id,symbol);\n\n>对于trace/debug/info级别的日志输出,必须先判断开关\n```java\nif(logger.isDebugEnable()){\n    logger.debug(\"id = {}\",id)\n        }\n```\n\n>禁止使用System.out或System.err输出日志或者使用e.printStackTrace打印异常堆栈\n\n>打印日志，直接调用toString方法，不要通过JSONObject.toJsonString，不然会调用get方法\n\n>单元测试必须遵守AIR，自动化，独立性，可重复\n\n>单元测试之间不能先后调用,单元测试是可以重复执行的\n\n>用户个人页面必须权限校验\n\n>用户敏感数据，必须进行数据脱敏例如 显示 130****4320,防止泄漏\n\n>用户请求传入的任何参数必须做有效性验证\n>page size 过大导致内存溢出\n>恶意的order by 导致数据库慢查询 \n> 缓存击穿\n> SSRF，既伪造一个服务端请求，攻击者利用系统的某些接口，通过这个接口向目标系统发情攻击\n> 任意重定向 \n> SQL注入，Shell注入，反序列化注入\n> 正则输入源串拒接服务ReDoS\n\n>禁止向HTML页面输出未经安全过滤或者正确转义的用户数据\n\n>表单，AJAX必须执行CSRF安全验证\n> 跨站请求伪造是一类常见的编程漏洞，对于存在csrf的网站，攻击者可以实现通过构造好的url，只有受害者用户一访问，后台便可以在用户不知情的情况下修改用户数据\n> 可以理解为攻击者盗用了你的身份，然后以你的名义发起恶意请求，这个请求对于服务器来说完全合法\n\n>url外部重定向传入的地址，必须执行白名单过滤\n\n>表示是或者否，必须使用is_xxx命名，类型是unsigned tinyint\n\n>任何字段如果为非负数，必须是unsigned\n\n>表名，字段名都必须使用小写，数据库修改字段的代价很大，MySQL在Windows下是不区分大小写的，但是在Linux下区分大小写，所有不允许有大小写\n\n>表明使用用复数形式\n\n>主键索引名为pk_字段名，唯一索引为uk_字段名,普通索引为idx_字段名\n\n>小数类型一律用decimal,禁止使用float和double\n如果您要遵守公认会计原则(GAAP)规则，则货币栏必须至少包含4位小数，以确保舍入值不超过$0.01。 在这种情况下，应该定义具有4位小数的列，如下所示：\namount DECIMAL(19,4),第一个参数是最大位数，第二个参数是小数位数\n> 如果存储范围超过decimal的范围，建议将数据拆成证书和小数分开存储\n\n>如果存储的字符串长度几乎相等，使用char定长字符串类型\n\n>varchar是可变长字符串，不预先分配内存空间，长度不要超过5000，如果长度大于这个值，使用text类型，单独出来一张表，用主键来对应，避免影响其他字段的索引值\n\n>表必备三字段，id，create_time,update_time\n> id为主键，类型为bigint unsigned，单表时自增，步长为1，\n> create_time,update_time类型均为datetime类型,\n\n>业务上具有唯一特性的字段，即使是组合字段，也必须建立唯一索引\n> 唯一索引不会影响insert速度，但是提高查找速度是明显的，\n> 另外，即时在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必有脏数据产生\n\n>超过三个表禁止join，需要join的字段，数据类型必须保持一致，\n> 多表关联查询时,被关联的字段要有索引\n> 即时双表join,也要注意表索引\n\n>在varchar字段建立索引时，必须指定索引长度，没必要全字段建立索引，根据实际的文本区分度决定索引长度\n\n>页面搜索，严禁左模糊和全模糊，如果需要请走搜索引擎，索引文件根据最左匹配原则，如果左边的值未确定，那么无法使用此索引\n\n>count(*)会统计为列值为null的行,count(列名)不会\n\n>count(distinct 字段)计算该列除null之外的不重复行\n\n>null和任何值比较都是null，而不是true或false\n\n>如果某一列的值全为空，使用IFNULL(count(列名))或者IFNULL(SUM(列名)),避免空指针\n> 使用ISNULL判断是否为NULL，ISNULL(列名)\n\n>若分页查询，count为0,应该直接返回，避免执行后面的分页语句\n\n>不得使用外键和级联\n\n>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性\n\n>数据订正，要先select，避免出现误删除\n\n>对于数据库中多个表的查询，都需要在列名前加表的别名\n\n>在表查询中，一律不使用*\n\n>不要使用resultCLass当返回参数，即使所有的属性名与数据库字段对应，也需要定义resultMap，方便配置映射关系，使字段与DO类解耦\n\n>不允许直接拿HashMap和HashTable作为查询结果输出\n> 某同学为了避免写一个resultMap,直接使用HashMap接受数据库返回结果，结果出现本地把bigint转换成long值，而由于线上数据库版本不一样，解析成BigInteger，出现问题\n\n>\n","source":"_posts/开发记录/开发规范.md","raw":"---\ntitle: 阿里巴巴开发规范.md\ndate: 2020-5-13 11:13:39\ncover: https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513111454.png\ntags:\n- 开发记录\n---\n\n>boolean不要以is开头，不然get方法就会出问题。\n\n>包名统一用单数形式。\n\n>使用完整的单词表达。\n\n>禁止出现魔法值，任何直接出现在代码中的字符串都是魔法值\n\n>使用long类型，必需使用大L,避免i1不分\n\n>equals容易出现空指针异常\n正确写法\n＂sbdl＂.equals=object\n推荐使用jdk7工具类\nequals(a，b)\n\n>Integer使用static生成-128到127的之间所以的数字，所以128=128等于false\n所以所有的包装类都要用equals比较\n\n>任何货币金额，都以最小金额单位且整形来存储\n\n>浮点型数据，基本类型不能用==，包装类型不能用equals，1.0=1.00为false，因为精度不同，应该使用compareTo\n\n>禁止在bigDicmal中传入double，应该使用valueOf,实现原理是toString\n\n>所有的对象pojo都使用包装类型，不然有默认值\n所有的局部变量都使用基本类型\n\n>pojo类必须写toString方法，如果有继承，要super.toString\n\n>日期格式化，new SImpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n大写M 月份\n小写M 分钟\n24小时是大写H\n12小时是小写的h\n\n>获取当前毫秒数，System.currentTimeMillis()，底层使用的native方法\n精确计时使用Instant类，精确到纳秒\n\n>不要在程序中写死一年的天数，应该使用LocalDate.now().lengthOfYear()获取今年天数\n\n>只要重写了equals，就要重写hashCode方法,Set和Map的key依据hashCode判断,\nString重写的hashCode和equals方法，所以可以将String对象作为key来使用\n\n>判断集合是否为空，调用isEmpty1方法,因为不是遍历实现的size==0\n\n>使用stream流中的Collectors的toMap时，一定要使用含有参数类型BinaryOperator，参数值为mergeFunction的方法，否则出现相同的key，会抛出IllegalStateException\nCollectors.toMap(key,value,(v1,v2)->v1)\n> toMap时，value也不能为空，所以在转换之前要做filter过滤\n> list.stream().filter(t->StringUtils.isNotBlank(t.getName)).collect(Collectors.toMap(t.getId,t.getName,(v1,v2)->v1))\n\n>ArrayList的subList不可用强转ArrayList,因为subList返回的内部类是SubList是ArrayList的视图，对于subList的操作都会返回到原ArrayList上\n\n>使用Map中的keySet/values/entrySet返回集合对象时，不可用对其添加元素操作，否则抛出UnsupportedOperationException\n\n>在subList场景中，对父类集合的增加和删除，均会导致子列表的遍历，增加，删除产生ConcurrentModificationException\n\n>集合转换数据的时候，list.toArray要指定参数，list.toArray(new String[0]),不然返回的object对象再转换，会出现转换异常，toArray的带参方法，length=0时，动态创建和size相同的数组\n\n>使用ArrayList.addAll底层实现还是toArray,所以使用之前要判断参数是否为空\n\n>不要在foreach中进行元素的add/remove操作。remove元素请使用Iterator，如果是并发操作请对Iterator对象加锁\n\n>获取单例对象要保证线程安全\n\n>创建线程或线程池，请指定有意义的线程名字，使用自定义线程工厂实现ThreadFactory，\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513160147.png)\n\n>线程资源必须通过线程池提供，通过ThreadPoolExecutor方法创建，\n\n>SimpleDateFormat是线程不安全的类，不要定义为static变量,在jkd8应用中，使用Instant代替Date,LocalDateTime代替Calendar,使用DateTimeFormatter代替SimpleDateFormat\n\n>必须回收自定义的ThreadLocal变量，在线程池场景下，会造成内存泄漏，建议使用\n```java\naThreadLocal.set(userInfo)\n        try{\n            \n        }finally(){\n        aThreadLocal.remove()\n        }\n```\n\n>高并发中，能锁区块就不要锁整个方法，能用对象锁就不要用类锁\n\n>对多个资源，数据库表，对象同时加锁时，注意保持一致的加锁顺序，否则可能会造成死锁\n\n>使用阻塞等待获取锁的过程中，必须在try代码块之外，并且加锁方法与try之间没有任何可能抛出的异常，避免加锁成功后，在finally无法解锁\n```java\nnew Lock();\n        lock.lock();\n        try{\n\n        }finally{\n        lock.unlock()\n        }\n```\n\n>在尝试机制获取锁中，进入业务代码块之前，必须先判断当前线程是否持有锁，锁的释放规则与锁的阻塞等待方法相同\n```java\nLock lock=new aLock();\n        boolean isLocked=lock.tryLock();\n        if(isLocked){\n        try{\n        doSomething();\n        }finally{\n        lock.unlock();\n        }\n        }\n```\n\n>并发修改时，更新同一条记录，避免更新丢失，需要加锁，要么在应用层面加锁，要么在缓存加锁，要么在数据库使用乐观锁version,访问冲突概率小于20%，使用乐观锁，否则使用悲观锁。\n> 乐观锁的重试次数不得小于3次。\n\n>多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中一个没有捕获抛出异常，其他任务便会自动停止运行，使用ScheduledExecutorService则没有这个问题。\n\n**反**\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163237.png)\n\n**正**\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163142.png)\n>资金相关的信息，使用悲观锁，乐观锁在获取锁的同时完成了更新操作，检验逻辑容易出现漏洞，另外乐观锁对锁冲突的解决策略有较复杂的要求，处理不当容易造成系统压力，\n> 悲观锁原则：一锁，二判，三更新，四释放\n\n>在switch块中，每一个case都要通过continue/break/return来控制\n> 必须包含一个default放在语句最后，即使他什么代码也没有\n\n> 在switch块之前判断param是否为null，不然default方法也不会执行，抛出空指针异常\n\n> 三目运算符 1:2中，注意1:2的类型对齐时，可能会抛出空指针问题\n> 自动拆箱的触发场景\n> 1和2的值只要有一个是原始类型\n> 1和2的值类型不一致，会强制拆箱升级\n![](https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513164033.png)\n\n>高并发场景中，避免使用\"等于\"判断作为中断或退出条件，建议使用大于或小于\n> 比如：判断剩余商品数量等于0，终止发放商品，但是并发处理导致奖品数量瞬间变成了负数\n\n>Api规范\n> 协议:生产环境必须使用HTTPS\n> 路径:使用名词，推荐使用复数，请求方法已经表达了动作的含义,不能使用大写url，使用下环线分割，禁止携带表示请求内容的后缀，比如.json,.xml\n> 请求方法：Get:取出资源 POST:新建资源 PUT:更新资源 DELETE: 删除资源\n> 请求内容: url参数必须无敏感信息或加密,body里带的参数必须设置Content-Type\n> 响应体:响应体body可以防止多种数据类型，由Content-Type头来确定\n\n>前后端数据列表的接口返回，如果为空，返回空数组或空集合，避免前端很多琐碎的null判断\n\n>需要使用长整数一律用String，使用Long类型，js会自动转换成number类型(双浮点),会出现精度丢失,比如订单号，不要用long类型\n\n>http请求通过url传参，不能超过2048字节\n\n>http请求通过body传参，必须控制长度，nginx默认1mb，tomcat默认2mb\n\n>在分页场景中，输入的参数小于1则显示第一页，参数大于总页数则返回最后一页\n\n>正则表达式利用预编译功能，加快匹配速度，指不要在方法体内定义规则 \n> 错误写法：Pattern pattern = Pattern.compile(\"规则)\n\n>避免使用Apache Beanutils，可以使用Spring的BeanUtils(都是浅拷贝)\n\n>获取随机值，直接使用Random对象的nextInt和nextLong方法\n\n>可以通过预检查规避的RuntimeException不应该通过catch处理\n正例：if(a != null)\n反例：try{(a.getA)} catch(NullPointException e)\n\n>不要在finally块中使用return，try块中的return执行完成后，并不会马上返回，而是继续执行finally块，再返回\n\n>rpc调用，或者二方包调用时，捕获异常必须使用Throwable类进行拦截,在catch块中判断具体接受的异常\n\n>不可用直接使用日志系统(log4j,Logback)的api，而应该使用slf4j,JCL面门框架的Api,有利于各个类的日志统一处理\n\n>所有日志至少保存15天，对于当天日志，以应用名.log保存，保存在home/admin/应用名/logs/ 目录下,\n>过往日志格式为:logName.log.保存日期 日期格式 yyyy-MM-dd\n\n>根据国家法律规定，网络运行状态，网络安全事件，个人敏感信息等操作日志，保存不少于六个月，并且网络多机备份\n\n>扩展日志命令方式appName_logType_logName.log\n\n>日志输出时，使用占位符拼接,内部实现的是StringBuilder\n> logger.debug(\"id = {} and symbol = {}\",id,symbol);\n\n>对于trace/debug/info级别的日志输出,必须先判断开关\n```java\nif(logger.isDebugEnable()){\n    logger.debug(\"id = {}\",id)\n        }\n```\n\n>禁止使用System.out或System.err输出日志或者使用e.printStackTrace打印异常堆栈\n\n>打印日志，直接调用toString方法，不要通过JSONObject.toJsonString，不然会调用get方法\n\n>单元测试必须遵守AIR，自动化，独立性，可重复\n\n>单元测试之间不能先后调用,单元测试是可以重复执行的\n\n>用户个人页面必须权限校验\n\n>用户敏感数据，必须进行数据脱敏例如 显示 130****4320,防止泄漏\n\n>用户请求传入的任何参数必须做有效性验证\n>page size 过大导致内存溢出\n>恶意的order by 导致数据库慢查询 \n> 缓存击穿\n> SSRF，既伪造一个服务端请求，攻击者利用系统的某些接口，通过这个接口向目标系统发情攻击\n> 任意重定向 \n> SQL注入，Shell注入，反序列化注入\n> 正则输入源串拒接服务ReDoS\n\n>禁止向HTML页面输出未经安全过滤或者正确转义的用户数据\n\n>表单，AJAX必须执行CSRF安全验证\n> 跨站请求伪造是一类常见的编程漏洞，对于存在csrf的网站，攻击者可以实现通过构造好的url，只有受害者用户一访问，后台便可以在用户不知情的情况下修改用户数据\n> 可以理解为攻击者盗用了你的身份，然后以你的名义发起恶意请求，这个请求对于服务器来说完全合法\n\n>url外部重定向传入的地址，必须执行白名单过滤\n\n>表示是或者否，必须使用is_xxx命名，类型是unsigned tinyint\n\n>任何字段如果为非负数，必须是unsigned\n\n>表名，字段名都必须使用小写，数据库修改字段的代价很大，MySQL在Windows下是不区分大小写的，但是在Linux下区分大小写，所有不允许有大小写\n\n>表明使用用复数形式\n\n>主键索引名为pk_字段名，唯一索引为uk_字段名,普通索引为idx_字段名\n\n>小数类型一律用decimal,禁止使用float和double\n如果您要遵守公认会计原则(GAAP)规则，则货币栏必须至少包含4位小数，以确保舍入值不超过$0.01。 在这种情况下，应该定义具有4位小数的列，如下所示：\namount DECIMAL(19,4),第一个参数是最大位数，第二个参数是小数位数\n> 如果存储范围超过decimal的范围，建议将数据拆成证书和小数分开存储\n\n>如果存储的字符串长度几乎相等，使用char定长字符串类型\n\n>varchar是可变长字符串，不预先分配内存空间，长度不要超过5000，如果长度大于这个值，使用text类型，单独出来一张表，用主键来对应，避免影响其他字段的索引值\n\n>表必备三字段，id，create_time,update_time\n> id为主键，类型为bigint unsigned，单表时自增，步长为1，\n> create_time,update_time类型均为datetime类型,\n\n>业务上具有唯一特性的字段，即使是组合字段，也必须建立唯一索引\n> 唯一索引不会影响insert速度，但是提高查找速度是明显的，\n> 另外，即时在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必有脏数据产生\n\n>超过三个表禁止join，需要join的字段，数据类型必须保持一致，\n> 多表关联查询时,被关联的字段要有索引\n> 即时双表join,也要注意表索引\n\n>在varchar字段建立索引时，必须指定索引长度，没必要全字段建立索引，根据实际的文本区分度决定索引长度\n\n>页面搜索，严禁左模糊和全模糊，如果需要请走搜索引擎，索引文件根据最左匹配原则，如果左边的值未确定，那么无法使用此索引\n\n>count(*)会统计为列值为null的行,count(列名)不会\n\n>count(distinct 字段)计算该列除null之外的不重复行\n\n>null和任何值比较都是null，而不是true或false\n\n>如果某一列的值全为空，使用IFNULL(count(列名))或者IFNULL(SUM(列名)),避免空指针\n> 使用ISNULL判断是否为NULL，ISNULL(列名)\n\n>若分页查询，count为0,应该直接返回，避免执行后面的分页语句\n\n>不得使用外键和级联\n\n>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性\n\n>数据订正，要先select，避免出现误删除\n\n>对于数据库中多个表的查询，都需要在列名前加表的别名\n\n>在表查询中，一律不使用*\n\n>不要使用resultCLass当返回参数，即使所有的属性名与数据库字段对应，也需要定义resultMap，方便配置映射关系，使字段与DO类解耦\n\n>不允许直接拿HashMap和HashTable作为查询结果输出\n> 某同学为了避免写一个resultMap,直接使用HashMap接受数据库返回结果，结果出现本地把bigint转换成long值，而由于线上数据库版本不一样，解析成BigInteger，出现问题\n\n>\n","slug":"开发记录/开发规范","published":1,"updated":"2022-05-30T03:05:17.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4mg2lfx0002b82m00abf3bu","content":"<blockquote>\n<p>boolean不要以is开头，不然get方法就会出问题。</p>\n</blockquote>\n<blockquote>\n<p>包名统一用单数形式。</p>\n</blockquote>\n<blockquote>\n<p>使用完整的单词表达。</p>\n</blockquote>\n<blockquote>\n<p>禁止出现魔法值，任何直接出现在代码中的字符串都是魔法值</p>\n</blockquote>\n<blockquote>\n<p>使用long类型，必需使用大L,避免i1不分</p>\n</blockquote>\n<blockquote>\n<p>equals容易出现空指针异常<br>正确写法<br>＂sbdl＂.equals=object<br>推荐使用jdk7工具类<br>equals(a，b)</p>\n</blockquote>\n<blockquote>\n<p>Integer使用static生成-128到127的之间所以的数字，所以128=128等于false<br>所以所有的包装类都要用equals比较</p>\n</blockquote>\n<blockquote>\n<p>任何货币金额，都以最小金额单位且整形来存储</p>\n</blockquote>\n<blockquote>\n<p>浮点型数据，基本类型不能用==，包装类型不能用equals，1.0=1.00为false，因为精度不同，应该使用compareTo</p>\n</blockquote>\n<blockquote>\n<p>禁止在bigDicmal中传入double，应该使用valueOf,实现原理是toString</p>\n</blockquote>\n<blockquote>\n<p>所有的对象pojo都使用包装类型，不然有默认值<br>所有的局部变量都使用基本类型</p>\n</blockquote>\n<blockquote>\n<p>pojo类必须写toString方法，如果有继承，要super.toString</p>\n</blockquote>\n<blockquote>\n<p>日期格式化，new SImpleDateFormat(“yyyy-MM-dd HH:mm:ss”)<br>大写M 月份<br>小写M 分钟<br>24小时是大写H<br>12小时是小写的h</p>\n</blockquote>\n<blockquote>\n<p>获取当前毫秒数，System.currentTimeMillis()，底层使用的native方法<br>精确计时使用Instant类，精确到纳秒</p>\n</blockquote>\n<blockquote>\n<p>不要在程序中写死一年的天数，应该使用LocalDate.now().lengthOfYear()获取今年天数</p>\n</blockquote>\n<blockquote>\n<p>只要重写了equals，就要重写hashCode方法,Set和Map的key依据hashCode判断,<br>String重写的hashCode和equals方法，所以可以将String对象作为key来使用</p>\n</blockquote>\n<blockquote>\n<p>判断集合是否为空，调用isEmpty1方法,因为不是遍历实现的size==0</p>\n</blockquote>\n<blockquote>\n<p>使用stream流中的Collectors的toMap时，一定要使用含有参数类型BinaryOperator，参数值为mergeFunction的方法，否则出现相同的key，会抛出IllegalStateException<br>Collectors.toMap(key,value,(v1,v2)-&gt;v1)<br>toMap时，value也不能为空，所以在转换之前要做filter过滤<br>list.stream().filter(t-&gt;StringUtils.isNotBlank(t.getName)).collect(Collectors.toMap(t.getId,t.getName,(v1,v2)-&gt;v1))</p>\n</blockquote>\n<blockquote>\n<p>ArrayList的subList不可用强转ArrayList,因为subList返回的内部类是SubList是ArrayList的视图，对于subList的操作都会返回到原ArrayList上</p>\n</blockquote>\n<blockquote>\n<p>使用Map中的keySet/values/entrySet返回集合对象时，不可用对其添加元素操作，否则抛出UnsupportedOperationException</p>\n</blockquote>\n<blockquote>\n<p>在subList场景中，对父类集合的增加和删除，均会导致子列表的遍历，增加，删除产生ConcurrentModificationException</p>\n</blockquote>\n<blockquote>\n<p>集合转换数据的时候，list.toArray要指定参数，list.toArray(new String[0]),不然返回的object对象再转换，会出现转换异常，toArray的带参方法，length=0时，动态创建和size相同的数组</p>\n</blockquote>\n<blockquote>\n<p>使用ArrayList.addAll底层实现还是toArray,所以使用之前要判断参数是否为空</p>\n</blockquote>\n<blockquote>\n<p>不要在foreach中进行元素的add/remove操作。remove元素请使用Iterator，如果是并发操作请对Iterator对象加锁</p>\n</blockquote>\n<blockquote>\n<p>获取单例对象要保证线程安全</p>\n</blockquote>\n<blockquote>\n<p>创建线程或线程池，请指定有意义的线程名字，使用自定义线程工厂实现ThreadFactory，<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513160147.png\"></p>\n</blockquote>\n<blockquote>\n<p>线程资源必须通过线程池提供，通过ThreadPoolExecutor方法创建，</p>\n</blockquote>\n<blockquote>\n<p>SimpleDateFormat是线程不安全的类，不要定义为static变量,在jkd8应用中，使用Instant代替Date,LocalDateTime代替Calendar,使用DateTimeFormatter代替SimpleDateFormat</p>\n</blockquote>\n<blockquote>\n<p>必须回收自定义的ThreadLocal变量，在线程池场景下，会造成内存泄漏，建议使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aThreadLocal.set(userInfo)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>()&#123;</span><br><span class=\"line\">        aThreadLocal.remove()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高并发中，能锁区块就不要锁整个方法，能用对象锁就不要用类锁</p>\n</blockquote>\n<blockquote>\n<p>对多个资源，数据库表，对象同时加锁时，注意保持一致的加锁顺序，否则可能会造成死锁</p>\n</blockquote>\n<blockquote>\n<p>使用阻塞等待获取锁的过程中，必须在try代码块之外，并且加锁方法与try之间没有任何可能抛出的异常，避免加锁成功后，在finally无法解锁</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Lock();</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在尝试机制获取锁中，进入业务代码块之前，必须先判断当前线程是否持有锁，锁的释放规则与锁的阻塞等待方法相同</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lock lock=<span class=\"keyword\">new</span> aLock();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isLocked=lock.tryLock();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isLocked)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        doSomething();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>并发修改时，更新同一条记录，避免更新丢失，需要加锁，要么在应用层面加锁，要么在缓存加锁，要么在数据库使用乐观锁version,访问冲突概率小于20%，使用乐观锁，否则使用悲观锁。<br>乐观锁的重试次数不得小于3次。</p>\n</blockquote>\n<blockquote>\n<p>多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中一个没有捕获抛出异常，其他任务便会自动停止运行，使用ScheduledExecutorService则没有这个问题。</p>\n</blockquote>\n<p><strong>反</strong><br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163237.png\"></p>\n<p><strong>正</strong><br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163142.png\"></p>\n<blockquote>\n<p>资金相关的信息，使用悲观锁，乐观锁在获取锁的同时完成了更新操作，检验逻辑容易出现漏洞，另外乐观锁对锁冲突的解决策略有较复杂的要求，处理不当容易造成系统压力，<br>悲观锁原则：一锁，二判，三更新，四释放</p>\n</blockquote>\n<blockquote>\n<p>在switch块中，每一个case都要通过continue/break/return来控制<br>必须包含一个default放在语句最后，即使他什么代码也没有</p>\n</blockquote>\n<blockquote>\n<p>在switch块之前判断param是否为null，不然default方法也不会执行，抛出空指针异常</p>\n</blockquote>\n<blockquote>\n<p>三目运算符 1:2中，注意1:2的类型对齐时，可能会抛出空指针问题<br>自动拆箱的触发场景<br>1和2的值只要有一个是原始类型<br>1和2的值类型不一致，会强制拆箱升级<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513164033.png\"></p>\n</blockquote>\n<blockquote>\n<p>高并发场景中，避免使用”等于”判断作为中断或退出条件，建议使用大于或小于<br>比如：判断剩余商品数量等于0，终止发放商品，但是并发处理导致奖品数量瞬间变成了负数</p>\n</blockquote>\n<blockquote>\n<p>Api规范<br>协议:生产环境必须使用HTTPS<br>路径:使用名词，推荐使用复数，请求方法已经表达了动作的含义,不能使用大写url，使用下环线分割，禁止携带表示请求内容的后缀，比如.json,.xml<br>请求方法：Get:取出资源 POST:新建资源 PUT:更新资源 DELETE: 删除资源<br>请求内容: url参数必须无敏感信息或加密,body里带的参数必须设置Content-Type<br>响应体:响应体body可以防止多种数据类型，由Content-Type头来确定</p>\n</blockquote>\n<blockquote>\n<p>前后端数据列表的接口返回，如果为空，返回空数组或空集合，避免前端很多琐碎的null判断</p>\n</blockquote>\n<blockquote>\n<p>需要使用长整数一律用String，使用Long类型，js会自动转换成number类型(双浮点),会出现精度丢失,比如订单号，不要用long类型</p>\n</blockquote>\n<blockquote>\n<p>http请求通过url传参，不能超过2048字节</p>\n</blockquote>\n<blockquote>\n<p>http请求通过body传参，必须控制长度，nginx默认1mb，tomcat默认2mb</p>\n</blockquote>\n<blockquote>\n<p>在分页场景中，输入的参数小于1则显示第一页，参数大于总页数则返回最后一页</p>\n</blockquote>\n<blockquote>\n<p>正则表达式利用预编译功能，加快匹配速度，指不要在方法体内定义规则<br>错误写法：Pattern pattern = Pattern.compile(“规则)</p>\n</blockquote>\n<blockquote>\n<p>避免使用Apache Beanutils，可以使用Spring的BeanUtils(都是浅拷贝)</p>\n</blockquote>\n<blockquote>\n<p>获取随机值，直接使用Random对象的nextInt和nextLong方法</p>\n</blockquote>\n<blockquote>\n<p>可以通过预检查规避的RuntimeException不应该通过catch处理<br>正例：if(a != null)<br>反例：try{(a.getA)} catch(NullPointException e)</p>\n</blockquote>\n<blockquote>\n<p>不要在finally块中使用return，try块中的return执行完成后，并不会马上返回，而是继续执行finally块，再返回</p>\n</blockquote>\n<blockquote>\n<p>rpc调用，或者二方包调用时，捕获异常必须使用Throwable类进行拦截,在catch块中判断具体接受的异常</p>\n</blockquote>\n<blockquote>\n<p>不可用直接使用日志系统(log4j,Logback)的api，而应该使用slf4j,JCL面门框架的Api,有利于各个类的日志统一处理</p>\n</blockquote>\n<blockquote>\n<p>所有日志至少保存15天，对于当天日志，以应用名.log保存，保存在home/admin/应用名/logs/ 目录下,<br>过往日志格式为:logName.log.保存日期 日期格式 yyyy-MM-dd</p>\n</blockquote>\n<blockquote>\n<p>根据国家法律规定，网络运行状态，网络安全事件，个人敏感信息等操作日志，保存不少于六个月，并且网络多机备份</p>\n</blockquote>\n<blockquote>\n<p>扩展日志命令方式appName_logType_logName.log</p>\n</blockquote>\n<blockquote>\n<p>日志输出时，使用占位符拼接,内部实现的是StringBuilder<br>logger.debug(“id = {} and symbol = {}”,id,symbol);</p>\n</blockquote>\n<blockquote>\n<p>对于trace/debug/info级别的日志输出,必须先判断开关</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(logger.isDebugEnable())&#123;</span><br><span class=\"line\">    logger.debug(<span class=\"string\">&quot;id = &#123;&#125;&quot;</span>,id)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>禁止使用System.out或System.err输出日志或者使用e.printStackTrace打印异常堆栈</p>\n</blockquote>\n<blockquote>\n<p>打印日志，直接调用toString方法，不要通过JSONObject.toJsonString，不然会调用get方法</p>\n</blockquote>\n<blockquote>\n<p>单元测试必须遵守AIR，自动化，独立性，可重复</p>\n</blockquote>\n<blockquote>\n<p>单元测试之间不能先后调用,单元测试是可以重复执行的</p>\n</blockquote>\n<blockquote>\n<p>用户个人页面必须权限校验</p>\n</blockquote>\n<blockquote>\n<p>用户敏感数据，必须进行数据脱敏例如 显示 130****4320,防止泄漏</p>\n</blockquote>\n<blockquote>\n<p>用户请求传入的任何参数必须做有效性验证<br>page size 过大导致内存溢出<br>恶意的order by 导致数据库慢查询<br>缓存击穿<br>SSRF，既伪造一个服务端请求，攻击者利用系统的某些接口，通过这个接口向目标系统发情攻击<br>任意重定向<br>SQL注入，Shell注入，反序列化注入<br>正则输入源串拒接服务ReDoS</p>\n</blockquote>\n<blockquote>\n<p>禁止向HTML页面输出未经安全过滤或者正确转义的用户数据</p>\n</blockquote>\n<blockquote>\n<p>表单，AJAX必须执行CSRF安全验证<br>跨站请求伪造是一类常见的编程漏洞，对于存在csrf的网站，攻击者可以实现通过构造好的url，只有受害者用户一访问，后台便可以在用户不知情的情况下修改用户数据<br>可以理解为攻击者盗用了你的身份，然后以你的名义发起恶意请求，这个请求对于服务器来说完全合法</p>\n</blockquote>\n<blockquote>\n<p>url外部重定向传入的地址，必须执行白名单过滤</p>\n</blockquote>\n<blockquote>\n<p>表示是或者否，必须使用is_xxx命名，类型是unsigned tinyint</p>\n</blockquote>\n<blockquote>\n<p>任何字段如果为非负数，必须是unsigned</p>\n</blockquote>\n<blockquote>\n<p>表名，字段名都必须使用小写，数据库修改字段的代价很大，MySQL在Windows下是不区分大小写的，但是在Linux下区分大小写，所有不允许有大小写</p>\n</blockquote>\n<blockquote>\n<p>表明使用用复数形式</p>\n</blockquote>\n<blockquote>\n<p>主键索引名为pk_字段名，唯一索引为uk_字段名,普通索引为idx_字段名</p>\n</blockquote>\n<blockquote>\n<p>小数类型一律用decimal,禁止使用float和double<br>如果您要遵守公认会计原则(GAAP)规则，则货币栏必须至少包含4位小数，以确保舍入值不超过$0.01。 在这种情况下，应该定义具有4位小数的列，如下所示：<br>amount DECIMAL(19,4),第一个参数是最大位数，第二个参数是小数位数<br>如果存储范围超过decimal的范围，建议将数据拆成证书和小数分开存储</p>\n</blockquote>\n<blockquote>\n<p>如果存储的字符串长度几乎相等，使用char定长字符串类型</p>\n</blockquote>\n<blockquote>\n<p>varchar是可变长字符串，不预先分配内存空间，长度不要超过5000，如果长度大于这个值，使用text类型，单独出来一张表，用主键来对应，避免影响其他字段的索引值</p>\n</blockquote>\n<blockquote>\n<p>表必备三字段，id，create_time,update_time<br>id为主键，类型为bigint unsigned，单表时自增，步长为1，<br>create_time,update_time类型均为datetime类型,</p>\n</blockquote>\n<blockquote>\n<p>业务上具有唯一特性的字段，即使是组合字段，也必须建立唯一索引<br>唯一索引不会影响insert速度，但是提高查找速度是明显的，<br>另外，即时在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必有脏数据产生</p>\n</blockquote>\n<blockquote>\n<p>超过三个表禁止join，需要join的字段，数据类型必须保持一致，<br>多表关联查询时,被关联的字段要有索引<br>即时双表join,也要注意表索引</p>\n</blockquote>\n<blockquote>\n<p>在varchar字段建立索引时，必须指定索引长度，没必要全字段建立索引，根据实际的文本区分度决定索引长度</p>\n</blockquote>\n<blockquote>\n<p>页面搜索，严禁左模糊和全模糊，如果需要请走搜索引擎，索引文件根据最左匹配原则，如果左边的值未确定，那么无法使用此索引</p>\n</blockquote>\n<blockquote>\n<p>count(*)会统计为列值为null的行,count(列名)不会</p>\n</blockquote>\n<blockquote>\n<p>count(distinct 字段)计算该列除null之外的不重复行</p>\n</blockquote>\n<blockquote>\n<p>null和任何值比较都是null，而不是true或false</p>\n</blockquote>\n<blockquote>\n<p>如果某一列的值全为空，使用IFNULL(count(列名))或者IFNULL(SUM(列名)),避免空指针<br>使用ISNULL判断是否为NULL，ISNULL(列名)</p>\n</blockquote>\n<blockquote>\n<p>若分页查询，count为0,应该直接返回，避免执行后面的分页语句</p>\n</blockquote>\n<blockquote>\n<p>不得使用外键和级联</p>\n</blockquote>\n<blockquote>\n<p>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性</p>\n</blockquote>\n<blockquote>\n<p>数据订正，要先select，避免出现误删除</p>\n</blockquote>\n<blockquote>\n<p>对于数据库中多个表的查询，都需要在列名前加表的别名</p>\n</blockquote>\n<blockquote>\n<p>在表查询中，一律不使用*</p>\n</blockquote>\n<blockquote>\n<p>不要使用resultCLass当返回参数，即使所有的属性名与数据库字段对应，也需要定义resultMap，方便配置映射关系，使字段与DO类解耦</p>\n</blockquote>\n<blockquote>\n<p>不允许直接拿HashMap和HashTable作为查询结果输出<br>某同学为了避免写一个resultMap,直接使用HashMap接受数据库返回结果，结果出现本地把bigint转换成long值，而由于线上数据库版本不一样，解析成BigInteger，出现问题</p>\n</blockquote>\n<blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>boolean不要以is开头，不然get方法就会出问题。</p>\n</blockquote>\n<blockquote>\n<p>包名统一用单数形式。</p>\n</blockquote>\n<blockquote>\n<p>使用完整的单词表达。</p>\n</blockquote>\n<blockquote>\n<p>禁止出现魔法值，任何直接出现在代码中的字符串都是魔法值</p>\n</blockquote>\n<blockquote>\n<p>使用long类型，必需使用大L,避免i1不分</p>\n</blockquote>\n<blockquote>\n<p>equals容易出现空指针异常<br>正确写法<br>＂sbdl＂.equals=object<br>推荐使用jdk7工具类<br>equals(a，b)</p>\n</blockquote>\n<blockquote>\n<p>Integer使用static生成-128到127的之间所以的数字，所以128=128等于false<br>所以所有的包装类都要用equals比较</p>\n</blockquote>\n<blockquote>\n<p>任何货币金额，都以最小金额单位且整形来存储</p>\n</blockquote>\n<blockquote>\n<p>浮点型数据，基本类型不能用==，包装类型不能用equals，1.0=1.00为false，因为精度不同，应该使用compareTo</p>\n</blockquote>\n<blockquote>\n<p>禁止在bigDicmal中传入double，应该使用valueOf,实现原理是toString</p>\n</blockquote>\n<blockquote>\n<p>所有的对象pojo都使用包装类型，不然有默认值<br>所有的局部变量都使用基本类型</p>\n</blockquote>\n<blockquote>\n<p>pojo类必须写toString方法，如果有继承，要super.toString</p>\n</blockquote>\n<blockquote>\n<p>日期格式化，new SImpleDateFormat(“yyyy-MM-dd HH:mm:ss”)<br>大写M 月份<br>小写M 分钟<br>24小时是大写H<br>12小时是小写的h</p>\n</blockquote>\n<blockquote>\n<p>获取当前毫秒数，System.currentTimeMillis()，底层使用的native方法<br>精确计时使用Instant类，精确到纳秒</p>\n</blockquote>\n<blockquote>\n<p>不要在程序中写死一年的天数，应该使用LocalDate.now().lengthOfYear()获取今年天数</p>\n</blockquote>\n<blockquote>\n<p>只要重写了equals，就要重写hashCode方法,Set和Map的key依据hashCode判断,<br>String重写的hashCode和equals方法，所以可以将String对象作为key来使用</p>\n</blockquote>\n<blockquote>\n<p>判断集合是否为空，调用isEmpty1方法,因为不是遍历实现的size==0</p>\n</blockquote>\n<blockquote>\n<p>使用stream流中的Collectors的toMap时，一定要使用含有参数类型BinaryOperator，参数值为mergeFunction的方法，否则出现相同的key，会抛出IllegalStateException<br>Collectors.toMap(key,value,(v1,v2)-&gt;v1)<br>toMap时，value也不能为空，所以在转换之前要做filter过滤<br>list.stream().filter(t-&gt;StringUtils.isNotBlank(t.getName)).collect(Collectors.toMap(t.getId,t.getName,(v1,v2)-&gt;v1))</p>\n</blockquote>\n<blockquote>\n<p>ArrayList的subList不可用强转ArrayList,因为subList返回的内部类是SubList是ArrayList的视图，对于subList的操作都会返回到原ArrayList上</p>\n</blockquote>\n<blockquote>\n<p>使用Map中的keySet/values/entrySet返回集合对象时，不可用对其添加元素操作，否则抛出UnsupportedOperationException</p>\n</blockquote>\n<blockquote>\n<p>在subList场景中，对父类集合的增加和删除，均会导致子列表的遍历，增加，删除产生ConcurrentModificationException</p>\n</blockquote>\n<blockquote>\n<p>集合转换数据的时候，list.toArray要指定参数，list.toArray(new String[0]),不然返回的object对象再转换，会出现转换异常，toArray的带参方法，length=0时，动态创建和size相同的数组</p>\n</blockquote>\n<blockquote>\n<p>使用ArrayList.addAll底层实现还是toArray,所以使用之前要判断参数是否为空</p>\n</blockquote>\n<blockquote>\n<p>不要在foreach中进行元素的add/remove操作。remove元素请使用Iterator，如果是并发操作请对Iterator对象加锁</p>\n</blockquote>\n<blockquote>\n<p>获取单例对象要保证线程安全</p>\n</blockquote>\n<blockquote>\n<p>创建线程或线程池，请指定有意义的线程名字，使用自定义线程工厂实现ThreadFactory，<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513160147.png\"></p>\n</blockquote>\n<blockquote>\n<p>线程资源必须通过线程池提供，通过ThreadPoolExecutor方法创建，</p>\n</blockquote>\n<blockquote>\n<p>SimpleDateFormat是线程不安全的类，不要定义为static变量,在jkd8应用中，使用Instant代替Date,LocalDateTime代替Calendar,使用DateTimeFormatter代替SimpleDateFormat</p>\n</blockquote>\n<blockquote>\n<p>必须回收自定义的ThreadLocal变量，在线程池场景下，会造成内存泄漏，建议使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aThreadLocal.set(userInfo)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>()&#123;</span><br><span class=\"line\">        aThreadLocal.remove()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高并发中，能锁区块就不要锁整个方法，能用对象锁就不要用类锁</p>\n</blockquote>\n<blockquote>\n<p>对多个资源，数据库表，对象同时加锁时，注意保持一致的加锁顺序，否则可能会造成死锁</p>\n</blockquote>\n<blockquote>\n<p>使用阻塞等待获取锁的过程中，必须在try代码块之外，并且加锁方法与try之间没有任何可能抛出的异常，避免加锁成功后，在finally无法解锁</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Lock();</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在尝试机制获取锁中，进入业务代码块之前，必须先判断当前线程是否持有锁，锁的释放规则与锁的阻塞等待方法相同</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lock lock=<span class=\"keyword\">new</span> aLock();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isLocked=lock.tryLock();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isLocked)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        doSomething();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>并发修改时，更新同一条记录，避免更新丢失，需要加锁，要么在应用层面加锁，要么在缓存加锁，要么在数据库使用乐观锁version,访问冲突概率小于20%，使用乐观锁，否则使用悲观锁。<br>乐观锁的重试次数不得小于3次。</p>\n</blockquote>\n<blockquote>\n<p>多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中一个没有捕获抛出异常，其他任务便会自动停止运行，使用ScheduledExecutorService则没有这个问题。</p>\n</blockquote>\n<p><strong>反</strong><br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163237.png\"></p>\n<p><strong>正</strong><br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163142.png\"></p>\n<blockquote>\n<p>资金相关的信息，使用悲观锁，乐观锁在获取锁的同时完成了更新操作，检验逻辑容易出现漏洞，另外乐观锁对锁冲突的解决策略有较复杂的要求，处理不当容易造成系统压力，<br>悲观锁原则：一锁，二判，三更新，四释放</p>\n</blockquote>\n<blockquote>\n<p>在switch块中，每一个case都要通过continue/break/return来控制<br>必须包含一个default放在语句最后，即使他什么代码也没有</p>\n</blockquote>\n<blockquote>\n<p>在switch块之前判断param是否为null，不然default方法也不会执行，抛出空指针异常</p>\n</blockquote>\n<blockquote>\n<p>三目运算符 1:2中，注意1:2的类型对齐时，可能会抛出空指针问题<br>自动拆箱的触发场景<br>1和2的值只要有一个是原始类型<br>1和2的值类型不一致，会强制拆箱升级<br><img src=\"https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513164033.png\"></p>\n</blockquote>\n<blockquote>\n<p>高并发场景中，避免使用”等于”判断作为中断或退出条件，建议使用大于或小于<br>比如：判断剩余商品数量等于0，终止发放商品，但是并发处理导致奖品数量瞬间变成了负数</p>\n</blockquote>\n<blockquote>\n<p>Api规范<br>协议:生产环境必须使用HTTPS<br>路径:使用名词，推荐使用复数，请求方法已经表达了动作的含义,不能使用大写url，使用下环线分割，禁止携带表示请求内容的后缀，比如.json,.xml<br>请求方法：Get:取出资源 POST:新建资源 PUT:更新资源 DELETE: 删除资源<br>请求内容: url参数必须无敏感信息或加密,body里带的参数必须设置Content-Type<br>响应体:响应体body可以防止多种数据类型，由Content-Type头来确定</p>\n</blockquote>\n<blockquote>\n<p>前后端数据列表的接口返回，如果为空，返回空数组或空集合，避免前端很多琐碎的null判断</p>\n</blockquote>\n<blockquote>\n<p>需要使用长整数一律用String，使用Long类型，js会自动转换成number类型(双浮点),会出现精度丢失,比如订单号，不要用long类型</p>\n</blockquote>\n<blockquote>\n<p>http请求通过url传参，不能超过2048字节</p>\n</blockquote>\n<blockquote>\n<p>http请求通过body传参，必须控制长度，nginx默认1mb，tomcat默认2mb</p>\n</blockquote>\n<blockquote>\n<p>在分页场景中，输入的参数小于1则显示第一页，参数大于总页数则返回最后一页</p>\n</blockquote>\n<blockquote>\n<p>正则表达式利用预编译功能，加快匹配速度，指不要在方法体内定义规则<br>错误写法：Pattern pattern = Pattern.compile(“规则)</p>\n</blockquote>\n<blockquote>\n<p>避免使用Apache Beanutils，可以使用Spring的BeanUtils(都是浅拷贝)</p>\n</blockquote>\n<blockquote>\n<p>获取随机值，直接使用Random对象的nextInt和nextLong方法</p>\n</blockquote>\n<blockquote>\n<p>可以通过预检查规避的RuntimeException不应该通过catch处理<br>正例：if(a != null)<br>反例：try{(a.getA)} catch(NullPointException e)</p>\n</blockquote>\n<blockquote>\n<p>不要在finally块中使用return，try块中的return执行完成后，并不会马上返回，而是继续执行finally块，再返回</p>\n</blockquote>\n<blockquote>\n<p>rpc调用，或者二方包调用时，捕获异常必须使用Throwable类进行拦截,在catch块中判断具体接受的异常</p>\n</blockquote>\n<blockquote>\n<p>不可用直接使用日志系统(log4j,Logback)的api，而应该使用slf4j,JCL面门框架的Api,有利于各个类的日志统一处理</p>\n</blockquote>\n<blockquote>\n<p>所有日志至少保存15天，对于当天日志，以应用名.log保存，保存在home/admin/应用名/logs/ 目录下,<br>过往日志格式为:logName.log.保存日期 日期格式 yyyy-MM-dd</p>\n</blockquote>\n<blockquote>\n<p>根据国家法律规定，网络运行状态，网络安全事件，个人敏感信息等操作日志，保存不少于六个月，并且网络多机备份</p>\n</blockquote>\n<blockquote>\n<p>扩展日志命令方式appName_logType_logName.log</p>\n</blockquote>\n<blockquote>\n<p>日志输出时，使用占位符拼接,内部实现的是StringBuilder<br>logger.debug(“id = {} and symbol = {}”,id,symbol);</p>\n</blockquote>\n<blockquote>\n<p>对于trace/debug/info级别的日志输出,必须先判断开关</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(logger.isDebugEnable())&#123;</span><br><span class=\"line\">    logger.debug(<span class=\"string\">&quot;id = &#123;&#125;&quot;</span>,id)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>禁止使用System.out或System.err输出日志或者使用e.printStackTrace打印异常堆栈</p>\n</blockquote>\n<blockquote>\n<p>打印日志，直接调用toString方法，不要通过JSONObject.toJsonString，不然会调用get方法</p>\n</blockquote>\n<blockquote>\n<p>单元测试必须遵守AIR，自动化，独立性，可重复</p>\n</blockquote>\n<blockquote>\n<p>单元测试之间不能先后调用,单元测试是可以重复执行的</p>\n</blockquote>\n<blockquote>\n<p>用户个人页面必须权限校验</p>\n</blockquote>\n<blockquote>\n<p>用户敏感数据，必须进行数据脱敏例如 显示 130****4320,防止泄漏</p>\n</blockquote>\n<blockquote>\n<p>用户请求传入的任何参数必须做有效性验证<br>page size 过大导致内存溢出<br>恶意的order by 导致数据库慢查询<br>缓存击穿<br>SSRF，既伪造一个服务端请求，攻击者利用系统的某些接口，通过这个接口向目标系统发情攻击<br>任意重定向<br>SQL注入，Shell注入，反序列化注入<br>正则输入源串拒接服务ReDoS</p>\n</blockquote>\n<blockquote>\n<p>禁止向HTML页面输出未经安全过滤或者正确转义的用户数据</p>\n</blockquote>\n<blockquote>\n<p>表单，AJAX必须执行CSRF安全验证<br>跨站请求伪造是一类常见的编程漏洞，对于存在csrf的网站，攻击者可以实现通过构造好的url，只有受害者用户一访问，后台便可以在用户不知情的情况下修改用户数据<br>可以理解为攻击者盗用了你的身份，然后以你的名义发起恶意请求，这个请求对于服务器来说完全合法</p>\n</blockquote>\n<blockquote>\n<p>url外部重定向传入的地址，必须执行白名单过滤</p>\n</blockquote>\n<blockquote>\n<p>表示是或者否，必须使用is_xxx命名，类型是unsigned tinyint</p>\n</blockquote>\n<blockquote>\n<p>任何字段如果为非负数，必须是unsigned</p>\n</blockquote>\n<blockquote>\n<p>表名，字段名都必须使用小写，数据库修改字段的代价很大，MySQL在Windows下是不区分大小写的，但是在Linux下区分大小写，所有不允许有大小写</p>\n</blockquote>\n<blockquote>\n<p>表明使用用复数形式</p>\n</blockquote>\n<blockquote>\n<p>主键索引名为pk_字段名，唯一索引为uk_字段名,普通索引为idx_字段名</p>\n</blockquote>\n<blockquote>\n<p>小数类型一律用decimal,禁止使用float和double<br>如果您要遵守公认会计原则(GAAP)规则，则货币栏必须至少包含4位小数，以确保舍入值不超过$0.01。 在这种情况下，应该定义具有4位小数的列，如下所示：<br>amount DECIMAL(19,4),第一个参数是最大位数，第二个参数是小数位数<br>如果存储范围超过decimal的范围，建议将数据拆成证书和小数分开存储</p>\n</blockquote>\n<blockquote>\n<p>如果存储的字符串长度几乎相等，使用char定长字符串类型</p>\n</blockquote>\n<blockquote>\n<p>varchar是可变长字符串，不预先分配内存空间，长度不要超过5000，如果长度大于这个值，使用text类型，单独出来一张表，用主键来对应，避免影响其他字段的索引值</p>\n</blockquote>\n<blockquote>\n<p>表必备三字段，id，create_time,update_time<br>id为主键，类型为bigint unsigned，单表时自增，步长为1，<br>create_time,update_time类型均为datetime类型,</p>\n</blockquote>\n<blockquote>\n<p>业务上具有唯一特性的字段，即使是组合字段，也必须建立唯一索引<br>唯一索引不会影响insert速度，但是提高查找速度是明显的，<br>另外，即时在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必有脏数据产生</p>\n</blockquote>\n<blockquote>\n<p>超过三个表禁止join，需要join的字段，数据类型必须保持一致，<br>多表关联查询时,被关联的字段要有索引<br>即时双表join,也要注意表索引</p>\n</blockquote>\n<blockquote>\n<p>在varchar字段建立索引时，必须指定索引长度，没必要全字段建立索引，根据实际的文本区分度决定索引长度</p>\n</blockquote>\n<blockquote>\n<p>页面搜索，严禁左模糊和全模糊，如果需要请走搜索引擎，索引文件根据最左匹配原则，如果左边的值未确定，那么无法使用此索引</p>\n</blockquote>\n<blockquote>\n<p>count(*)会统计为列值为null的行,count(列名)不会</p>\n</blockquote>\n<blockquote>\n<p>count(distinct 字段)计算该列除null之外的不重复行</p>\n</blockquote>\n<blockquote>\n<p>null和任何值比较都是null，而不是true或false</p>\n</blockquote>\n<blockquote>\n<p>如果某一列的值全为空，使用IFNULL(count(列名))或者IFNULL(SUM(列名)),避免空指针<br>使用ISNULL判断是否为NULL，ISNULL(列名)</p>\n</blockquote>\n<blockquote>\n<p>若分页查询，count为0,应该直接返回，避免执行后面的分页语句</p>\n</blockquote>\n<blockquote>\n<p>不得使用外键和级联</p>\n</blockquote>\n<blockquote>\n<p>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性</p>\n</blockquote>\n<blockquote>\n<p>数据订正，要先select，避免出现误删除</p>\n</blockquote>\n<blockquote>\n<p>对于数据库中多个表的查询，都需要在列名前加表的别名</p>\n</blockquote>\n<blockquote>\n<p>在表查询中，一律不使用*</p>\n</blockquote>\n<blockquote>\n<p>不要使用resultCLass当返回参数，即使所有的属性名与数据库字段对应，也需要定义resultMap，方便配置映射关系，使字段与DO类解耦</p>\n</blockquote>\n<blockquote>\n<p>不允许直接拿HashMap和HashTable作为查询结果输出<br>某同学为了避免写一个resultMap,直接使用HashMap接受数据库返回结果，结果出现本地把bigint转换成long值，而由于线上数据库版本不一样，解析成BigInteger，出现问题</p>\n</blockquote>\n<blockquote>\n</blockquote>\n"},{"title":"待学清单","date":"2022-06-20T07:57:40.000Z","cover":"/img/2.png","_content":"blockingQueue []\nredis\nmongo\ntidb\n","source":"_posts/开发记录/待学清单.md","raw":"---\ntitle: 待学清单\ndate: 2022-6-20 15:57:40\ncover: \ntags:\n- 开发记录\n---\nblockingQueue []\nredis\nmongo\ntidb\n","slug":"开发记录/待学清单","published":1,"updated":"2022-06-20T08:37:27.435Z","_id":"cl4mg2zvj0004b82m38rm0mmz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>blockingQueue []<br>redis<br>mongo<br>tidb</p>\n","site":{"data":{}},"excerpt":"","more":"<p>blockingQueue []<br>redis<br>mongo<br>tidb</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl48ai1k90001ys2mfq0scsnc","tag_id":"cl48ai1kd0004ys2m2hts10s4","_id":"cl48ai1kh0009ys2m89d11see"},{"post_id":"cl48ai1kf0005ys2m3ycw7wpf","tag_id":"cl48ai1ki000cys2m5jq81xzg","_id":"cl48ai1kl000iys2m7dy46tux"},{"post_id":"cl48ai1kf0006ys2m451q7mm3","tag_id":"cl48ai1kj000gys2mc3nqa2ue","_id":"cl48ai1km000mys2me2mu59vp"},{"post_id":"cl48ai1l5000wys2mhw539sbo","tag_id":"cl48ai1kl000kys2m8hiqc226","_id":"cl48ai1l7000zys2mfzvw3k8w"},{"post_id":"cl48ai1kj000fys2m7rli0uim","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1l80011ys2mh9s43dyr"},{"post_id":"cl48ai1kk000hys2mf3w7h1ul","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1l80013ys2m6oqc0fzv"},{"post_id":"cl48ai1kl000jys2mf8ch0git","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1l90015ys2mc0a56h51"},{"post_id":"cl48ai1kl000lys2m6c54ghww","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1la0017ys2m20588uty"},{"post_id":"cl48ai1km000nys2me0lk0bve","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1lb0019ys2m1ucdevzh"},{"post_id":"cl48ai1kn000oys2m60vvedxo","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1lb001bys2mbyjkhy5f"},{"post_id":"cl48ai1l0000rys2m6vld8o34","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1lc001dys2m3eeu05cq"},{"post_id":"cl48ai1l1000sys2m5169hzva","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1lc001fys2m0fiv5ic6"},{"post_id":"cl48ai1l4000vys2m12b3avdq","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl48ai1ld001gys2m0qid40dt"},{"post_id":"cl48ai1kg0007ys2mf1qc12ww","tag_id":"cl48ai1ki000cys2m5jq81xzg","_id":"cl4f1felh0001fg2m1ts1c04x"},{"post_id":"cl4f1felq0005fg2mc7gq2v7c","tag_id":"cl4f1feli0003fg2maov64cc0","_id":"cl4f1fels0008fg2mejseb0u8"},{"post_id":"cl4f1felf0000fg2m65imhhgh","tag_id":"cl4f1feli0003fg2maov64cc0","_id":"cl4f1fels0009fg2m3t4ug49t"},{"post_id":"cl4f1felh0002fg2me6mo3qqb","tag_id":"cl4f1feli0003fg2maov64cc0","_id":"cl4f1felt000bfg2m9melh197"},{"post_id":"cl4f1feln0004fg2m19z80jmg","tag_id":"cl4f1feli0003fg2maov64cc0","_id":"cl4f1felt000dfg2mhq4x6ppz"},{"post_id":"cl4f7mfer0000vo2mez9cc6ig","tag_id":"cl4f1felt000cfg2m8y4m2sy0","_id":"cl4f7mfev0001vo2m3lqpabw1"},{"post_id":"cl4m4maug0000iw2meu7b1ioh","tag_id":"cl4m4mpfv0001iw2mf5sdfw21","_id":"cl4m4mpfw0002iw2m1ceh85lo"},{"post_id":"cl4m62ivv0003iw2m0nc68i2g","tag_id":"cl48ai1kl000kys2m8hiqc226","_id":"cl4m62ivx0004iw2m46km9648"},{"post_id":"cl4me80fx0000b82m96zu5dn1","tag_id":"cl48ai1l6000xys2m78r0accz","_id":"cl4me90t40001b82mh21eefpy"},{"post_id":"cl4mg2lfx0002b82m00abf3bu","tag_id":"cl48ai1kl000kys2m8hiqc226","_id":"cl4mg2lfz0003b82m055v8d7r"},{"post_id":"cl4mg2zvj0004b82m38rm0mmz","tag_id":"cl48ai1kl000kys2m8hiqc226","_id":"cl4mg3ieo0005b82mfiof3fpp"}],"Tag":[{"name":"mysql","_id":"cl48ai1kd0004ys2m2hts10s4"},{"name":"万融","_id":"cl48ai1kg0008ys2m83l98vf9"},{"name":"嘿嘿","_id":"cl48ai1ki000cys2m5jq81xzg"},{"name":"工具","_id":"cl48ai1kj000gys2mc3nqa2ue"},{"name":"开发记录","_id":"cl48ai1kl000kys2m8hiqc226"},{"name":"组件","_id":"cl48ai1l6000xys2m78r0accz"},{"name":"IDEA插件","_id":"cl4f1feli0003fg2maov64cc0"},{"name":"日志","_id":"cl4f1felt000cfg2m8y4m2sy0"},{"name":"代码片段","_id":"cl4m4mpfv0001iw2mf5sdfw21"}]}}