<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>子查询的七种类型</title>
    <url>/2019/05/10/mysql/01%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%B8%83%E7%A7%8D%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="where-子查询"><a href="#where-子查询" class="headerlink" title="where 子查询"></a>where 子查询</h1><p><code>查询单值</code><br>查出每个栏目最新的商品(以good_id为最大为最新商品)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cat_id,good_id,good_name </span><br><span class="line"><span class="keyword">from</span> goods </span><br><span class="line"><span class="keyword">where</span> good_id </span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">(selct <span class="built_in">max</span>(good_id) </span><br><span class="line">    <span class="keyword">from</span> goods <span class="keyword">group</span> <span class="keyword">by</span> cat_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="form-型子查询"><a href="#form-型子查询" class="headerlink" title="form 型子查询"></a>form 型子查询</h1><p><code>多行多列的结果集</code><br>查出每个栏目最新的商品 (以 good_id 为最大为最新商品)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> cat_id,good_id,good_name </span><br><span class="line">      <span class="keyword">from</span> goods <span class="keyword">order</span> <span class="keyword">by</span> cat_id <span class="keyword">asc</span>, good_id <span class="keyword">desc</span>)</span><br><span class="line">      <span class="keyword">as</span> tep <span class="keyword">group</span> <span class="keyword">by</span> cat_id;</span><br></pre></td></tr></table></figure>

<h1 id="from"><a href="#from" class="headerlink" title="from"></a>from</h1><p>查出挂科 2 门及以上同学的平均分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>先求出挂科两门以上及两门的同学</span><br><span class="line"><span class="keyword">select</span> name,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> gk </span><br><span class="line"><span class="keyword">from</span> stu <span class="keyword">where</span> score<span class="operator">&lt;</span><span class="number">60</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">having</span> gk<span class="operator">&gt;=</span><span class="number">2</span>;</span><br><span class="line"># <span class="number">2.</span>去除多余的一行</span><br><span class="line"><span class="keyword">select</span> name </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> name,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> gk <span class="keyword">from</span> stu </span><br><span class="line"><span class="keyword">where</span> score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">having</span> gk<span class="operator">&gt;=</span><span class="number">2</span>)<span class="keyword">as</span> tmp;</span><br><span class="line"># <span class="number">3.</span>最终结果</span><br><span class="line"><span class="keyword">select</span> name ,<span class="built_in">avg</span>(score) <span class="keyword">as</span> <span class="string">&#x27;平均分&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">in</span>(<span class="keyword">select</span> name <span class="keyword">from</span> (<span class="keyword">select</span> name,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> gk </span><br><span class="line"><span class="keyword">from</span> stu <span class="keyword">where</span> score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">having</span> gk<span class="operator">&gt;=</span><span class="number">2</span>)<span class="keyword">as</span> tmp)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> name;</span><br></pre></td></tr></table></figure>
<h1 id="in"><a href="#in" class="headerlink" title="in"></a>in</h1><p>查询年龄为 20 岁的员工部门</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> department </span><br><span class="line"><span class="keyword">where</span> did <span class="keyword">in</span>(<span class="keyword">SELECT</span> did <span class="keyword">from</span> employee <span class="keyword">where</span> age<span class="operator">=</span><span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<h1 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h1><p>查询是否存在年龄大于 21 岁的员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> department <span class="keyword">where</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> did <span class="keyword">from</span> employee <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">21</span>);</span><br></pre></td></tr></table></figure>

<h1 id="any"><a href="#any" class="headerlink" title="any"></a>any</h1><p>查询满足条件的部门</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> department <span class="keyword">where</span> did<span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">SELECT</span> did <span class="keyword">from</span> employee );</span><br></pre></td></tr></table></figure>

<h1 id="all"><a href="#all" class="headerlink" title="all"></a>all</h1><p>查询满足条件的部门</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> department <span class="keyword">where</span> did<span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">SELECT</span> did <span class="keyword">from</span> employee );</span><br></pre></td></tr></table></figure>


<h1 id="比较运算符子查询"><a href="#比较运算符子查询" class="headerlink" title="比较运算符子查询"></a>比较运算符子查询</h1><p>查询赵四是哪个部门的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> department <span class="keyword">where</span> did<span class="operator">=</span> <span class="keyword">all</span>(<span class="keyword">SELECT</span> did <span class="keyword">from</span> employee <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;赵四&#x27;</span>); </span><br></pre></td></tr></table></figure>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><strong>where 型子查询：指把内部查询的结果作为外层查询的比较条件。<br>from 型子查询：把内层的查询结果当成临时表，供外层 sql 再次查询。<br>in 子查询：内层查询语句仅返回一个数据列，这个数据列的值将供外层查询语句进行比较。<br>exists 子查询：把外层的查询结果，拿到内层，看内层是否成立，简单来说后面的返回 true, 外层（也就是前面的语句）才会执行，否则不执行。<br>any 子查询：只要满足内层子查询中的任意一个比较条件，就返回一个结果作为外层查询条件。<br>all 子查询：内层子查询返回的结果需同时满足所有内层查询条件。<br>比较运算符子查询：子查询中可以使用的比较运算符如 “&gt;” “&lt;” “= ” “!=”</strong></p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>1-环境搭建</title>
    <url>/2020/05/24/%E4%B8%87%E8%9E%8D/1-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>万融</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo配置</title>
    <url>/2022/05/23/%E5%8A%A0%E5%AF%86/Picgo%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4d9187a0ef26065aecbeb1ed153df80fd505c9fe6fd01b07b0385f301829cffb">4a76fe182f6b350bda831c22429c2862534a92ee928ad097bc54c478c2ee5fc1a3ba0b92286cb2d5b5cee5bd0f425240e2b8b64dc122003615bfafe72e668e256ce90659384d4b30b02ffdc217e1d2056f7f1094a25bd5765afc6598682ca186c38a826899cdb89097d58935f09debae3490c3746a05280869479992a9b7bc4e46033a34e6ce47930394e93356eed5b33317ac1bba3128743a0859af74d64b2332ed25040ecf02b9d0b43de7572196c8c7ba7d17201cd1723f2b25a4db13b43cac9a0085d7be4cc383b64ca5bdb5d9b1fe8a5587dea4d4a427c4f1b16740d6272ab15e8a9ceb81b689fc4584db30653e1f5a0fed2e726797e48f6d2a7143c1fb1204de54b6e02e9c74b3252282187f63aff42a90f49d6ea7d6be963d39998ff2e70c0295354b48d7501d53b3c6ca2032dafb3973b66fe7d251c5e809b9e825e5dff707e91afbeb967a2b0c03dfb75179815ef332b5a7ef6579358652678d996a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>嘿嘿</tag>
      </tags>
  </entry>
  <entry>
    <title>start.spring.io 镜像</title>
    <url>/2022/05/30/%E5%B7%A5%E5%85%B7/start.spring.io%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>使用阿里云<a href="https://start.aliyun.com/">https://start.aliyun.com</a></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>开发常用网站</title>
    <url>/2022/06/10/%E5%8A%A0%E5%AF%86/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fbfb38a90c7b793d35cb31650f39b2c3a734da025b6cc88ba9a5b4f960d6397b">4a76fe182f6b350bda831c22429c28628c210b03ab79881197b1ffbba56c2028e2a2c1226692394c188e4aa6c45cf362762d1d005c45066d4260f919ea0417454f480989dbd6468ffcdaba3abb597e51a1d69a5468e5c00b96687bda190749ac76c4c6886283a6e49f658b61ce6b1a2d35735908dd07023d5893393b8abef90c19a85700189b428d304dc68010c686520201a56de3765a11abacf15884031bc3892d50f0d8d4ae962959df657a9d276b5a93481c4b9e2a7decc1f74095b36d80448e62e48b58c5f83b14f664d50104af082d0e1576f99d2d748dcb9c93d4831dda4f0b35172951ad75161f695f29de0c159d88174ea7217810d02410d6842a9ca053c2e59aabdffb8cf544527ae5645b01f67485e4689066caced0e56e4465d58f0cb85c514a4a2104f70268c7da9ccf63374025db764f19180907c9eb3cd5bb6b8f8168a01f1c4380b003c34b0cd2b2b8a8651f2b75932f3176f0ad3d49a7537a97d207b90425a36e495e8e68cd373a4938724db4230a21fecb359b67b5349eff6841ed13e329f4777f7d000fa686f24a7af722040bc88c3fb1d6675fca46cc8e12a1eb2bb5201e19208c770baeea48bc59ba8f5874eeee619b26f2069a7371f48de8600e251209eb676379f22b6d843b4169665a5829e56169d9eade2719c09a41ec4718f3d460a62dc5721a8e693d455714c3efa6dbfc62ffa5716663e3917b32be79674529bbe7458acbe0c240ec21f8c3e89867501e0caf2b33f9de2d0b9595908eff6033dc57959e15923177892b23327c5e62d74bfc86063e02aad00670feca71cc6cbf1de4c91a16f9eee8d2618d669324db9e1fc4eadb0a0da946b4c3907fe585f89b92fd3bd3aaccf9eb3eeea99308fffd4df614165efc96d352736cb17f4481946d3490d2bfdce58701e3c63d7c4cf5bf7b191ebce6f9b7e91f30aff652a09c9c926251194262c02067c178a32ecef2639818484b357a07d8f5dc17d5fe186790b5972a8f5e97df7bdb578d587ad7212bf879230ce730a322de7029c0767c990394b9bbbc1fafe4526bd391889683d79c2e5dd28721f5478543c8495ea90dfe40d54375463afa074f687fd07d5fd7045d8590fc5cd8131ea4cb4d8caf72ed67c21aa7656b63e0083bc45c573d4f3075014bdfc9cd9779055111fb3d50abca8b4d5b4df20607781f61dd91a80f84a6e3a8b9490ebbae5a0e84343ad1fbbe2bf038c1fa1bf5fd93bae198a5b1148d49766ae9149d0d9aa0319c8bb2fbd68c487eaf98e1fee21d86fa8fe7d2df1bd4ea4db69a19172840229d221004491f0102b5823514305f0264f0b07919fe749048084d6d383c1a42c7486cc06cf196a6c0cd9de827bfdc44fe2e815aa5e750901fcfb8091409055ec848594895752e5753c500ac1f774954cdd453eb300cb6aacb56f86434e1c8f308ce6c2ce4f1fd9f21762dda08c0ed55bcfd61bcc5fe147b413f79e283d52728406f0a481bbd9279b105ed4bf575d114adc27a71085589e597ef3694274d48e7893a69c25b26b379035fb83375413eaf1d29ea6e265b9e41a9c8728b46efe07bbb5ca458a9922492a92f338d01f70f00c29926f2f1fcab136c3bd09cdf13b94fa9b052a2015784776a6f567a7d867c591bab61c19188f4193e0207bfcea049af0d9e76798620cacbfcb49505dc319a904adc83c38d6ac19724e8f10dc0228457eb9899fcc5399ac2e475b5223564c79fead1a6e81453187f7d5b6d63822c8a192d3f98b62733c7080532819d84c814b91afd57c6cae5f4f03590cf9d186e17a433be78108d77db46c8944aa92cb11426cfa72d0d620350d5c5e852f305d4c152b231adf7eaa9859894956601d1e4f07353cbe4e1af824c8e550ab7516889072e74b26ff3d06c52d9372b141bc7c2c2533b667a3cb3ab233016d7804e165829522796479f6fde866dc31e23b70b9ac91dd5dfbc55679208007e45a1be0b9d3e0caba138c217a8df0c4decfbcc315cef8fdfb8c2d8ac2b3504e1f61caf11185073ed0575e2c2c4e1bf5239439e694f68c70c6e1bd7d3f3139f654f513ffa7b90442397cb1a434ed02bee2c70cef8d7b98fb3f498d6d80466922f9928864744b5b96f0a28044455d3c042600da4aeb924a9361b0d93bba24c8484dea57a068d373ad83b8d978b8cc4678c861003447e7628ae0127f829a9cd1e5284b6acbb48b5a9b848267ef1f667bbc3876ef109c1a0d512ae49c4eb7ab5c6d09a436bd855d68f120357c896efb1cedeaf885731dc7dead0139e62cdade28db49c0d962640bfeb279eecd0d230dbdfed11890e06becb621450da98de1044f61d624855a71fae47340915828790571d5e7b29bf3ffa353ccf4d2f515407c54c76117ebd6b421c0aaf8d720fff3c95f120781671f038a956e932b7e19f6ab9ee9f9769ef5ec9e27c1ee05e6307b2411c1b8b2a42d05af66d54f496796c4021ec75fb1c158c468bffe44767f1f30d4b34b7a9c48236a6542861ec4b9011f5de7a7a87d485f9651a58739791c7a3f245c26762f82115193aa817d7c137f87ef275c2a666de7714eda8d86f53c2f3253c84c92ada445d1e30ca41b4ae9f01ebdf0f10e9ec575bc9adaa00c5fcb4cacacaffab41d80e962ada5aea2fe10bf66dcaaf92db23cb745b479d37d80a4c66fc306469e27b6e9b5f3ec086663c05836966b5be6fe83740191a957e9eb36e5e3ee07360456366bffe55f093dfeebfacc409bd739487592ca2e5aa3ddcd9f8ccb820a5c0e076c76edbe770d2e2b25bb83cf4dd3ceb503313fbda3ab3c6e17fe27b6656a1bf1488a7cd799efef15ad6bdd04abee22b88f2430043bb27981031c2288e0785da524240103ccd9bc8ee1c60e6d01fc3138a44ba85b0ec985c87090d1ea02e98b6dca3ac7d4e82b7f0396afa24b55318d1ffbe44bc7396468cab1cf821f25221062ec1a99c07d8ed9b197e1fdeb9397bfa51353345808f7a1cfebf4a58e1a8feabf719e0f2f8e5038263659d6acc5cac4fa11c596fe3b7caa1d53e25</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Java泛型(TODO)</title>
    <url>/2020/05/17/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/Java%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h1><blockquote>
<p>Java泛型（generics) 提供编译时类型检测的机制，允许我们在编译时检测非法的数据结构<br>泛型的本质就是类型参数化</p>
</blockquote>
<p>使用泛型指定存储类型为String<br>指定了数据类型，减少了数据类型转换<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220517102520.png"></p>
<p>ArrayList源码<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220517105234.png"></p>
<h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><blockquote>
<p><T>泛型标识–整型形参<br>T  创建对象的时候指定具体的数据类型<br>调用构造方法的时候，或者set的时候指定的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test&lt;String&gt; stringTest = <span class="keyword">new</span> Test&lt;&gt;(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        String key = stringTest.getKey();</span><br><span class="line">        System.out.println(key);</span><br><span class="line"></span><br><span class="line">        Test&lt;Integer&gt; integerTest = <span class="keyword">new</span> Test&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        System.out.println(integerTest.getKey());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 泛型类在创建对象的时候，没有指定类型，将按照Object类型来操作</span></span><br><span class="line">        Test test = <span class="keyword">new</span> Test(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不支持基本数据类型,因为int并不是继承自Object的</span></span><br><span class="line">        <span class="comment">//Generic&lt;int&gt; generic = new Generic();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 泛型类从逻辑上可以看成不同的类型，但是实际上是相同的类型</span></span><br><span class="line">        System.out.println(integerTest.getClass() == stringTest.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="抽奖例子"><a href="#抽奖例子" class="headerlink" title="抽奖例子"></a>抽奖例子</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T product;</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加奖品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽奖</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        product = list.get(random.nextInt(list.size()));</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product&lt;String&gt; stringProduct = <span class="keyword">new</span> Product&lt;&gt;();</span><br><span class="line">        <span class="comment">// 发奖品</span></span><br><span class="line">        String[] strings = &#123;<span class="string">&quot;苹果手机&quot;</span>,<span class="string">&quot;华为手机&quot;</span>,<span class="string">&quot;扫地机器人&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            stringProduct.addProduct(strings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        String product1 = stringProduct.getProduct();</span><br><span class="line">        System.out.println(product1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发红包</span></span><br><span class="line">        Product&lt;Integer&gt; integerProduct = <span class="keyword">new</span> Product&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] ints = &#123;<span class="number">10000</span>,<span class="number">5000</span>,<span class="number">3000</span>,<span class="number">2000</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.stream(ints).forEach(value -&gt; &#123;</span><br><span class="line">            integerProduct.addProduct(value);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(integerProduct.getProduct());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>开发记录</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域请求</title>
    <url>/2020/05/18/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h1 id="什么是跨域请求"><a href="#什么是跨域请求" class="headerlink" title="什么是跨域请求"></a>什么是跨域请求</h1><blockquote>
<p>请求的目标URL和所在网页的URL的协议、域名、端口有一个不同，就算是跨域<br>https,baidu,80</p>
</blockquote>
<h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p><strong>跨域资源共享(Cross-origin resource sharing)</strong></p>
<blockquote>
<p>在跨域请求之前，先发送options请求询问服务器是否允许接下来的跨域请求<br>OPTIONS请求中添加字段<br>Origin:发起请求的域<br>Access-Control-Request-Method：将要发起的跨域请求方式（GET/PUT/POST/DELETE）<br>Access-Control-Request-Headers：将要发起的跨域请求中包含的请求头字段</p>
</blockquote>
<p>服务器通过响应字段表示是否允许这个跨域请求，浏览器收到后检查如果不符合，就拒绝</p>
<blockquote>
<p>Access-Control-Allow-Origin：允许哪些域来访问（*表示允许所有域的请求）<br>Access-Control-Allow-Methods：允许哪些请求方式<br>Access-Control-Allow-Headers：允许哪些请求头字段<br>Access-Control-Allow-Credentials：是否允许携带Cookie</p>
</blockquote>
<h1 id="两个优化"><a href="#两个优化" class="headerlink" title="两个优化"></a>两个优化</h1><p>如果是一个简单请求，那么就直接发起请求，只需要加入Origin字段表明自己的来源，服务器根据Allow-Origin判断是否符合要求<br>简单请求就是HEAD，GET，POST三者之一，请求头中的</p>
<h1 id="四种常见的-POST-提交数据方式"><a href="#四种常见的-POST-提交数据方式" class="headerlink" title="四种常见的 POST 提交数据方式"></a>四种常见的 POST 提交数据方式</h1><p>HTTP协议是由ASCII码传输的，建立在TCP/IP协议之上的应用层规范，规范把HTTP请求分为三个部分，状态行，请求头，消息主体<br>协议规定POST提交的数据必须放到消息体中，但是没有规定编码方式。<br>数据发送出去，服务端通过Content-Type字段对主体进行解析</p>
<h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><p>默认的编码方式，采用的浏览器的原生form表单，</p>
]]></content>
      <tags>
        <tag>开发记录</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴开发规范.md</title>
    <url>/2020/05/13/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<blockquote>
<p>boolean不要以is开头，不然get方法就会出问题。</p>
</blockquote>
<blockquote>
<p>包名统一用单数形式。</p>
</blockquote>
<blockquote>
<p>使用完整的单词表达。</p>
</blockquote>
<blockquote>
<p>禁止出现魔法值，任何直接出现在代码中的字符串都是魔法值</p>
</blockquote>
<blockquote>
<p>使用long类型，必需使用大L,避免i1不分</p>
</blockquote>
<blockquote>
<p>equals容易出现空指针异常<br>正确写法<br>＂sbdl＂.equals=object<br>推荐使用jdk7工具类<br>equals(a，b)</p>
</blockquote>
<blockquote>
<p>Integer使用static生成-128到127的之间所以的数字，所以128=128等于false<br>所以所有的包装类都要用equals比较</p>
</blockquote>
<blockquote>
<p>任何货币金额，都以最小金额单位且整形来存储</p>
</blockquote>
<blockquote>
<p>浮点型数据，基本类型不能用==，包装类型不能用equals，1.0=1.00为false，因为精度不同，应该使用compareTo</p>
</blockquote>
<blockquote>
<p>禁止在bigDicmal中传入double，应该使用valueOf,实现原理是toString</p>
</blockquote>
<blockquote>
<p>所有的对象pojo都使用包装类型，不然有默认值<br>所有的局部变量都使用基本类型</p>
</blockquote>
<blockquote>
<p>pojo类必须写toString方法，如果有继承，要super.toString</p>
</blockquote>
<blockquote>
<p>日期格式化，new SImpleDateFormat(“yyyy-MM-dd HH:mm:ss”)<br>大写M 月份<br>小写M 分钟<br>24小时是大写H<br>12小时是小写的h</p>
</blockquote>
<blockquote>
<p>获取当前毫秒数，System.currentTimeMillis()，底层使用的native方法<br>精确计时使用Instant类，精确到纳秒</p>
</blockquote>
<blockquote>
<p>不要在程序中写死一年的天数，应该使用LocalDate.now().lengthOfYear()获取今年天数</p>
</blockquote>
<blockquote>
<p>只要重写了equals，就要重写hashCode方法,Set和Map的key依据hashCode判断,<br>String重写的hashCode和equals方法，所以可以将String对象作为key来使用</p>
</blockquote>
<blockquote>
<p>判断集合是否为空，调用isEmpty1方法,因为不是遍历实现的size==0</p>
</blockquote>
<blockquote>
<p>使用stream流中的Collectors的toMap时，一定要使用含有参数类型BinaryOperator，参数值为mergeFunction的方法，否则出现相同的key，会抛出IllegalStateException<br>Collectors.toMap(key,value,(v1,v2)-&gt;v1)<br>toMap时，value也不能为空，所以在转换之前要做filter过滤<br>list.stream().filter(t-&gt;StringUtils.isNotBlank(t.getName)).collect(Collectors.toMap(t.getId,t.getName,(v1,v2)-&gt;v1))</p>
</blockquote>
<blockquote>
<p>ArrayList的subList不可用强转ArrayList,因为subList返回的内部类是SubList是ArrayList的视图，对于subList的操作都会返回到原ArrayList上</p>
</blockquote>
<blockquote>
<p>使用Map中的keySet/values/entrySet返回集合对象时，不可用对其添加元素操作，否则抛出UnsupportedOperationException</p>
</blockquote>
<blockquote>
<p>在subList场景中，对父类集合的增加和删除，均会导致子列表的遍历，增加，删除产生ConcurrentModificationException</p>
</blockquote>
<blockquote>
<p>集合转换数据的时候，list.toArray要指定参数，list.toArray(new String[0]),不然返回的object对象再转换，会出现转换异常，toArray的带参方法，length=0时，动态创建和size相同的数组</p>
</blockquote>
<blockquote>
<p>使用ArrayList.addAll底层实现还是toArray,所以使用之前要判断参数是否为空</p>
</blockquote>
<blockquote>
<p>不要在foreach中进行元素的add/remove操作。remove元素请使用Iterator，如果是并发操作请对Iterator对象加锁</p>
</blockquote>
<blockquote>
<p>获取单例对象要保证线程安全</p>
</blockquote>
<blockquote>
<p>创建线程或线程池，请指定有意义的线程名字，使用自定义线程工厂实现ThreadFactory，<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513160147.png"></p>
</blockquote>
<blockquote>
<p>线程资源必须通过线程池提供，通过ThreadPoolExecutor方法创建，</p>
</blockquote>
<blockquote>
<p>SimpleDateFormat是线程不安全的类，不要定义为static变量,在jkd8应用中，使用Instant代替Date,LocalDateTime代替Calendar,使用DateTimeFormatter代替SimpleDateFormat</p>
</blockquote>
<blockquote>
<p>必须回收自定义的ThreadLocal变量，在线程池场景下，会造成内存泄漏，建议使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aThreadLocal.set(userInfo)</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">finally</span>()&#123;</span><br><span class="line">        aThreadLocal.remove()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>高并发中，能锁区块就不要锁整个方法，能用对象锁就不要用类锁</p>
</blockquote>
<blockquote>
<p>对多个资源，数据库表，对象同时加锁时，注意保持一致的加锁顺序，否则可能会造成死锁</p>
</blockquote>
<blockquote>
<p>使用阻塞等待获取锁的过程中，必须在try代码块之外，并且加锁方法与try之间没有任何可能抛出的异常，避免加锁成功后，在finally无法解锁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Lock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        lock.unlock()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在尝试机制获取锁中，进入业务代码块之前，必须先判断当前线程是否持有锁，锁的释放规则与锁的阻塞等待方法相同</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock=<span class="keyword">new</span> aLock();</span><br><span class="line">        <span class="keyword">boolean</span> isLocked=lock.tryLock();</span><br><span class="line">        <span class="keyword">if</span>(isLocked)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>并发修改时，更新同一条记录，避免更新丢失，需要加锁，要么在应用层面加锁，要么在缓存加锁，要么在数据库使用乐观锁version,访问冲突概率小于20%，使用乐观锁，否则使用悲观锁。<br>乐观锁的重试次数不得小于3次。</p>
</blockquote>
<blockquote>
<p>多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中一个没有捕获抛出异常，其他任务便会自动停止运行，使用ScheduledExecutorService则没有这个问题。</p>
</blockquote>
<p><strong>反</strong><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163237.png"></p>
<p><strong>正</strong><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163142.png"></p>
<blockquote>
<p>资金相关的信息，使用悲观锁，乐观锁在获取锁的同时完成了更新操作，检验逻辑容易出现漏洞，另外乐观锁对锁冲突的解决策略有较复杂的要求，处理不当容易造成系统压力，<br>悲观锁原则：一锁，二判，三更新，四释放</p>
</blockquote>
<blockquote>
<p>在switch块中，每一个case都要通过continue/break/return来控制<br>必须包含一个default放在语句最后，即使他什么代码也没有</p>
</blockquote>
<blockquote>
<p>在switch块之前判断param是否为null，不然default方法也不会执行，抛出空指针异常</p>
</blockquote>
<blockquote>
<p>三目运算符 1:2中，注意1:2的类型对齐时，可能会抛出空指针问题<br>自动拆箱的触发场景<br>1和2的值只要有一个是原始类型<br>1和2的值类型不一致，会强制拆箱升级<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513164033.png"></p>
</blockquote>
<blockquote>
<p>高并发场景中，避免使用”等于”判断作为中断或退出条件，建议使用大于或小于<br>比如：判断剩余商品数量等于0，终止发放商品，但是并发处理导致奖品数量瞬间变成了负数</p>
</blockquote>
<blockquote>
<p>Api规范<br>协议:生产环境必须使用HTTPS<br>路径:使用名词，推荐使用复数，请求方法已经表达了动作的含义,不能使用大写url，使用下环线分割，禁止携带表示请求内容的后缀，比如.json,.xml<br>请求方法：Get:取出资源 POST:新建资源 PUT:更新资源 DELETE: 删除资源<br>请求内容: url参数必须无敏感信息或加密,body里带的参数必须设置Content-Type<br>响应体:响应体body可以防止多种数据类型，由Content-Type头来确定</p>
</blockquote>
<blockquote>
<p>前后端数据列表的接口返回，如果为空，返回空数组或空集合，避免前端很多琐碎的null判断</p>
</blockquote>
<blockquote>
<p>需要使用长整数一律用String，使用Long类型，js会自动转换成number类型(双浮点),会出现精度丢失,比如订单号，不要用long类型</p>
</blockquote>
<blockquote>
<p>http请求通过url传参，不能超过2048字节</p>
</blockquote>
<blockquote>
<p>http请求通过body传参，必须控制长度，nginx默认1mb，tomcat默认2mb</p>
</blockquote>
<blockquote>
<p>在分页场景中，输入的参数小于1则显示第一页，参数大于总页数则返回最后一页</p>
</blockquote>
<blockquote>
<p>正则表达式利用预编译功能，加快匹配速度，指不要在方法体内定义规则<br>错误写法：Pattern pattern = Pattern.compile(“规则)</p>
</blockquote>
<blockquote>
<p>避免使用Apache Beanutils，可以使用Spring的BeanUtils(都是浅拷贝)</p>
</blockquote>
<blockquote>
<p>获取随机值，直接使用Random对象的nextInt和nextLong方法</p>
</blockquote>
<blockquote>
<p>可以通过预检查规避的RuntimeException不应该通过catch处理<br>正例：if(a != null)<br>反例：try{(a.getA)} catch(NullPointException e)</p>
</blockquote>
<blockquote>
<p>不要在finally块中使用return，try块中的return执行完成后，并不会马上返回，而是继续执行finally块，再返回</p>
</blockquote>
<blockquote>
<p>rpc调用，或者二方包调用时，捕获异常必须使用Throwable类进行拦截,在catch块中判断具体接受的异常</p>
</blockquote>
<blockquote>
<p>不可用直接使用日志系统(log4j,Logback)的api，而应该使用slf4j,JCL面门框架的Api,有利于各个类的日志统一处理</p>
</blockquote>
<blockquote>
<p>所有日志至少保存15天，对于当天日志，以应用名.log保存，保存在home/admin/应用名/logs/ 目录下,<br>过往日志格式为:logName.log.保存日期 日期格式 yyyy-MM-dd</p>
</blockquote>
<blockquote>
<p>根据国家法律规定，网络运行状态，网络安全事件，个人敏感信息等操作日志，保存不少于六个月，并且网络多机备份</p>
</blockquote>
<blockquote>
<p>扩展日志命令方式appName_logType_logName.log</p>
</blockquote>
<blockquote>
<p>日志输出时，使用占位符拼接,内部实现的是StringBuilder<br>logger.debug(“id = {} and symbol = {}”,id,symbol);</p>
</blockquote>
<blockquote>
<p>对于trace/debug/info级别的日志输出,必须先判断开关</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(logger.isDebugEnable())&#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;id = &#123;&#125;&quot;</span>,id)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>禁止使用System.out或System.err输出日志或者使用e.printStackTrace打印异常堆栈</p>
</blockquote>
<blockquote>
<p>打印日志，直接调用toString方法，不要通过JSONObject.toJsonString，不然会调用get方法</p>
</blockquote>
<blockquote>
<p>单元测试必须遵守AIR，自动化，独立性，可重复</p>
</blockquote>
<blockquote>
<p>单元测试之间不能先后调用,单元测试是可以重复执行的</p>
</blockquote>
<blockquote>
<p>用户个人页面必须权限校验</p>
</blockquote>
<blockquote>
<p>用户敏感数据，必须进行数据脱敏例如 显示 130****4320,防止泄漏</p>
</blockquote>
<blockquote>
<p>用户请求传入的任何参数必须做有效性验证<br>page size 过大导致内存溢出<br>恶意的order by 导致数据库慢查询<br>缓存击穿<br>SSRF，既伪造一个服务端请求，攻击者利用系统的某些接口，通过这个接口向目标系统发情攻击<br>任意重定向<br>SQL注入，Shell注入，反序列化注入<br>正则输入源串拒接服务ReDoS</p>
</blockquote>
<blockquote>
<p>禁止向HTML页面输出未经安全过滤或者正确转义的用户数据</p>
</blockquote>
<blockquote>
<p>表单，AJAX必须执行CSRF安全验证<br>跨站请求伪造是一类常见的编程漏洞，对于存在csrf的网站，攻击者可以实现通过构造好的url，只有受害者用户一访问，后台便可以在用户不知情的情况下修改用户数据<br>可以理解为攻击者盗用了你的身份，然后以你的名义发起恶意请求，这个请求对于服务器来说完全合法</p>
</blockquote>
<blockquote>
<p>url外部重定向传入的地址，必须执行白名单过滤</p>
</blockquote>
<blockquote>
<p>表示是或者否，必须使用is_xxx命名，类型是unsigned tinyint</p>
</blockquote>
<blockquote>
<p>任何字段如果为非负数，必须是unsigned</p>
</blockquote>
<blockquote>
<p>表名，字段名都必须使用小写，数据库修改字段的代价很大，MySQL在Windows下是不区分大小写的，但是在Linux下区分大小写，所有不允许有大小写</p>
</blockquote>
<blockquote>
<p>表明使用用复数形式</p>
</blockquote>
<blockquote>
<p>主键索引名为pk_字段名，唯一索引为uk_字段名,普通索引为idx_字段名</p>
</blockquote>
<blockquote>
<p>小数类型一律用decimal,禁止使用float和double<br>如果您要遵守公认会计原则(GAAP)规则，则货币栏必须至少包含4位小数，以确保舍入值不超过$0.01。 在这种情况下，应该定义具有4位小数的列，如下所示：<br>amount DECIMAL(19,4),第一个参数是最大位数，第二个参数是小数位数<br>如果存储范围超过decimal的范围，建议将数据拆成证书和小数分开存储</p>
</blockquote>
<blockquote>
<p>如果存储的字符串长度几乎相等，使用char定长字符串类型</p>
</blockquote>
<blockquote>
<p>varchar是可变长字符串，不预先分配内存空间，长度不要超过5000，如果长度大于这个值，使用text类型，单独出来一张表，用主键来对应，避免影响其他字段的索引值</p>
</blockquote>
<blockquote>
<p>表必备三字段，id，create_time,update_time<br>id为主键，类型为bigint unsigned，单表时自增，步长为1，<br>create_time,update_time类型均为datetime类型,</p>
</blockquote>
<blockquote>
<p>业务上具有唯一特性的字段，即使是组合字段，也必须建立唯一索引<br>唯一索引不会影响insert速度，但是提高查找速度是明显的，<br>另外，即时在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必有脏数据产生</p>
</blockquote>
<blockquote>
<p>超过三个表禁止join，需要join的字段，数据类型必须保持一致，<br>多表关联查询时,被关联的字段要有索引<br>即时双表join,也要注意表索引</p>
</blockquote>
<blockquote>
<p>在varchar字段建立索引时，必须指定索引长度，没必要全字段建立索引，根据实际的文本区分度决定索引长度</p>
</blockquote>
<blockquote>
<p>页面搜索，严禁左模糊和全模糊，如果需要请走搜索引擎，索引文件根据最左匹配原则，如果左边的值未确定，那么无法使用此索引</p>
</blockquote>
<blockquote>
<p>count(*)会统计为列值为null的行,count(列名)不会</p>
</blockquote>
<blockquote>
<p>count(distinct 字段)计算该列除null之外的不重复行</p>
</blockquote>
<blockquote>
<p>null和任何值比较都是null，而不是true或false</p>
</blockquote>
<blockquote>
<p>如果某一列的值全为空，使用IFNULL(count(列名))或者IFNULL(SUM(列名)),避免空指针<br>使用ISNULL判断是否为NULL，ISNULL(列名)</p>
</blockquote>
<blockquote>
<p>若分页查询，count为0,应该直接返回，避免执行后面的分页语句</p>
</blockquote>
<blockquote>
<p>不得使用外键和级联</p>
</blockquote>
<blockquote>
<p>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性</p>
</blockquote>
<blockquote>
<p>数据订正，要先select，避免出现误删除</p>
</blockquote>
<blockquote>
<p>对于数据库中多个表的查询，都需要在列名前加表的别名</p>
</blockquote>
<blockquote>
<p>在表查询中，一律不使用*</p>
</blockquote>
<blockquote>
<p>不要使用resultCLass当返回参数，即使所有的属性名与数据库字段对应，也需要定义resultMap，方便配置映射关系，使字段与DO类解耦</p>
</blockquote>
<blockquote>
<p>不允许直接拿HashMap和HashTable作为查询结果输出<br>某同学为了避免写一个resultMap,直接使用HashMap接受数据库返回结果，结果出现本地把bigint转换成long值，而由于线上数据库版本不一样，解析成BigInteger，出现问题</p>
</blockquote>
<blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>开发记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Apollo配置中心</title>
    <url>/2020/05/24/%E7%BB%84%E4%BB%B6/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="主流配置中心产品"><a href="#主流配置中心产品" class="headerlink" title="主流配置中心产品"></a>主流配置中心产品</h1><ol>
<li>Disconf<br>2014年7月百度开源的配置管理中心，专注于各种「分布式系统配置管理」的「通用组件」和「通<br>用平台」, 提供统一的「配置管理服务」。目前已经不再维护更新。<br><a href="https://github.com/knightliao/disconf">https://github.com/knightliao/disconf</a></li>
<li>Spring Cloud Config<br>2014年9月开源，Spring Cloud 生态组件，可以和Spring Cloud体系无缝整合。<br><a href="https://github.com/spring-cloud/spring-cloud-config">https://github.com/spring-cloud/spring-cloud-config</a></li>
<li>Apollo<br>2016年5月，携程开源的配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修<br>改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场<br>景。<br><a href="https://github.com/ctripcorp/apollo">https://github.com/ctripcorp/apollo</a></li>
<li>Nacos<br>2018年6月，阿里开源的配置中心，也可以做DNS和RPC的服务发现。<br><a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a><h1 id="产品对比"><a href="#产品对比" class="headerlink" title="产品对比"></a>产品对比</h1>Apollo集成了数据库+Eureka+版本控制+权限管理+Http Long Polling … …</li>
</ol>
<p>总的来说，Apollo和Nacos相对于Spring Cloud Config的生态支持更广，在配置管理流程上做的更好，<br>其成熟度和企业级特性要强于Spring Cloud Config。Apollo相对于Nacos在配置管理做的更加全面，<br>Nacos则使用起来相对比较简洁，在对性能要求比较高的大规模场景更适合。但对于一个开源项目的选<br>型，项目上的人力投入（迭代进度、文档的完整性）、社区的活跃度（issue的数量和解决速度、<br>Contributor数量、社群的交流频次等），这些因素也比较关键。Apollo目前在国内开发者社区比较<br>热，在Github上有超过1w5颗星，在国内众多互联网公司有落地案例，可以说Apollo是目前配置中心产<br>品领域Number1的产品，所以从目前来看Apollo是最合适的配置中心选型。</p>
]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture常用记录</title>
    <url>/2020/05/27/%E7%BB%84%E4%BB%B6/CompletableFuture/</url>
    <content><![CDATA[<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">sleepMillis</span><span class="params">(Integer millis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTimeAndThread</span><span class="params">(String  tag)</span></span>&#123;</span><br><span class="line">        String result = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\t|\t&quot;</span>)</span><br><span class="line">                .add(String.valueOf(System.currentTimeMillis()))</span><br><span class="line">                .add(String.valueOf(Thread.currentThread().getId()))</span><br><span class="line">                .add(Thread.currentThread().getName())</span><br><span class="line">                .add(tag)</span><br><span class="line">                .toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我进了饭堂&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class="line">    <span class="comment">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class="line">    <span class="comment">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;厨师打饭&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;滑鸡 + 饭 好了&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我在打王者&quot;</span>);</span><br><span class="line">    <span class="comment">// join等待任务执行结束，返回任务结果</span></span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527011927.png"></p>
<h1 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h1><p>一般来说，打饭这件事情是服务员干的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我进了饭堂&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class="line">    <span class="comment">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class="line">    <span class="comment">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;滑鸡&quot;</span>;</span><br><span class="line">        <span class="comment">// thenCompose要求我们传入一个Function接口，传入参数T，经过转换后返回R</span></span><br><span class="line">        <span class="comment">// 将前面任务的结果返回给下一个任务</span></span><br><span class="line">    &#125;).thenCompose(s -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;服务员打饭&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> s+<span class="string">&quot;米饭&quot;</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我在打王者&quot;</span>);</span><br><span class="line">    <span class="comment">// join等待任务执行结束，返回任务结果</span></span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527012705.png"></p>
<h1 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h1><p>服务员还没做饭，要求厨师炒菜的时候，服务员同时蒸饭,要求炒菜和蒸饭同时返回，才能执行炒菜</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;我进了饭堂&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class="line">        <span class="comment">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class="line">        <span class="comment">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class="line">        CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;滑鸡&quot;</span>;</span><br><span class="line">        &#125;).thenCombine(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;服务员蒸饭&quot;</span>);</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;米饭&quot;</span>;</span><br><span class="line">        &#125;),(s, s2) -&gt; &#123;</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;服务员打饭&quot;</span>);</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;%s+%s 好了&quot;</span>,s,s2);</span><br><span class="line">        &#125;);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;我在打王者&quot;</span>);</span><br><span class="line">        <span class="comment">// join等待任务执行结束，返回任务结果</span></span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三个例子的基本模型"><a href="#三个例子的基本模型" class="headerlink" title="三个例子的基本模型"></a>三个例子的基本模型</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527013220.png"></p>
<h1 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h1><p><strong>我吃完了，准备结账，要求开发票，服务员收款后，要求另一个人开发票，开发票的同时，接到电话，拿到发票，回家养猪</strong><br>使用thenCompose也能执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我吃完了&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;结账，并且要求开发票&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;服务员收款 500元&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;500&quot;</span>;</span><br><span class="line">    &#125;).thenApplyAsync(s -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;服务员开发票中 面额 %s元&quot;</span>, s));</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s元发票&quot;</span>, s);</span><br><span class="line">    &#125;);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我接到电话&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;我拿到%s,准备回家&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h1><p>我等车，等100路或200路公交都能到家，谁先来上谁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;来到公交站&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;等待100或200路公交&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待100路公交车&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;100路来了&quot;</span>;</span><br><span class="line">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待200路公交&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;200路来了&quot;</span>;</span><br><span class="line">    &#125;),s -&gt; s);</span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527015316.png"></p>
<h1 id="例子六"><a href="#例子六" class="headerlink" title="例子六"></a>例子六</h1><p><strong>我坐在车上,司机撞树上了，只能打车回家了</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;来到公交站&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;等待100或200路公交&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待100路公交车&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;100路来了&quot;</span>;</span><br><span class="line">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待200路公交&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;200路来了&quot;</span>;</span><br><span class="line">    &#125;),s -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(s);</span><br><span class="line">        <span class="keyword">if</span> (s.startsWith(<span class="string">&quot;100&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;撞树上了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(throwable.getMessage());</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;打出租车回家&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;出租车到了&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="例子七"><a href="#例子七" class="headerlink" title="例子七"></a>例子七</h1><p><strong>如果100路没来之前，就撞树上了，那么应该坐上200路公交</strong></p>
]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyExcel</title>
    <url>/2020/05/25/%E7%BB%84%E4%BB%B6/EasyExcel/</url>
    <content><![CDATA[<h1 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h1><blockquote>
<p>有SAX模式和Dom模式解析，<br>Dom是一次性读取，容易造成内存溢出<br>SAX模式相对比较复杂，在Excel03和07版本，数据存储的方式截然不同，sax解析方式也不同<br>一个3M的Excel依然需要100M的内存</p>
</blockquote>
<h2 id="userModel模式"><a href="#userModel模式" class="headerlink" title="userModel模式"></a>userModel模式</h2><blockquote>
<p>大部分使用POI都是使用userModel模式，随便拷贝个代码就能用，但是转换要几百行代码，<br>而且十分消耗内存，在并发情况下，会造成OOM和频繁的full gc</p>
</blockquote>
<h1 id="EasyExcel的改进"><a href="#EasyExcel的改进" class="headerlink" title="EasyExcel的改进"></a>EasyExcel的改进</h1><h2 id="重写了POI对07版本的Excel解析"><a href="#重写了POI对07版本的Excel解析" class="headerlink" title="重写了POI对07版本的Excel解析"></a>重写了POI对07版本的Excel解析</h2><blockquote>
<p>把内存消耗从100m降到了10m左右，并且再大的Excel也不会出现内存溢出，但是03版依然依赖于SAX模式</p>
</blockquote>
]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>FastJson</title>
    <url>/2020/05/20/%E7%BB%84%E4%BB%B6/FastJson/</url>
    <content><![CDATA[<h1 id="什么是json"><a href="#什么是json" class="headerlink" title="什么是json"></a>什么是json</h1><p><strong>json是数据交换语言</strong></p>
<h1 id="Json数据格式"><a href="#Json数据格式" class="headerlink" title="Json数据格式"></a>Json数据格式</h1><p>两种数据格式，对象与数组(List集合和Map集合不同)</p>
<h1 id="TypeReference"><a href="#TypeReference" class="headerlink" title="TypeReference"></a>TypeReference</h1><p>转换Map的过程中，不能设置泛型，没有泛型是不安全的，使用TypeReference，传入转后的Map集合<br>结尾加上{},传入空的匿名内部类，因为TypeReference是protected修饰的构造方法，匿名内部类就是子类的内部对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Student&gt; map = JSON.parseObject(jsonString,<span class="keyword">new</span> TypeReference&lt;Map&lt;String,Student&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="SerializerFeature"><a href="#SerializerFeature" class="headerlink" title="SerializerFeature"></a>SerializerFeature</h1><p>进行序列化时，定制自己的需求的枚举</p>
<h2 id="设置空值为null"><a href="#设置空值为null" class="headerlink" title="设置空值为null"></a>设置空值为null</h2><p>fastJson序列化的时候，空值是不会序列化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">       student.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">       student.setAge(<span class="keyword">null</span>);</span><br><span class="line">       <span class="comment">// 将student对象转换成Json字符串</span></span><br><span class="line">       String s = JSON.toJSONString(student, SerializerFeature.WriteMapNullValue);</span><br><span class="line">       System.out.println(s);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置空字段为双引"><a href="#设置空字段为双引" class="headerlink" title="设置空字段为双引"></a>设置空字段为双引</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullStringAsEmpty);</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置空布尔为false"><a href="#设置空布尔为false" class="headerlink" title="设置空布尔为false"></a>设置空布尔为false</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setIsStudent(<span class="keyword">null</span>);</span><br><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;isStudent&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;birthday&quot;</span>:<span class="number">1653325416158</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;isStudent&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>添加格式化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse,SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24 01:06:39&quot;</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;isStudent&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(student, SerializerFeature.PrettyFormat,SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">        System.out.println(s);</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24 01:13:18&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JSONField"><a href="#JSONField" class="headerlink" title="JSONField"></a>JSONField</h1><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// name 指定序列化后的名字，</span></span><br><span class="line"><span class="meta">@JSONField(name = &quot;studentName&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24 01:16:59&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;studentName&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ordinal"><a href="#ordinal" class="headerlink" title="ordinal"></a>ordinal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定序列化后的顺序，值越小，越靠前</span></span><br><span class="line"><span class="meta">@JSONField(ordinal = 2)</span></span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure>
<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(format = &quot;YYYY-MM-dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-22-24&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h2><p>该字段是否被序列化，默认true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(serialize = false)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="deserialize"><a href="#deserialize" class="headerlink" title="deserialize"></a>deserialize</h2><p><strong>在参与反序列化的过程中，这个字段不参与成为对象的一部分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(deserialize = false)</span></span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure>






]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>foreach批量插入</title>
    <url>/2022/05/30/%E7%BB%84%E4%BB%B6/foreach%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertBatch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    User user;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">&quot;test&quot;</span> + i);</span><br><span class="line">        user.setName(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">        user.setDelFlag(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        list.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.insertBatch(list);</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span> + (start - end) + <span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;insertBatch&quot;</span>&gt;</span><br><span class="line">    <span class="function">INSERT INTO <span class="title">t_user</span></span></span><br><span class="line"><span class="function">            <span class="params">(id, name, del_flag)</span></span></span><br><span class="line"><span class="function">    VALUES</span></span><br><span class="line"><span class="function">    &lt;foreach collection </span>=<span class="string">&quot;list&quot;</span> item=<span class="string">&quot;user&quot;</span> separator =<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">         (#&#123;user.id&#125;, #&#123;user.name&#125;, #&#123;user.delFlag&#125;)</span><br><span class="line">    &lt;/foreach &gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>StringJoiner类</title>
    <url>/2020/05/27/%E7%BB%84%E4%BB%B6/StringJoiner%E7%B1%BB/</url>
    <content><![CDATA[<p>引言：在阅读项目代码是，突然看到了 StringJoiner 这个类的使用，感觉很有意思，对实际开发中也有用，实际上是运用了 StringBuilder 的一个拼接字符串的封装处理。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>StringJoiner 是 Java8 新出的一个类，用于构造由分隔符分隔的字符序列，并可选择性地从提供的前缀开始和以提供的后缀结尾。省的我们开发人员再次通过 StringBuffer 或者 StingBuilder 拼接。<br>我们查看一下一下代码，试着猜一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringJoiner sj = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">sj.add(<span class="string">&quot;George&quot;</span>).add(<span class="string">&quot;Sally&quot;</span>).add(<span class="string">&quot;Fred&quot;</span>);</span><br><span class="line">String desiredString = sj.toString();</span><br></pre></td></tr></table></figure>
<p>代码输出为[George:Sally:Fred]</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringJoiner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String prefix;<span class="comment">//前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String delimiter;<span class="comment">//间隔符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String suffix;<span class="comment">//后缀</span></span><br><span class="line">    <span class="keyword">private</span> StringBuilder value;<span class="comment">//值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String emptyValue;<span class="comment">//空值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringJoiner</span><span class="params">(CharSequence delimiter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(delimiter, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);<span class="comment">//默认前缀和后缀为&quot;&quot;,重载调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringJoiner</span><span class="params">(CharSequence delimiter,</span></span></span><br><span class="line"><span class="params"><span class="function">                        CharSequence prefix,</span></span></span><br><span class="line"><span class="params"><span class="function">                        CharSequence suffix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//间隔符，前缀和后缀判断是否为null，null将抛出异常</span></span><br><span class="line">        Objects.requireNonNull(prefix, <span class="string">&quot;The prefix must not be null&quot;</span>);</span><br><span class="line">        Objects.requireNonNull(delimiter, <span class="string">&quot;The delimiter must not be null&quot;</span>);</span><br><span class="line">        Objects.requireNonNull(suffix, <span class="string">&quot;The suffix must not be null&quot;</span>); </span><br><span class="line">        <span class="comment">// 成员变量赋值</span></span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix.toString();</span><br><span class="line">        <span class="keyword">this</span>.delimiter = delimiter.toString();</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix.toString();</span><br><span class="line">        <span class="keyword">this</span>.emptyValue = <span class="keyword">this</span>.prefix + <span class="keyword">this</span>.suffix;<span class="comment">//空值被设置为只有前后缀</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//设置空值，检查是否为null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringJoiner <span class="title">setEmptyValue</span><span class="params">(CharSequence emptyValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emptyValue = Objects.requireNonNull(emptyValue,</span><br><span class="line">            <span class="string">&quot;The empty value must not be null&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> emptyValue;<span class="comment">//没有值将返回空值或者后续设置的空值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (suffix.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> value.toString();<span class="comment">//后缀为&quot;&quot;直接返回字符串，不用添加</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	            <span class="comment">//后缀不为&quot;&quot;，添加后缀，然后直接返回字符串，修改长度</span></span><br><span class="line">                <span class="keyword">int</span> initialLength = value.length();</span><br><span class="line">                String result = value.append(suffix).toString();</span><br><span class="line">                <span class="comment">// reset value to pre-append initialLength</span></span><br><span class="line">                value.setLength(initialLength);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    初始化，先添加前缀，有了之后每次先添加间隔符，StringBuilder后续append字符串</span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringJoiner <span class="title">add</span><span class="params">(CharSequence newElement)</span> </span>&#123;</span><br><span class="line">        prepareBuilder().append(newElement);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//合并StringJoiner，注意后面StringJoiner 的前缀就不要了，后面的appen进来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringJoiner <span class="title">merge</span><span class="params">(StringJoiner other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">if</span> (other.value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> length = other.value.length();</span><br><span class="line">            <span class="comment">// lock the length so that we can seize the data to be appended</span></span><br><span class="line">            <span class="comment">// before initiate copying to avoid interference, especially when</span></span><br><span class="line">            <span class="comment">// merge &#x27;this&#x27;</span></span><br><span class="line">            StringBuilder builder = prepareBuilder();</span><br><span class="line">            builder.append(other.value, other.prefix.length(), length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//初始化，先添加前缀，有了之后每次先添加间隔符</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> StringBuilder <span class="title">prepareBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            value.append(delimiter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = <span class="keyword">new</span> StringBuilder().append(prefix);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Remember that we never actually append the suffix unless we return</span></span><br><span class="line">        <span class="comment">// the full (present) value or some sub-string or length of it, so that</span></span><br><span class="line">        <span class="comment">// we can add on more if we need to.</span></span><br><span class="line">        <span class="comment">//不忘添加后缀的长度</span></span><br><span class="line">        <span class="keyword">return</span> (value != <span class="keyword">null</span> ? value.length() + suffix.length() :</span><br><span class="line">                emptyValue.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>redis之list来实现限流</title>
    <url>/2022/05/30/%E7%BB%84%E4%BB%B6/redis%E4%B9%8Blist%E6%9D%A5%E5%AE%9E%E7%8E%B0%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String key = <span class="string">&quot;userId&quot;</span> + <span class="string">&quot;接口名&quot;</span> ;</span><br><span class="line">      <span class="keyword">int</span> listLength = llen(key);</span><br><span class="line">      <span class="keyword">if</span> (listLength &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      lpush(key, <span class="keyword">new</span> ());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">long</span> time = lindex(key, -<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (now() - time &lt; <span class="number">60</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;访问频率超过了限制，请稍后再试&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lpush(key, now);</span><br><span class="line">      ltrim(key, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="!%5B%5D(https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220530115137.png)"></p>
]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>常见多线程使用记录</title>
    <url>/2020/05/26/%E7%BB%84%E4%BB%B6/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><p>一个高并发系统，最优秀的响应时间在200ms之内<br>在调用两个service串行调用的情况下，响应已经到了400ms</p>
<h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><p>想要获取一个有返回值的线程，使用Callable</p>
<p>无法通过new Thread的方式创建Callable<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231027.png"></p>
<h2 id="使用FutureTask"><a href="#使用FutureTask" class="headerlink" title="使用FutureTask"></a>使用FutureTask</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231313.png"><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231609.png"></p>
<h2 id="使用get方式获取"><a href="#使用get方式获取" class="headerlink" title="使用get方式获取"></a>使用get方式获取</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526233057.png"><br>响应时间-200ms</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>tomcat处理线程默认是200个，如果没有get到返回值，会导致阻塞<br>解决方案，使用Servlet3.0异步请求</p>
<h1 id="Servlet3-0"><a href="#Servlet3-0" class="headerlink" title="Servlet3.0"></a>Servlet3.0</h1><p>异步直接返回Callable,return callable会回调<br>Tomcat主线程接近0ms，子线程耗时300ms<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234543.png"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234920.png"></p>
<h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>多线程调用多个接口，造成大量的并发<br>解决方案<br>使用批量接口，定时任务，或者CompletableFuture</p>
<h1 id="定时任务加批量接口"><a href="#定时任务加批量接口" class="headerlink" title="定时任务加批量接口"></a>定时任务加批量接口</h1><p>将请求装到队列中，每隔10ms批量调用，包装成list返回，通过分布式id，分发给对应的客户端</p>
<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>模拟1w个并发<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527001708.png"></p>
<h2 id="定时线程池"><a href="#定时线程池" class="headerlink" title="定时线程池"></a>定时线程池</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002334.png"></p>
<h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>包装请求，放入唯一id，请求内容，CompletableFuture<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002454.png"></p>
<h2 id="封装数据"><a href="#封装数据" class="headerlink" title="封装数据"></a>封装数据</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002728.png"></p>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p> 如果队列为空，直接return<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527003927.png"><br> 接口的参数包装<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004024.png"><br> 调用批量接口<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004254.png"></p>
<h2 id="测试单个调用的性能差距"><a href="#测试单个调用的性能差距" class="headerlink" title="测试单个调用的性能差距"></a>测试单个调用的性能差距</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004551.png"></p>
]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>微信支付</title>
    <url>/2020/05/22/%E7%BB%84%E4%BB%B6/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h1 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h1><blockquote>
<p>1.调用url地址<br>2.初始化HttpClient对象<br>3.设置是否是https<br>4.设置请求参数,一般为 Map&lt;String, String&gt;<br>5.发起post请求<br>6.获取结果 httpClient.getContent<br>7.根据return_code返回结果</p>
</blockquote>
<h1 id="扫码支付"><a href="#扫码支付" class="headerlink" title="扫码支付"></a>扫码支付</h1><h2 id="http工具"><a href="#http工具" class="headerlink" title="http工具"></a>http工具</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; param;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String xmlParam;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isHttps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHttps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isHttps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttps</span><span class="params">(<span class="keyword">boolean</span> isHttps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isHttps = isHttps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getXmlParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xmlParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXmlParam</span><span class="params">(String xmlParam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.xmlParam = xmlParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClient</span><span class="params">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.param = param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClient</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        param = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addParameter</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (param == <span class="keyword">null</span>)</span><br><span class="line">            param = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        param.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> <span class="keyword">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class="line">        HttpPost http = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        setEntity(http);</span><br><span class="line">        execute(http);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> <span class="keyword">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class="line">        HttpPut http = <span class="keyword">new</span> HttpPut(url);</span><br><span class="line">        setEntity(http);</span><br><span class="line">        execute(http);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ClientProtocolException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">            StringBuilder url = <span class="keyword">new</span> StringBuilder(<span class="keyword">this</span>.url);</span><br><span class="line">            <span class="keyword">boolean</span> isFirst = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (String key : param.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">                    url.append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    url.append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                url.append(key).append(<span class="string">&quot;=&quot;</span>).append(param.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.url = url.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        HttpGet http = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        execute(http);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set http post,put param</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEntity</span><span class="params">(HttpEntityEnclosingRequestBase http)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">            List&lt;NameValuePair&gt; nvps = <span class="keyword">new</span> LinkedList&lt;NameValuePair&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String key : param.keySet()) &#123;</span><br><span class="line">                nvps.add(<span class="keyword">new</span> BasicNameValuePair(key, param.get(key))); <span class="comment">// 参数</span></span><br><span class="line">            &#125;</span><br><span class="line">            http.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(nvps, Consts.UTF_8)); <span class="comment">// 设置参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (xmlParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">            http.setEntity(<span class="keyword">new</span> StringEntity(xmlParam, Consts.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(HttpUriRequest http)</span> <span class="keyword">throws</span> ClientProtocolException,</span></span><br><span class="line"><span class="function">            IOException </span>&#123;</span><br><span class="line">        CloseableHttpClient httpClient = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isHttps) &#123;</span><br><span class="line">                SSLContext sslContext = <span class="keyword">new</span> SSLContextBuilder()</span><br><span class="line">                        .loadTrustMaterial(<span class="keyword">null</span>, <span class="keyword">new</span> TrustStrategy() &#123;</span><br><span class="line">                            <span class="comment">// 信任所有</span></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrusted</span><span class="params">(X509Certificate[] chain,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                     String authType)</span></span></span><br><span class="line"><span class="function">                                    <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).build();</span><br><span class="line">                SSLConnectionSocketFactory sslsf = <span class="keyword">new</span> SSLConnectionSocketFactory(</span><br><span class="line">                        sslContext);</span><br><span class="line">                httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)</span><br><span class="line">                        .build();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                httpClient = HttpClients.createDefault();</span><br><span class="line">            &#125;</span><br><span class="line">            CloseableHttpResponse response = httpClient.execute(http);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (response.getStatusLine() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        statusCode = response.getStatusLine().getStatusCode();</span><br><span class="line">                    &#125;</span><br><span class="line">                    HttpEntity entity = response.getEntity();</span><br><span class="line">                    <span class="comment">// 响应内容</span></span><br><span class="line">                    content = EntityUtils.toString(entity, Consts.UTF_8);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            httpClient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> <span class="keyword">throws</span> ParseException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h2><p>获取统一下单的url地址，生成二维码图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPayUrl</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统一下单接口链接</span></span><br><span class="line">    String url = <span class="string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>;</span><br><span class="line">    HttpClient httpClient = <span class="keyword">new</span> HttpClient(url);</span><br><span class="line">    httpClient.setHttps(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 公众账号ID</span></span><br><span class="line">    param.put(<span class="string">&quot;appid&quot;</span>,appId);</span><br><span class="line">    <span class="comment">// 商户号</span></span><br><span class="line">    param.put(<span class="string">&quot;mch_id&quot;</span>,partner);</span><br><span class="line">    <span class="comment">// 随机字符串</span></span><br><span class="line">    param.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line">    <span class="comment">// 商品描述</span></span><br><span class="line">    param.put(<span class="string">&quot;body&quot;</span>,map.get(<span class="string">&quot;body&quot;</span>));</span><br><span class="line">    <span class="comment">// 商户订单号(自己项目的订单号）</span></span><br><span class="line">    param.put(<span class="string">&quot;out_trade_no&quot;</span>,map.get(<span class="string">&quot;orderId&quot;</span>));</span><br><span class="line">    <span class="comment">// 标价金额</span></span><br><span class="line">    param.put(<span class="string">&quot;total_fee&quot;</span>,map.get(<span class="string">&quot;money&quot;</span>));</span><br><span class="line">    <span class="comment">// 终端IP</span></span><br><span class="line">    param.put(<span class="string">&quot;spbill_create_ip&quot;</span>,<span class="string">&quot;192.168.200.1&quot;</span>);</span><br><span class="line">    <span class="comment">// 通知地址(异步接收微信支付结果)</span></span><br><span class="line">    param.put(<span class="string">&quot;notify_url&quot;</span>,notifyUrl);</span><br><span class="line">    <span class="comment">// 交易类型(扫码支付）</span></span><br><span class="line">    param.put(<span class="string">&quot;trade_type&quot;</span>,<span class="string">&quot;NATIVE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 附加参数，在接收的时候原样返回</span></span><br><span class="line">    Map&lt;String,String&gt; attachMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    attachMap.put(<span class="string">&quot;exchange&quot;</span>,map.get(<span class="string">&quot;exchange&quot;</span>));</span><br><span class="line">    attachMap.put(<span class="string">&quot;routingKey&quot;</span>,map.get(<span class="string">&quot;routingKey&quot;</span>));</span><br><span class="line">    param.put(<span class="string">&quot;attach&quot;</span>, JSONObject.toJSONString(attachMap));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将参数转换为xml格式，同时生成签名</span></span><br><span class="line">        String xmlParam = WXPayUtil.generateSignedXml(param, partnerkey);</span><br><span class="line">        <span class="comment">// 设置请求参数</span></span><br><span class="line">        httpClient.setXmlParam(xmlParam);</span><br><span class="line">        <span class="comment">// 发起post请求</span></span><br><span class="line">        httpClient.post();</span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        String content = httpClient.getContent();</span><br><span class="line">        <span class="comment">// 解析xml格式的数据,转换成map数据</span></span><br><span class="line">        Map&lt;String, String&gt; result = WXPayUtil.xmlToMap(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">if</span> (result.get(<span class="string">&quot;return_code&quot;</span>).equals(<span class="string">&quot;SUCCESS&quot;</span>) &amp;&amp;</span><br><span class="line">        result.get(<span class="string">&quot;result_code&quot;</span>).equals(<span class="string">&quot;SUCCESS&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> result.get(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2022/06/10/%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/maven/</url>
    <content><![CDATA[<h1 id="命令行跳过测试打包"><a href="#命令行跳过测试打包" class="headerlink" title="命令行跳过测试打包"></a>命令行跳过测试打包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>开发记录</tag>
      </tags>
  </entry>
</search>
