<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1</title>
    <url>/2022/08/12/code/1/</url>
    <content><![CDATA[<h1 id="按天批量写入"><a href="#按天批量写入" class="headerlink" title="按天批量写入"></a>按天批量写入</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date d1= DateUtils.parseDate(dateBegin,<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">Date d2= DateUtils.parseDate(dateEnd,<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(d1.after(d2) )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BaseResult(BaseMessage.FAILED.getCode(),<span class="string">&quot;开始时间不可大于结束时间&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(d2.after(d1)||d1.equals(d2))&#123;</span><br><span class="line">    liquidateFundFlowService.refreshFundFLowBizInfo(d1);</span><br><span class="line">    d1=DateUtils.addDays(d1,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tranDate = DateUtils.truncate(tranDate, Calendar.DATE);</span><br><span class="line">Date tranDateEnd = DateUtils.addDays(tranDate,<span class="number">1</span>);</span><br><span class="line">Long maxId = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">    PageHelper.offsetPage(<span class="number">0</span>, <span class="number">1000</span>, <span class="keyword">false</span>);</span><br><span class="line">    LiquidateBizFlowExample example = <span class="keyword">new</span> LiquidateBizFlowExample();</span><br><span class="line">    LiquidateBizFlowExample.Criteria criteria = example.createCriteria()</span><br><span class="line">            .andDeleteFlagEqualTo(DeleteFlag.ENABLE.getIndex())</span><br><span class="line">            .andSysCtimeGreaterThan(tranDate)</span><br><span class="line">            .andSysCtimeLessThan(tranDateEnd)</span><br><span class="line">            .andOperateTypeEqualTo(LiquidateOperateType.FUND.getCode());</span><br><span class="line">    example.setOrderByClause(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != maxId)&#123;</span><br><span class="line">        criteria.andIdGreaterThan(maxId);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;LiquidateBizFlow&gt; liquidateBizFlows = liquidateBizFlowMapper.selectByExample(example);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(liquidateBizFlows))&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    maxId = liquidateBizFlows.get(liquidateBizFlows.size() - <span class="number">1</span>).getId();</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA忽略配置文件</title>
    <url>/2022/06/27/config/Idea%E5%BF%BD%E7%95%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220627175123.png"></p>
<p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220627175318.png"></p>
<p>Move to Another Changelist 将选中的文件转移到其他的 Change list 中。 Change list 是一个重要的概念，这里需要进行重点说明。很多时候，我们开发一个项目同时并发的任务可能有很多，每个任务涉及到的文件可能都是基于业务来讲的。 所以就会存在一个这样的情况：我改了 30 个文件，其中 15 个文件是属于订单问题，剩下 15 个是会员问题，那我希望提交代码的时候是根据业务区分这些文件的， 这样我填写 Commit Message 是好描述的，同时在文件多的情况下，我也好区分这些要提交的文件业务模块。 所以我一般会把属于订单的 15 个文件转移到其他的 Change list中，先把专注点集中在 15 个会员问题的文件，先提交会员问题的 Change list，然后在提交订单会员的 Change list。 我个人还有一种用法是把一些文件暂时不提交的文件转移到一个我指定的 Change list，等后面我觉得有必要提交了，再做提交操作，这样这些文件就不会干扰我当前修改的文件提交。 总结下 Change list 的功能就是为了让你更好地管理你的版本控制文件，让你的专注点得到更好的集中，从而提供效率。</p>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo配置</title>
    <url>/2022/05/23/config/Picgo%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5a19ab359fe909d4ef13940464146117489b4cc36ab2a97a77a33961837f8bd4">4a76fe182f6b350bda831c22429c2862b5e1541874adce7c818c4d6893e28cb7555e204924d177cc1230e1e1c6e09cfa49c55d607e216f12493e6d4322aeb37b8b7294788c329aad1f712c8e3ec957115c277f23f23d8747534727287d96cf020adc370994da141c814ea9c4038b837423de40ef10790cd1f8350e67d55fe00e40feb9015846c920986821a4bf780ca74f26da7f1e68c24ede262342923cf3728f0e9511b8f6dc191fcd46b0a9c46012</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>嘿嘿</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2022/06/10/config/maven/</url>
    <content><![CDATA[<h1 id="命令行跳过测试打包"><a href="#命令行跳过测试打包" class="headerlink" title="命令行跳过测试打包"></a>命令行跳过测试打包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<h1 id="明明有本地文件，idea却找不到包"><a href="#明明有本地文件，idea却找不到包" class="headerlink" title="明明有本地文件，idea却找不到包"></a>明明有本地文件，idea却找不到包</h1><p>在idea中使用maven时常常出现配置好pom依赖后，怎么reimport都无法下载jar包。<br>解决方法：在Maven窗口中打开mvn命令，输入更新不完整依赖命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -U idea:idea</span><br></pre></td></tr></table></figure>
<p>运行，就可以下载没有的jar包。</p>
<h1 id="maven红色波浪线"><a href="#maven红色波浪线" class="headerlink" title="maven红色波浪线"></a>maven红色波浪线</h1><p>通过上面的命令jar包已经导入了成功也不能消除（reimport也不行，不过可以正常使用），可以先将带红色波浪线的依赖剪切掉，reimport一下，再将依赖粘贴回去，完美解决。</p>
<h1 id="maven查找网站"><a href="#maven查找网站" class="headerlink" title="maven查找网站"></a>maven查找网站</h1><p><a href="https://mvn.coderead.cn/">https://mvn.coderead.cn/</a></p>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>mvvm原理</title>
    <url>/2022/06/27/project/1.mvvm%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220627232342.png"></p>
<blockquote>
<p>data就是M视图层<br>el就是V视图层<br>new Vue()得到的vm实例，提供了双向绑定的能力</p>
</blockquote>
<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220627234653.png"></p>
<h1 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628000651.png"><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628000629.png"><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628000829.png"></p>
<h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><h2 id="jquery写法"><a href="#jquery写法" class="headerlink" title="jquery写法"></a>jquery写法</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628001535.png"></p>
<h2 id="v-on加点击事件"><a href="#v-on加点击事件" class="headerlink" title="v-on加点击事件"></a>v-on加点击事件</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628001928.png"><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628002000.png"></p>
<h2 id="es6语法"><a href="#es6语法" class="headerlink" title="es6语法"></a>es6语法</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628002119.png"></p>
<h2 id="es6传参"><a href="#es6传参" class="headerlink" title="es6传参"></a>es6传参</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628002533.png"><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628002928.png"></p>
<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628003240.png"></p>
<h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><h2 id="数据单向绑定"><a href="#数据单向绑定" class="headerlink" title="数据单向绑定"></a>数据单向绑定</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628010416.png"></p>
<h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220628010725.png"></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>FastJson</title>
    <url>/2020/05/20/note/FastJson/</url>
    <content><![CDATA[<h1 id="什么是json"><a href="#什么是json" class="headerlink" title="什么是json"></a>什么是json</h1><p><strong>json是数据交换语言</strong></p>
<h1 id="Json数据格式"><a href="#Json数据格式" class="headerlink" title="Json数据格式"></a>Json数据格式</h1><p>两种数据格式，对象与数组(List集合和Map集合不同)</p>
<h1 id="TypeReference"><a href="#TypeReference" class="headerlink" title="TypeReference"></a>TypeReference</h1><p>转换Map的过程中，不能设置泛型，没有泛型是不安全的，使用TypeReference，传入转后的Map集合<br>结尾加上{},传入空的匿名内部类，因为TypeReference是protected修饰的构造方法，匿名内部类就是子类的内部对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Student&gt; map = JSON.parseObject(jsonString,<span class="keyword">new</span> TypeReference&lt;Map&lt;String,Student&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="SerializerFeature"><a href="#SerializerFeature" class="headerlink" title="SerializerFeature"></a>SerializerFeature</h1><p>进行序列化时，定制自己的需求的枚举</p>
<h2 id="设置空值为null"><a href="#设置空值为null" class="headerlink" title="设置空值为null"></a>设置空值为null</h2><p>fastJson序列化的时候，空值是不会序列化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">       student.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">       student.setAge(<span class="keyword">null</span>);</span><br><span class="line">       <span class="comment">// 将student对象转换成Json字符串</span></span><br><span class="line">       String s = JSON.toJSONString(student, SerializerFeature.WriteMapNullValue);</span><br><span class="line">       System.out.println(s);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置空字段为双引"><a href="#设置空字段为双引" class="headerlink" title="设置空字段为双引"></a>设置空字段为双引</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullStringAsEmpty);</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置空布尔为false"><a href="#设置空布尔为false" class="headerlink" title="设置空布尔为false"></a>设置空布尔为false</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setIsStudent(<span class="keyword">null</span>);</span><br><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;isStudent&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;birthday&quot;</span>:<span class="number">1653325416158</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;isStudent&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>添加格式化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse,SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24 01:06:39&quot;</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;isStudent&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(student, SerializerFeature.PrettyFormat,SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">        System.out.println(s);</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24 01:13:18&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JSONField"><a href="#JSONField" class="headerlink" title="JSONField"></a>JSONField</h1><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// name 指定序列化后的名字，</span></span><br><span class="line"><span class="meta">@JSONField(name = &quot;studentName&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24 01:16:59&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;studentName&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ordinal"><a href="#ordinal" class="headerlink" title="ordinal"></a>ordinal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定序列化后的顺序，值越小，越靠前</span></span><br><span class="line"><span class="meta">@JSONField(ordinal = 2)</span></span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure>
<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(format = &quot;YYYY-MM-dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-22-24&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h2><p>该字段是否被序列化，默认true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(serialize = false)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;birthday&quot;</span>:<span class="string">&quot;2022-05-24&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="deserialize"><a href="#deserialize" class="headerlink" title="deserialize"></a>deserialize</h2><p><strong>在参与反序列化的过程中，这个字段不参与成为对象的一部分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(deserialize = false)</span></span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure>






]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql数据库单表查询</title>
    <url>/2022/06/20/note/MySql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>很多高性能的应用都会对关联查询进行分解。简单地，可以对每个表进行一次单表查询，然后将结果在应用程序中进行关联。例如，下面这个查询：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from tag</span><br><span class="line">        join tag_post on tag_post.tag_id=tag.id</span><br><span class="line">        join post on tag_post.post_id=post.id</span><br><span class="line">        where tag.tag=<span class="string">&#x27;mysql&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>可以分解成下面这些查询来代替：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Select * from tag where tag=<span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line">Select * from tag_post where tag_id=<span class="number">1234</span>;</span><br><span class="line">Select * <span class="function">from post where id <span class="title">in</span><span class="params">(<span class="number">123</span>,<span class="number">456</span>,<span class="number">567</span>,<span class="number">9989</span>,<span class="number">8909</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>事实上，用分解关联查询的方式重构查询具有如下优势：（高并发、高性能的应用中，一般建议使用单表查询）</p>
<ol>
<li><p>让缓存的效率更高。许多应用程序可以方便地缓存单表查询对应的结果对象。另外对于 MySQL 的查询缓存来说，如果关联中的某个表发生了变化，那么就无法使用查询缓存了，而拆分后，如果某个表很少改变，那么基于该表的查询就可以重复利用查询缓存结果了。</p>
</li>
<li><p>将查询分解后，执行单个查询可以减少锁的竞争。</p>
</li>
<li><p>在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。</p>
</li>
<li><p>查询本身效率也可能会有所提升。</p>
</li>
<li><p>可以减少冗余记录的查询。</p>
</li>
<li><p>更进一步，这样做相当于在应用中实现了哈希关联，而不是使用 MySQL 的嵌套环关联，某些场景哈希关联的效率更高很多。</p>
</li>
<li><p>单表查询有利于后期数据量大了分库分表，如果联合查询的话，一旦分库，原来的 sql 都需要改动。</p>
</li>
<li><p>上次看到某个 CTO 技术分享，公司规定底层禁止用 join 联合查询。数据大的时候确实慢。</p>
</li>
<li><p>联合查询或许确实快，但是 mysql 的资源通常比程序代码的资源紧张的多。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture常用记录</title>
    <url>/2020/05/27/note/CompletableFuture/</url>
    <content><![CDATA[<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">sleepMillis</span><span class="params">(Integer millis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTimeAndThread</span><span class="params">(String  tag)</span></span>&#123;</span><br><span class="line">        String result = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\t|\t&quot;</span>)</span><br><span class="line">                .add(String.valueOf(System.currentTimeMillis()))</span><br><span class="line">                .add(String.valueOf(Thread.currentThread().getId()))</span><br><span class="line">                .add(Thread.currentThread().getName())</span><br><span class="line">                .add(tag)</span><br><span class="line">                .toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我进了饭堂&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class="line">    <span class="comment">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class="line">    <span class="comment">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;厨师打饭&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;滑鸡 + 饭 好了&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我在打王者&quot;</span>);</span><br><span class="line">    <span class="comment">// join等待任务执行结束，返回任务结果</span></span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527011927.png"></p>
<h1 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h1><p>一般来说，打饭这件事情是服务员干的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我进了饭堂&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class="line">    <span class="comment">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class="line">    <span class="comment">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;滑鸡&quot;</span>;</span><br><span class="line">        <span class="comment">// thenCompose要求我们传入一个Function接口，传入参数T，经过转换后返回R</span></span><br><span class="line">        <span class="comment">// 将前面任务的结果返回给下一个任务</span></span><br><span class="line">    &#125;).thenCompose(s -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;服务员打饭&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> s+<span class="string">&quot;米饭&quot;</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我在打王者&quot;</span>);</span><br><span class="line">    <span class="comment">// join等待任务执行结束，返回任务结果</span></span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527012705.png"></p>
<h1 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h1><p>服务员还没做饭，要求厨师炒菜的时候，服务员同时蒸饭,要求炒菜和蒸饭同时返回，才能执行炒菜</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;我进了饭堂&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;我点了滑鸡饭&quot;</span>);</span><br><span class="line">        <span class="comment">// supplyAsync是java的函数式编程接口，叫提供者者，</span></span><br><span class="line">        <span class="comment">// 没有入参，只有一个返回值,因为我们返回了字符串，所以CompletableFuture的泛型是String</span></span><br><span class="line">        CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;滑鸡&quot;</span>;</span><br><span class="line">        &#125;).thenCombine(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;服务员蒸饭&quot;</span>);</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;米饭&quot;</span>;</span><br><span class="line">        &#125;),(s, s2) -&gt; &#123;</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;服务员打饭&quot;</span>);</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;%s+%s 好了&quot;</span>,s,s2);</span><br><span class="line">        &#125;);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;我在打王者&quot;</span>);</span><br><span class="line">        <span class="comment">// join等待任务执行结束，返回任务结果</span></span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,小白开吃&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三个例子的基本模型"><a href="#三个例子的基本模型" class="headerlink" title="三个例子的基本模型"></a>三个例子的基本模型</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527013220.png"></p>
<h1 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h1><p><strong>我吃完了，准备结账，要求开发票，服务员收款后，要求另一个人开发票，开发票的同时，接到电话，拿到发票，回家养猪</strong><br>使用thenCompose也能执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我吃完了&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;结账，并且要求开发票&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;服务员收款 500元&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;500&quot;</span>;</span><br><span class="line">    &#125;).thenApplyAsync(s -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;服务员开发票中 面额 %s元&quot;</span>, s));</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s元发票&quot;</span>, s);</span><br><span class="line">    &#125;);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;我接到电话&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;我拿到%s,准备回家&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h1><p>我等车，等100路或200路公交都能到家，谁先来上谁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;来到公交站&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;等待100或200路公交&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待100路公交车&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;100路来了&quot;</span>;</span><br><span class="line">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待200路公交&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;200路来了&quot;</span>;</span><br><span class="line">    &#125;),s -&gt; s);</span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527015316.png"></p>
<h1 id="例子六"><a href="#例子六" class="headerlink" title="例子六"></a>例子六</h1><p><strong>我坐在车上,司机撞树上了，只能打车回家了</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;来到公交站&quot;</span>);</span><br><span class="line">    SmallTool.printTimeAndThread(<span class="string">&quot;等待100或200路公交&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待100路公交车&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;100路来了&quot;</span>;</span><br><span class="line">    &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待200路公交&quot;</span>);</span><br><span class="line">        SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;200路来了&quot;</span>;</span><br><span class="line">    &#125;),s -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(s);</span><br><span class="line">        <span class="keyword">if</span> (s.startsWith(<span class="string">&quot;100&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;撞树上了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(throwable.getMessage());</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;打出租车回家&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;出租车到了&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s,我上车了&quot;</span>,stringCompletableFuture.join()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="例子七"><a href="#例子七" class="headerlink" title="例子七"></a>例子七</h1><p><strong>如果100路没来之前，就撞树上了，那么应该坐上200路公交</strong></p>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>常见多线程使用记录</title>
    <url>/2020/05/26/note/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><p>一个高并发系统，最优秀的响应时间在200ms之内<br>在调用两个service串行调用的情况下，响应已经到了400ms</p>
<h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><p>想要获取一个有返回值的线程，使用Callable</p>
<p>无法通过new Thread的方式创建Callable<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231027.png"></p>
<h2 id="使用FutureTask"><a href="#使用FutureTask" class="headerlink" title="使用FutureTask"></a>使用FutureTask</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231313.png"><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526231609.png"></p>
<h2 id="使用get方式获取"><a href="#使用get方式获取" class="headerlink" title="使用get方式获取"></a>使用get方式获取</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526233057.png"><br>响应时间-200ms</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>tomcat处理线程默认是200个，如果没有get到返回值，会导致阻塞<br>解决方案，使用Servlet3.0异步请求</p>
<h1 id="Servlet3-0"><a href="#Servlet3-0" class="headerlink" title="Servlet3.0"></a>Servlet3.0</h1><p>异步直接返回Callable,return callable会回调<br>Tomcat主线程接近0ms，子线程耗时300ms<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234543.png"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220526234920.png"></p>
<h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>多线程调用多个接口，造成大量的并发<br>解决方案<br>使用批量接口，定时任务，或者CompletableFuture</p>
<h1 id="定时任务加批量接口"><a href="#定时任务加批量接口" class="headerlink" title="定时任务加批量接口"></a>定时任务加批量接口</h1><p>将请求装到队列中，每隔10ms批量调用，包装成list返回，通过分布式id，分发给对应的客户端</p>
<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>模拟1w个并发<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527001708.png"></p>
<h2 id="定时线程池"><a href="#定时线程池" class="headerlink" title="定时线程池"></a>定时线程池</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002334.png"></p>
<h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>包装请求，放入唯一id，请求内容，CompletableFuture<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002454.png"></p>
<h2 id="封装数据"><a href="#封装数据" class="headerlink" title="封装数据"></a>封装数据</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527002728.png"></p>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p> 如果队列为空，直接return<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527003927.png"><br> 接口的参数包装<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004024.png"><br> 调用批量接口<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004254.png"></p>
<h2 id="测试单个调用的性能差距"><a href="#测试单个调用的性能差距" class="headerlink" title="测试单个调用的性能差距"></a>测试单个调用的性能差距</h2><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220527004551.png"></p>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴开发规范.md</title>
    <url>/2020/05/13/note/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<blockquote>
<p>boolean不要以is开头，不然get方法就会出问题。</p>
</blockquote>
<blockquote>
<p>包名统一用单数形式。</p>
</blockquote>
<blockquote>
<p>使用完整的单词表达。</p>
</blockquote>
<blockquote>
<p>禁止出现魔法值，任何直接出现在代码中的字符串都是魔法值</p>
</blockquote>
<blockquote>
<p>使用long类型，必需使用大L,避免i1不分</p>
</blockquote>
<blockquote>
<p>equals容易出现空指针异常<br>正确写法<br>＂sbdl＂.equals=object<br>推荐使用jdk7工具类<br>equals(a，b)</p>
</blockquote>
<blockquote>
<p>Integer使用static生成-128到127的之间所以的数字，所以128=128等于false<br>所以所有的包装类都要用equals比较</p>
</blockquote>
<blockquote>
<p>任何货币金额，都以最小金额单位且整形来存储</p>
</blockquote>
<blockquote>
<p>浮点型数据，基本类型不能用==，包装类型不能用equals，1.0=1.00为false，因为精度不同，应该使用compareTo</p>
</blockquote>
<blockquote>
<p>禁止在bigDicmal中传入double，应该使用valueOf,实现原理是toString</p>
</blockquote>
<blockquote>
<p>所有的对象pojo都使用包装类型，不然有默认值<br>所有的局部变量都使用基本类型</p>
</blockquote>
<blockquote>
<p>pojo类必须写toString方法，如果有继承，要super.toString</p>
</blockquote>
<blockquote>
<p>日期格式化，new SImpleDateFormat(“yyyy-MM-dd HH:mm:ss”)<br>大写M 月份<br>小写M 分钟<br>24小时是大写H<br>12小时是小写的h</p>
</blockquote>
<blockquote>
<p>获取当前毫秒数，System.currentTimeMillis()，底层使用的native方法<br>精确计时使用Instant类，精确到纳秒</p>
</blockquote>
<blockquote>
<p>不要在程序中写死一年的天数，应该使用LocalDate.now().lengthOfYear()获取今年天数</p>
</blockquote>
<blockquote>
<p>只要重写了equals，就要重写hashCode方法,Set和Map的key依据hashCode判断,<br>String重写的hashCode和equals方法，所以可以将String对象作为key来使用</p>
</blockquote>
<blockquote>
<p>判断集合是否为空，调用isEmpty1方法,因为不是遍历实现的size==0</p>
</blockquote>
<blockquote>
<p>使用stream流中的Collectors的toMap时，一定要使用含有参数类型BinaryOperator，参数值为mergeFunction的方法，否则出现相同的key，会抛出IllegalStateException<br>Collectors.toMap(key,value,(v1,v2)-&gt;v1)<br>toMap时，value也不能为空，所以在转换之前要做filter过滤<br>list.stream().filter(t-&gt;StringUtils.isNotBlank(t.getName)).collect(Collectors.toMap(t.getId,t.getName,(v1,v2)-&gt;v1))</p>
</blockquote>
<blockquote>
<p>ArrayList的subList不可用强转ArrayList,因为subList返回的内部类是SubList是ArrayList的视图，对于subList的操作都会返回到原ArrayList上</p>
</blockquote>
<blockquote>
<p>使用Map中的keySet/values/entrySet返回集合对象时，不可用对其添加元素操作，否则抛出UnsupportedOperationException</p>
</blockquote>
<blockquote>
<p>在subList场景中，对父类集合的增加和删除，均会导致子列表的遍历，增加，删除产生ConcurrentModificationException</p>
</blockquote>
<blockquote>
<p>集合转换数据的时候，list.toArray要指定参数，list.toArray(new String[0]),不然返回的object对象再转换，会出现转换异常，toArray的带参方法，length=0时，动态创建和size相同的数组</p>
</blockquote>
<blockquote>
<p>使用ArrayList.addAll底层实现还是toArray,所以使用之前要判断参数是否为空</p>
</blockquote>
<blockquote>
<p>不要在foreach中进行元素的add/remove操作。remove元素请使用Iterator，如果是并发操作请对Iterator对象加锁</p>
</blockquote>
<blockquote>
<p>获取单例对象要保证线程安全</p>
</blockquote>
<blockquote>
<p>创建线程或线程池，请指定有意义的线程名字，使用自定义线程工厂实现ThreadFactory，<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513160147.png"></p>
</blockquote>
<blockquote>
<p>线程资源必须通过线程池提供，通过ThreadPoolExecutor方法创建，</p>
</blockquote>
<blockquote>
<p>SimpleDateFormat是线程不安全的类，不要定义为static变量,在jkd8应用中，使用Instant代替Date,LocalDateTime代替Calendar,使用DateTimeFormatter代替SimpleDateFormat</p>
</blockquote>
<blockquote>
<p>必须回收自定义的ThreadLocal变量，在线程池场景下，会造成内存泄漏，建议使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aThreadLocal.set(userInfo)</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">finally</span>()&#123;</span><br><span class="line">        aThreadLocal.remove()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>高并发中，能锁区块就不要锁整个方法，能用对象锁就不要用类锁</p>
</blockquote>
<blockquote>
<p>对多个资源，数据库表，对象同时加锁时，注意保持一致的加锁顺序，否则可能会造成死锁</p>
</blockquote>
<blockquote>
<p>使用阻塞等待获取锁的过程中，必须在try代码块之外，并且加锁方法与try之间没有任何可能抛出的异常，避免加锁成功后，在finally无法解锁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Lock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        lock.unlock()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在尝试机制获取锁中，进入业务代码块之前，必须先判断当前线程是否持有锁，锁的释放规则与锁的阻塞等待方法相同</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock=<span class="keyword">new</span> aLock();</span><br><span class="line">        <span class="keyword">boolean</span> isLocked=lock.tryLock();</span><br><span class="line">        <span class="keyword">if</span>(isLocked)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>并发修改时，更新同一条记录，避免更新丢失，需要加锁，要么在应用层面加锁，要么在缓存加锁，要么在数据库使用乐观锁version,访问冲突概率小于20%，使用乐观锁，否则使用悲观锁。<br>乐观锁的重试次数不得小于3次。</p>
</blockquote>
<blockquote>
<p>多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中一个没有捕获抛出异常，其他任务便会自动停止运行，使用ScheduledExecutorService则没有这个问题。</p>
</blockquote>
<p><strong>反</strong><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163237.png"></p>
<p><strong>正</strong><br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513163142.png"></p>
<blockquote>
<p>资金相关的信息，使用悲观锁，乐观锁在获取锁的同时完成了更新操作，检验逻辑容易出现漏洞，另外乐观锁对锁冲突的解决策略有较复杂的要求，处理不当容易造成系统压力，<br>悲观锁原则：一锁，二判，三更新，四释放</p>
</blockquote>
<blockquote>
<p>在switch块中，每一个case都要通过continue/break/return来控制<br>必须包含一个default放在语句最后，即使他什么代码也没有</p>
</blockquote>
<blockquote>
<p>在switch块之前判断param是否为null，不然default方法也不会执行，抛出空指针异常</p>
</blockquote>
<blockquote>
<p>三目运算符 1:2中，注意1:2的类型对齐时，可能会抛出空指针问题<br>自动拆箱的触发场景<br>1和2的值只要有一个是原始类型<br>1和2的值类型不一致，会强制拆箱升级<br><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com/img/20220513164033.png"></p>
</blockquote>
<blockquote>
<p>高并发场景中，避免使用”等于”判断作为中断或退出条件，建议使用大于或小于<br>比如：判断剩余商品数量等于0，终止发放商品，但是并发处理导致奖品数量瞬间变成了负数</p>
</blockquote>
<blockquote>
<p>Api规范<br>协议:生产环境必须使用HTTPS<br>路径:使用名词，推荐使用复数，请求方法已经表达了动作的含义,不能使用大写url，使用下环线分割，禁止携带表示请求内容的后缀，比如.json,.xml<br>请求方法：Get:取出资源 POST:新建资源 PUT:更新资源 DELETE: 删除资源<br>请求内容: url参数必须无敏感信息或加密,body里带的参数必须设置Content-Type<br>响应体:响应体body可以防止多种数据类型，由Content-Type头来确定</p>
</blockquote>
<blockquote>
<p>前后端数据列表的接口返回，如果为空，返回空数组或空集合，避免前端很多琐碎的null判断</p>
</blockquote>
<blockquote>
<p>需要使用长整数一律用String，使用Long类型，js会自动转换成number类型(双浮点),会出现精度丢失,比如订单号，不要用long类型</p>
</blockquote>
<blockquote>
<p>http请求通过url传参，不能超过2048字节</p>
</blockquote>
<blockquote>
<p>http请求通过body传参，必须控制长度，nginx默认1mb，tomcat默认2mb</p>
</blockquote>
<blockquote>
<p>在分页场景中，输入的参数小于1则显示第一页，参数大于总页数则返回最后一页</p>
</blockquote>
<blockquote>
<p>正则表达式利用预编译功能，加快匹配速度，指不要在方法体内定义规则<br>错误写法：Pattern pattern = Pattern.compile(“规则)</p>
</blockquote>
<blockquote>
<p>避免使用Apache Beanutils，可以使用Spring的BeanUtils(都是浅拷贝)</p>
</blockquote>
<blockquote>
<p>获取随机值，直接使用Random对象的nextInt和nextLong方法</p>
</blockquote>
<blockquote>
<p>可以通过预检查规避的RuntimeException不应该通过catch处理<br>正例：if(a != null)<br>反例：try{(a.getA)} catch(NullPointException e)</p>
</blockquote>
<blockquote>
<p>不要在finally块中使用return，try块中的return执行完成后，并不会马上返回，而是继续执行finally块，再返回</p>
</blockquote>
<blockquote>
<p>rpc调用，或者二方包调用时，捕获异常必须使用Throwable类进行拦截,在catch块中判断具体接受的异常</p>
</blockquote>
<blockquote>
<p>不可用直接使用日志系统(log4j,Logback)的api，而应该使用slf4j,JCL面门框架的Api,有利于各个类的日志统一处理</p>
</blockquote>
<blockquote>
<p>所有日志至少保存15天，对于当天日志，以应用名.log保存，保存在home/admin/应用名/logs/ 目录下,<br>过往日志格式为:logName.log.保存日期 日期格式 yyyy-MM-dd</p>
</blockquote>
<blockquote>
<p>根据国家法律规定，网络运行状态，网络安全事件，个人敏感信息等操作日志，保存不少于六个月，并且网络多机备份</p>
</blockquote>
<blockquote>
<p>扩展日志命令方式appName_logType_logName.log</p>
</blockquote>
<blockquote>
<p>日志输出时，使用占位符拼接,内部实现的是StringBuilder<br>logger.debug(“id = {} and symbol = {}”,id,symbol);</p>
</blockquote>
<blockquote>
<p>对于trace/debug/info级别的日志输出,必须先判断开关</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(logger.isDebugEnable())&#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;id = &#123;&#125;&quot;</span>,id)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>禁止使用System.out或System.err输出日志或者使用e.printStackTrace打印异常堆栈</p>
</blockquote>
<blockquote>
<p>打印日志，直接调用toString方法，不要通过JSONObject.toJsonString，不然会调用get方法</p>
</blockquote>
<blockquote>
<p>单元测试必须遵守AIR，自动化，独立性，可重复</p>
</blockquote>
<blockquote>
<p>单元测试之间不能先后调用,单元测试是可以重复执行的</p>
</blockquote>
<blockquote>
<p>用户个人页面必须权限校验</p>
</blockquote>
<blockquote>
<p>用户敏感数据，必须进行数据脱敏例如 显示 130****4320,防止泄漏</p>
</blockquote>
<blockquote>
<p>用户请求传入的任何参数必须做有效性验证<br>page size 过大导致内存溢出<br>恶意的order by 导致数据库慢查询<br>缓存击穿<br>SSRF，既伪造一个服务端请求，攻击者利用系统的某些接口，通过这个接口向目标系统发情攻击<br>任意重定向<br>SQL注入，Shell注入，反序列化注入<br>正则输入源串拒接服务ReDoS</p>
</blockquote>
<blockquote>
<p>禁止向HTML页面输出未经安全过滤或者正确转义的用户数据</p>
</blockquote>
<blockquote>
<p>表单，AJAX必须执行CSRF安全验证<br>跨站请求伪造是一类常见的编程漏洞，对于存在csrf的网站，攻击者可以实现通过构造好的url，只有受害者用户一访问，后台便可以在用户不知情的情况下修改用户数据<br>可以理解为攻击者盗用了你的身份，然后以你的名义发起恶意请求，这个请求对于服务器来说完全合法</p>
</blockquote>
<blockquote>
<p>url外部重定向传入的地址，必须执行白名单过滤</p>
</blockquote>
<blockquote>
<p>表示是或者否，必须使用is_xxx命名，类型是unsigned tinyint</p>
</blockquote>
<blockquote>
<p>任何字段如果为非负数，必须是unsigned</p>
</blockquote>
<blockquote>
<p>表名，字段名都必须使用小写，数据库修改字段的代价很大，MySQL在Windows下是不区分大小写的，但是在Linux下区分大小写，所有不允许有大小写</p>
</blockquote>
<blockquote>
<p>表明使用用复数形式</p>
</blockquote>
<blockquote>
<p>主键索引名为pk_字段名，唯一索引为uk_字段名,普通索引为idx_字段名</p>
</blockquote>
<blockquote>
<p>小数类型一律用decimal,禁止使用float和double<br>如果您要遵守公认会计原则(GAAP)规则，则货币栏必须至少包含4位小数，以确保舍入值不超过$0.01。 在这种情况下，应该定义具有4位小数的列，如下所示：<br>amount DECIMAL(19,4),第一个参数是最大位数，第二个参数是小数位数<br>如果存储范围超过decimal的范围，建议将数据拆成证书和小数分开存储</p>
</blockquote>
<blockquote>
<p>如果存储的字符串长度几乎相等，使用char定长字符串类型</p>
</blockquote>
<blockquote>
<p>varchar是可变长字符串，不预先分配内存空间，长度不要超过5000，如果长度大于这个值，使用text类型，单独出来一张表，用主键来对应，避免影响其他字段的索引值</p>
</blockquote>
<blockquote>
<p>表必备三字段，id，create_time,update_time<br>id为主键，类型为bigint unsigned，单表时自增，步长为1，<br>create_time,update_time类型均为datetime类型,</p>
</blockquote>
<blockquote>
<p>业务上具有唯一特性的字段，即使是组合字段，也必须建立唯一索引<br>唯一索引不会影响insert速度，但是提高查找速度是明显的，<br>另外，即时在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必有脏数据产生</p>
</blockquote>
<blockquote>
<p>超过三个表禁止join，需要join的字段，数据类型必须保持一致，<br>多表关联查询时,被关联的字段要有索引<br>即时双表join,也要注意表索引</p>
</blockquote>
<blockquote>
<p>在varchar字段建立索引时，必须指定索引长度，没必要全字段建立索引，根据实际的文本区分度决定索引长度</p>
</blockquote>
<blockquote>
<p>页面搜索，严禁左模糊和全模糊，如果需要请走搜索引擎，索引文件根据最左匹配原则，如果左边的值未确定，那么无法使用此索引</p>
</blockquote>
<blockquote>
<p>count(*)会统计为列值为null的行,count(列名)不会</p>
</blockquote>
<blockquote>
<p>count(distinct 字段)计算该列除null之外的不重复行</p>
</blockquote>
<blockquote>
<p>null和任何值比较都是null，而不是true或false</p>
</blockquote>
<blockquote>
<p>如果某一列的值全为空，使用IFNULL(count(列名))或者IFNULL(SUM(列名)),避免空指针<br>使用ISNULL判断是否为NULL，ISNULL(列名)</p>
</blockquote>
<blockquote>
<p>若分页查询，count为0,应该直接返回，避免执行后面的分页语句</p>
</blockquote>
<blockquote>
<p>不得使用外键和级联</p>
</blockquote>
<blockquote>
<p>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性</p>
</blockquote>
<blockquote>
<p>数据订正，要先select，避免出现误删除</p>
</blockquote>
<blockquote>
<p>对于数据库中多个表的查询，都需要在列名前加表的别名</p>
</blockquote>
<blockquote>
<p>在表查询中，一律不使用*</p>
</blockquote>
<blockquote>
<p>不要使用resultCLass当返回参数，即使所有的属性名与数据库字段对应，也需要定义resultMap，方便配置映射关系，使字段与DO类解耦</p>
</blockquote>
<blockquote>
<p>不允许直接拿HashMap和HashTable作为查询结果输出<br>某同学为了避免写一个resultMap,直接使用HashMap接受数据库返回结果，结果出现本地把bigint转换成long值，而由于线上数据库版本不一样，解析成BigInteger，出现问题</p>
</blockquote>
<blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>待学清单</title>
    <url>/2022/06/20/note/%E5%BE%85%E5%AD%A6%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p>问题排查能力<br>blockingQueue []<br>redis<br>mongo<br>tidb</p>
]]></content>
  </entry>
  <entry>
    <title>跨域请求</title>
    <url>/2020/05/18/note/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h1 id="什么是跨域请求"><a href="#什么是跨域请求" class="headerlink" title="什么是跨域请求"></a>什么是跨域请求</h1><blockquote>
<p>请求的目标URL和所在网页的URL的协议、域名、端口有一个不同，就算是跨域<br>https,baidu,80</p>
</blockquote>
<h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p><strong>跨域资源共享(Cross-origin resource sharing)</strong></p>
<blockquote>
<p>在跨域请求之前，先发送options请求询问服务器是否允许接下来的跨域请求<br>OPTIONS请求中添加字段<br>Origin:发起请求的域<br>Access-Control-Request-Method：将要发起的跨域请求方式（GET/PUT/POST/DELETE）<br>Access-Control-Request-Headers：将要发起的跨域请求中包含的请求头字段</p>
</blockquote>
<p>服务器通过响应字段表示是否允许这个跨域请求，浏览器收到后检查如果不符合，就拒绝</p>
<blockquote>
<p>Access-Control-Allow-Origin：允许哪些域来访问（*表示允许所有域的请求）<br>Access-Control-Allow-Methods：允许哪些请求方式<br>Access-Control-Allow-Headers：允许哪些请求头字段<br>Access-Control-Allow-Credentials：是否允许携带Cookie</p>
</blockquote>
<h1 id="两个优化"><a href="#两个优化" class="headerlink" title="两个优化"></a>两个优化</h1><p>如果是一个简单请求，那么就直接发起请求，只需要加入Origin字段表明自己的来源，服务器根据Allow-Origin判断是否符合要求<br>简单请求就是HEAD，GET，POST三者之一，请求头中的</p>
<h1 id="四种常见的-POST-提交数据方式"><a href="#四种常见的-POST-提交数据方式" class="headerlink" title="四种常见的 POST 提交数据方式"></a>四种常见的 POST 提交数据方式</h1><p>HTTP协议是由ASCII码传输的，建立在TCP/IP协议之上的应用层规范，规范把HTTP请求分为三个部分，状态行，请求头，消息主体<br>协议规定POST提交的数据必须放到消息体中，但是没有规定编码方式。<br>数据发送出去，服务端通过Content-Type字段对主体进行解析</p>
<h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><p>默认的编码方式，采用的浏览器的原生form表单，</p>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>开发常用网站</title>
    <url>/2022/06/14/work/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="df0bb676bd930094b33d7958b3eb3abc432969f3c79268dfcdebae424cc0d9c1">4a76fe182f6b350bda831c22429c28628839164ab4d60bac4d2722759e3d085099997ac5d22a768ee614a48bba07fce3ef37c36cac2a9e6be03f73a4b9c2233de74624530c27d1c7377a26219bdd728bf29754731db35a812b43a319a7f7e6080e25411e4d57e9e8f351dbcdfb27b4eee169d0f862c6a8be6a6a53e245952a5f5785e2d366152ff7bde6c507ed41e76e89e24eb3231d1094bf36921e645351e2e21b795f433b8addbc5132e29185832ebdfc2fd353191623f0db86fb6e9e7a680b0c2d61fd46477f032ef08e37b8cfd91b9a40b3d6b7c1263d87597b46fef33fc77a55a696901e9ec071202b663a465cfd72bd08e4a73651cf112eb5343ed3eabeaec9f293e9f1bc365818aec68fd3a220736257ca02343b7c9af9e04a9bc00ccfcb615fa8a479d0a622fc1ff2a8fde5832705400745a1a1739227bd40cf15550e2d55236dfa998b9f3a67a104ad43c34b81b99e972260dd890c56652dad2626e5adb57685fe0b50c46f800bf8d0d45e1b21efa4774c47ef97613247b08d705c217e0428fae75e5b306fb5e3bee5e0e68c1470e1984118c6760633cbb7327e20d8042823aae279fde4a2fe204e5968878c6a507e8caf1af8c46f6dfa232e2045d60ecee16faf79e43094d966999ec4c2e5151e424f9df0ddd99063f433287e35e8df5ad66d6b386d3b21299ccd09b0da21da71a45c31ded2c6a8f787c8bddbb6d4163972f69b4ca1937fb028eaa2bba0bc2987b6d3ed2b075265ed574e0fdd51396d32e8ea66919701b035780f1764f7e23d2a2bee07d108eae21e549fa69cbc953406089c67debc47bf05a0dc574ac8852cae27f99183dce46ef01451c36b3060853f1bc9d61a1d69e8b199accee5d64aa7fe861bfdcbec3280e0eca210b5a2216af685c20d8d3333e85efec31649f6318b593ad3018ed7bb79a52f071d8a48363a9671a61b0824779015e27f6b5a1376fe09eb647f88f1e5cedf790c58de06732845e8e8501fdef1dcc42e411b7bcb36bfe6abe0c607d9e195fed36d4efd707e35433e27862d4da5f26c881d70b2b7e524fd1577cd384b2e879c6dcabc42a8ab469d32122cdfa2f143f1766889a1bcd186e9e552966433d6c122147bb3085e69f1d804f36480392c80d25a58a084da3b18fcf4f925ad96c414d2fa218a976f7d97d923f234c3e08bd4a3a0e42a6eddddfbf404e1e16cfefca537097cf80870316c48eb7d3beac4e17c98a25281d51a8e5d2dae2b6145aabe607556281aaefa845cbb1b93a4bb8788ac56d6f14e32db2c1263034d9ce11b4382328b850f2d906a6b65103a13a9f8070dcccfa643947273db22d7790913fc47f40eb52ea319fe1209ac91e6ec63602f29c7cc53f5cc2c1bf8fe0eed6e2952970c69925e8daf0f3c6a11fd2a000fe1d2da28e2bb3e2979b806315781baf17734e7602128eca59e7149c6391d9a6a6c2e48d077872e123e2c3d86bab5177742f754e70a4a79647f82f1965ce2bdbd040fea6d08337465126e6e6601baa0223691c7b07a947948c095028fdf2257db08c10eadfc03f460563c1cecab8c41fc8450f38345327fe54d88f9db3484b5c3ba3bab8303f0dbcdfe4a8e29f7f2ebaea31a9a6e2e5b4857e862a2087bfe52d9844ee27f57c11dc93e9496b98343fbb08aa5389cda69895a8d6c53daad3b3a452a6a4864b1de85c187d44e292169d39bb42680450f94424bd519ff4504776da3c34501dc4553f725cc25ce545d294766d98daa3d804b35ad1af31f69afb25932ae798a1f2a4a2aee290aa53a2961e2a9cbb56c185c38aadaae33a195fcf5049f6b51f08496b0b5cc2a9ec3876781563b5997d33251b6f3aaa518394015b49191d652422c864234e6c05e31399cc9f7c0eface617ba94f8ad49b9152b06ce58417d18f87797aa2f878390fff0a6882fe64d3e3000c67a950d7aa9bf7d9c92a31e02e07bdcc6fe9a10a9f21e7978ee2fc27b620940da4b020ad77bddf622e338e8f4c6048e79b068731a38a9f8c9ee34aa7535cb4dcfef53783cac6990c26d33b342eb6a9e48e25750868326878bbac091dadba5a710a8be970b6a1db9bcda7584beb31093d57371e22d0fc65a7eab069a2da2fb5addd596a4b58b9e919850211cd3021cd95026189c0eaa1e95a55a4d19dd6afb06161df51495be3a06e4006b526eac8dff94a71a299a766b12cbe53fec4c1027630a97c6b8b17c79aa57036ef59f2b3bb44afd566797da2cc72055d1b7802c6c265ef638e7a689a47c71afb090023b4514004a488ce97b57e4be4f95048ab4d29543cf316b1633c818ee88e86f4da6e2d28e35cd1aee829960d620474505f5329b0b22f8b73baa92192a9e6c12e397e28763bcff03643e172da0a9f19aafcb54ee9320207111387dac0b173b913fe3c29989b59fb7a634a93c2d3fea57d711a6cf3b8c8f4e4eb78ce74e2beaa5561c828ca3e81223c030154c9e418a7658eea8ba1ed63375188ecb77966ecb29886fca9d87f9d12429210605f9d6f84469a0a00b3eaa1ae7995ec744058707d26e9324e252db90bff440dc1a9a49eb015f8dc093b33604e08acf3e80dc613827ee4b4bfab8ff3d7bcd358867d1921bf31356f51ea8f827d91ef2ad885cc9251e1c5e190974009097e6793054e55efdfeb580bec366de4cf9b1631fa126d386b7c02c09cfb7b2743cc775da3bbd4df0e228a10fdaa3f78748a9d4a0f2ef0029b0bfdce175951c5defdcded36130a246e66ce8d60bc14fa392ce3b7b905b1c7e595baeadf094c5e1597f567dae9d0af038e510fa9b59bc02d82aafd5d70d4cedac69207e52986bcf8904111aed62b2e37c1c29684713bebc0a7fbf13b76ceedc19ad9756c067359e2bcdbba528f94df0f113e253dda1adda30ffabff8254a9c47762e8e4c90499121a222a2ba8ab6e5c248f2b22aea4087f2709745752008e71a2a75a59b00e78407f03a3333468f817f4946378c0b96713ebd497d927557226b1c49315c60a953278784a8bdb4305edc7325cab3b4791090c8757dcc89490852fe9122cd66ebddb4193479aad616fa953a68dba37184a122c128616afb11fb701b302ff5f7b0341109ffc261b7285c3b3a99c0156275f88b1a2015d4f0f85b092ae5e651e9f1c31eae3f2779f043ce8008d4c81b5035576e247e0ef2b7ef986cf94125bd6a16915110b2af80f484e213c96e8cb7aa345b42cc5e48f9d02b3dbd2a693b636ff2a29a1ab059d38e68ec351e04277fd4ac6b4bd89d8370590f4933e4f4ae414758b39c87bf84bb005e4c399ce94a1444305004db67b375c4f193def5fe93595c737029e8ac0d36862da761919b970be6781be6803b1dd74c85470ee6ba3c30dced028947210cf85e4b09def305ffc9a770f5ca3f2081811d2d92cc3c30b778bfb224525a9bde7fabee4c5b1a6b54580602610d50787e436bf38e9fe6c02384b0174432162833016e356f482a2c00ac9e3eb5d59429378bc79ba6b52ed258a962daa6fbe27d2b2318fadd40f250497a0de1c04df0881cb0be72454e0fbe6864c5dc9402acff68b613037d547764de71c83e2302e82bbd66ca322d9a145831805186dcc470b3eb3666fe92a8b4a3ec433751147280d1ecc19d8886db10cb9f36795a42893041d98c09346e9a73863549e6fec3345306fe4aff9b08d994747b895aefa4ff512c72db65f977505a4c95ce5a6aea58918d0e46aaf3ffe75c116af33c867c86bf24da307c7e66bdcf454d427614b5b3ea49fa873fda82938d22e17ca7b405be95651865bae89ff5d8645d962ad183c222899b9e8ab49f07c2beb50c3f0e2bc581741f3519cf08f1444afe9df2546a1ebb9cc8a9098e0be8ca339d75529c9fb96e637dc455962f6b79f7eb7beb91819396732662d7f5aacafbf8e8bd79960be80767d68f304343f306fa3f99b03efbbb50224b972e7563dbc8fd239de1fcd0e515affae04fd561cb8cc0c2acffd511da78f835deb15586254b0aa94d0db13c90452d1a872263fe2173ea8d02e344482c048a64f6af1f87e19cee6b39b4ab7a97fed48667d194b324be16459efd2cf7d61a46e8fbff490eac1c8552bf2ce5bc6c726d88cf11d0b81897b0e86c8a18b3a15c4517daa26e64b8c519942a88eeed4a771250c0cb838c2514706ca290ae94b738ae333cbb81e5202a8c89ba9441b4032af31cee72ade5238e8547c1c08e12b585699e8967c9a76846506bff1dd57edbe0fd658e59fa59bda3ad867570bd3c7a2eb7fcb9e4db9ea5d41fde74913f298b7e38691f5929befcfa089f23cda8c834488ba5c85b21ded1c3323d359fb40ecbdb5a139afdd9271c015ecb22e9fa5c3106d7bab3cdb4ec86b3d2679d369568dc28c72e636bc166946d6d60f88ff5aa1b3289874b52b9440fbf4171429b9a2c93f87ba174355cf4f4d697835ba9541a67bc6095fb417f7c7c801860a5c6a3bb4e2a627959b0f63d2ae0c940077294b0ff1c0a45cd3c7813b97d20aec02b9407450165e1d13ba172613c7f715a98b4664ecf110be60ca9e453f3f33aff54cf366fa6c7897d7de59dd5f6eab6edaa9576fcdc7ca02358525b3b6fce2b87f7ae6d0e53d06b4d3623a2e73541969f483d4d0a58c77e545e38704d71f1be8fe01368fe0786f7a24df682ed5b862c2997d1e240896f1adbcdd1087ccbc8ed80af3c7ac379c22a6f9ab6e829650325e089176a914c3661c7d1b7059ff161adf05f335ce079567f43a9f579af8ff0584f2fa5befb479b0e8ca955b249d37e5ba74fd5b87eb2da0890feb6051384c2fa4f5f55ef7b82b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA暂存文件</title>
    <url>/2022/06/28/pulgin/IDEA%E6%9A%82%E5%AD%98%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>从主菜单中，选择文件 | 新 | 暂存文件或按Ctrl+Alt+Shift+Insert<br><a href="https://www.jetbrains.com/help/webstorm/scratches.html#create-scratch-file">https://www.jetbrains.com/help/webstorm/scratches.html#create-scratch-file</a></p>
]]></content>
      <tags>
        <tag>暂存文件</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisCodeHelper-Pro</title>
    <url>/2022/06/14/pulgin/MyBatisCodeHelper-Pro/</url>
    <content><![CDATA[<h1 id="配置model不被覆盖"><a href="#配置model不被覆盖" class="headerlink" title="配置model不被覆盖"></a>配置model不被覆盖</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614114751.png"></p>
<h1 id="生成单元测试"><a href="#生成单元测试" class="headerlink" title="生成单元测试"></a>生成单元测试</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115240.png"></p>
<p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/20220614115304.png"></p>
<h1 id="xml生成resultMap"><a href="#xml生成resultMap" class="headerlink" title="xml生成resultMap"></a>xml生成resultMap</h1><p><img src="https://blog-1258707945.cos.ap-guangzhou.myqcloud.com//blog/generateResultMapAndXmlGenerateJavaMethod.gif"></p>
]]></content>
      <tags>
        <tag>IDEA插件</tag>
      </tags>
  </entry>
  <entry>
    <title>GenerateAllSetter Postfix Completion</title>
    <url>/2022/06/20/pulgin/GenerateAllSetter%20Postfix%20Completion/</url>
    <content><![CDATA[<p>生成 set</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">foo.allset</span><br></pre></td></tr></table></figure>
<p>根据一段含有源对象（a）/目标对象（b）的 b.setXxx(a.getXxx()) 方法代码生成所有 set 方法以快速实现对象转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">usage05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用法5, 将 src 的数据赋值给 dest, 常用于两个不同类直接进行 convert(需字段名称相同), 通过 postfix</span></span><br><span class="line">    Foo src = <span class="keyword">new</span> Foo();</span><br><span class="line">    Foo dest = <span class="keyword">new</span> Foo();</span><br><span class="line">    <span class="comment">// 取消下面的注释, 光标位于 convert 后面, 按下 Tab 键</span></span><br><span class="line"><span class="comment">//        dest.setTestInt(src.getTestInt());.convert</span></span><br><span class="line">    <span class="comment">// 即可得到下面结果</span></span><br><span class="line">    dest.setTestInt(src.getTestInt());</span><br><span class="line">    dest.setTestLong(src.getTestLong());</span><br><span class="line">    dest.setTestFloat(src.getTestFloat());</span><br><span class="line">    dest.setTestDouble(src.getTestDouble());</span><br><span class="line">    dest.setTestBoolean(src.getTestBoolean());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>绩效考核系统</title>
    <url>/2022/06/21/task/%E7%BB%A9%E6%95%88%E8%80%83%E6%A0%B8%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="360干部考核系统-wehr"><a href="#360干部考核系统-wehr" class="headerlink" title="360干部考核系统-wehr"></a>360干部考核系统-wehr</h1><p>主要功能分为问卷管理，问卷填写，评估管理和结果报告</p>
<p><a href="https://wesure.coding.inwesure.com/p/g010/d/wehr/git">https://wesure.coding.inwesure.com/p/g010/d/wehr/git</a></p>
<p>使用使用分支 dev</p>
<p>两个项目端口都是9200，改wehr为9201，同时修改grpc端口为59201</p>
<h1 id="绩效考核系统-assess"><a href="#绩效考核系统-assess" class="headerlink" title="绩效考核系统-assess"></a>绩效考核系统-assess</h1><p>分为绩效目标和绩效考核，绩效考核分为自评、初评、复评、星级报表、评估结果展示、评估配置</p>
<p><a href="https://wesure.coding.inwesure.com/p/g010/d/assess/git">https://wesure.coding.inwesure.com/p/g010/d/assess/git</a></p>
<p>使用使用分支 dev</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>新建周期(assess_period)</p>
<p>​    -目标人员填写(assess_target_persons)    id = period_id</p>
<p>​    -评估主实体(assess_header)                      period_code= period_code</p>
<ul>
<li></li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="发起目标，还没有导入填写目标人员，发起成功-好像又不用改动了"><a href="#发起目标，还没有导入填写目标人员，发起成功-好像又不用改动了" class="headerlink" title="发起目标，还没有导入填写目标人员，发起成功(好像又不用改动了)"></a>发起目标，还没有导入填写目标人员，发起成功(好像又不用改动了)</h3><p>解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询当前周期信息</span></span><br><span class="line">AssessPeriod assessPeriodDb = assessPeriodService.selectByPrimaryKey(assessPeriod.getId());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == assessPeriodDb)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BaseResult(BaseMessage.FAILED,<span class="string">&quot;考核周期不存在&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AssessHeaderExample assessHeaderExample = <span class="keyword">new</span> AssessHeaderExample();</span><br><span class="line">assessHeaderExample.createCriteria()</span><br><span class="line">        .andIsDelEqualTo((<span class="keyword">byte</span>) <span class="number">0</span>)</span><br><span class="line">        .andPeriodCodeEqualTo(assessPeriodDb.getPeriodCode());</span><br><span class="line">List&lt;AssessHeader&gt; assessHeaders = assessHeaderService.selectByExample(assessHeaderExample);</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(assessHeaders))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BaseResult(BaseMessage.FAILED,<span class="string">&quot;请先配置评估人员&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">period_status &#x27;状态 0未发起 1已发起 2已结束&#x27;,</span><br></pre></td></tr></table></figure>






<h1 id="前端网页"><a href="#前端网页" class="headerlink" title="前端网页"></a>前端网页</h1><p><a href="https://wesure.coding.inwesure.com/p/g010/d/assess-web/git">https://wesure.coding.inwesure.com/p/g010/d/assess-web/git</a></p>
<p>使用使用分支 develop</p>
<p><a href="http://localhost:9008/">http://localhost:9008/</a>      </p>
<h2 id="配置本地网关"><a href="#配置本地网关" class="headerlink" title="配置本地网关"></a>配置本地网关</h2><p>vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// app部署路径</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="comment">// build目录</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">clientLogLevel</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9008</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">warnings</span>: <span class="literal">false</span>, <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">      <span class="attr">poll</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 系统业务接口</span></span><br><span class="line">      <span class="string">&#x27;/wofNidGenerator/getNids&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://upmsapi.sit.com:10020&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;X-WESURE-ENAME&#x27;</span>: <span class="string">&#x27;v_linzlzhao&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 自定义页面接口</span></span><br><span class="line">      <span class="string">&#x27;/upmsapi/forward_service/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://upmsapi.sit.com:10020&#x27;</span>, <span class="comment">// sit</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/manage/formappdata/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.0.32.65:80&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/manage/customapp/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.0.32.65:80&#x27;</span>,</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.34:8001&#x27;,</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/manage/processappdata/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.0.32.65:80&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/workflow/workflow_procIns/getDataByUrl&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://upmsapi.sit.com:10020&#x27;</span>,</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.22:10020&#x27;,</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;X-WESURE-ENAME&#x27;</span>: <span class="string">&#x27;v_linzlzhao&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/workflow/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.0.32.179:7001&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;X-WESURE-ENAME&#x27;</span>: <span class="string">&#x27;v_linzlzhao&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 系统业务接口</span></span><br><span class="line">      <span class="string">&#x27;/assess/result/&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.68:9200&#x27;, // 淼哥</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.98.164.181:9200&#x27;</span>, <span class="comment">// sit</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.164.143:9200&#x27;, // sit</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">        <span class="comment">// headers: &#123;</span></span><br><span class="line">        <span class="comment">//   &#x27;X-WESURE-ENAME&#x27;: &#x27;raymcheng&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/public/pbc&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.68:9200&#x27;, // 淼哥</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.130:9200&#x27;, // 东哥</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.98.164.181:9200&#x27;</span>, <span class="comment">// 一路</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.130:9200&#x27;, // 景康</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.0.22.240:80&#x27;, // sit</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/public/&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.68:9200&#x27;, // 淼哥</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.130:9200&#x27;, // 东哥</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.98.164.181:9200&#x27;</span>, <span class="comment">// 一路</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.130:9200&#x27;, // 景康</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.0.22.240:80&#x27;, // sit</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/assess/pbc/&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.68:9200&#x27;, // 淼哥</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.130:9200&#x27;, // 东哥</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.98.164.181:9200&#x27;</span>, <span class="comment">// 一路</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.130:9200&#x27;, // 景康</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.0.22.240:80&#x27;, // sit</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;X-WESURE-ENAME&#x27;</span>: <span class="string">&#x27;yeelusun&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/assess/&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.68:9200&#x27;, // 淼哥</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.130:9200&#x27;, // 东哥</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.98.164.181:9201&#x27;</span>, <span class="comment">// 一路</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.0.64.179:9200&#x27;, // sit</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;X-WESURE-ENAME&#x27;</span>: <span class="string">&#x27;jackieyang&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/hr/&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.68:9200&#x27;, // 淼哥</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.163.33:9200&#x27;, // 东哥</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.98.164.197:9200&#x27;, // 一路</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.98.164.181:9201&#x27;</span>, <span class="comment">// 一路</span></span><br><span class="line">        <span class="comment">// target: &#x27;http://10.0.64.179:9200&#x27;, // sit</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">        <span class="comment">// headers: &#123;</span></span><br><span class="line">        <span class="comment">//   &#x27;X-WESURE-ENAME&#x27;: &#x27;raymcheng&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 系统业务接口</span></span><br><span class="line">      <span class="string">&#x27;/manage/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.0.32.14:7001&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 人员和组织接口, 针对/api/v2/user/search和/api/v2/organization/search，这2个接口没用到的可以不配</span></span><br><span class="line">      <span class="string">&#x27;/api/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://upmsapi.sit.com:10020&#x27;</span>,</span><br><span class="line">        <span class="comment">// target: &#x27;http://upmsapi.dev.com:10020&#x27;,</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 统一网关接口</span></span><br><span class="line">      <span class="string">&#x27;/SolomonService/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://upmsapi.sit.com:10020&#x27;</span>,</span><br><span class="line">        <span class="comment">// target: &#x27;http://upmsapi.dev.com:10020&#x27;,</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>task</tag>
      </tags>
  </entry>
</search>
